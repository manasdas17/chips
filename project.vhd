-- generated by python streams library
-- date generated  : UTC 2010-10-23 09:06:01
-- platform        : linux2
-- python version  : 2.6.5 (r265:79063, Apr 16 2010, 13:57:41) 
--                   [GCC 4.4.3]
-- streams version : 0.1

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity STREAMS_VHDL_MODEL is

end entity STREAMS_VHDL_MODEL;

architecture RTL of STREAMS_VHDL_MODEL is


  --returns the greater of the two parameters
  function MAX(
    A : integer;
    B : integer) return integer is
  begin
    if A > B then
      return A;
    else
      return B;
    end if;
  end MAX;

  --returns a std_logic_vector sum of the two parameters
  function ADD(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'length, B'length) + 1) + 
      resize(signed(B), MAX(A'length, B'length) + 1));
    end ADD;

  --returns a std_logic_vector product of the two parameters
  function MUL(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      signed(A) *
      signed(B));
    end MUL;

  --returns a std_logic_vector difference of the two parameters
  function SUB(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'length, B'length) + 1) - 
      resize(signed(B), MAX(A'length, B'length) + 1));
  end SUB;

  --returns A shifted right (arithmetic) by A
  function SR(
    A  : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(shift_right(signed(A), to_integer(signed(B))));
  end SR;

  --returns A shifted left by B
  function SL(
    A  : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
        shift_left(
           resize(signed(A), A'length + (2**(B'length-1))-1),
           to_integer(signed(B))
       )
   );
  end SL;

  --returns bitwise and of A and B
  --(A and B are resized to the length of the larger first)
  function BAND(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) and
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BAND;

  --returns bitwise or of A and B
  --(A and B are resized to the length of the larger first)
  function BOR(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) or
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BOR;

  --returns bitwise xor of A and B
  --(A and B are resized to the length of the larger first)
  function BXOR(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) xor
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BXOR;

  --equality comparison of A and B
  --(A and B are resized to the length of the larger first)
  function EQ(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) =
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end EQ;

  --inequality comparison of A and B
  --(A and B are resized to the length of the larger first)
  function NE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
    resize(signed(A), MAX(A'LENGTH, B'LENGTH)) /=
    resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end NE;

  --greater than comparison of A and B
  --(A and B are resized to the length of the larger first)
  function GT(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) >
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end GT;

  --greater than or equal comparison of A and B
  --(A and B are resized to the length of the larger first)
  function GE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) >=
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end GE;

  --less than comparison of A and B
  --(A and B are resized to the length of the larger first)
  function LT(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) <
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end LT;

  --less than or equal comparison of A and B
  --(A and B are resized to the length of the larger first)
  function LE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) <=
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end LE;

  --resize A to B bits
  function STD_RESIZE(
    A : std_logic_vector; 
    B : integer) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), B));
  end STD_RESIZE;

  --print a value
  procedure PRINT(
    A : std_logic_vector) is
    variable output_line : line;
  begin
    write(output_line, to_integer(signed(A)));
    writeline(output, output_line);
  end PRINT;

  type BINARY_STATE_TYPE is (BINARY_INPUT, BINARY_OUTPUT);
  type UNARY_STATE_TYPE is (UNARY_INPUT, UNARY_OUTPUT);
  type TEE_STATE_TYPE is (TEE_INPUT_A, TEE_WAIT_YZ, TEE_WAIT_Y, TEE_WAIT_Z);
  type DIVIDER_STATE_TYPE is (READ_A_B, DIVIDE_1, DIVIDE_2, WRITE_Z);
  type SERIAL_IN_STATE_TYPE is (IDLE, START, RX0, RX1, RX2, RX3, RX4, RX5, RX6, RX7, STOP, OUTPUT_DATA);
  type SERIAL_OUT_STATE_TYPE is (IDLE, START, WAIT_EN, TX0, TX1, TX2, TX3, TX4, TX5, TX6, TX7, STOP);
  type FORMATER_STATE_TYPE is (INPUT_A, SHIFT, OUTPUT_SIGN, OUTPUT_Z);
  type HEX_FORMATER_STATE_TYPE is (INPUT_A, OUTPUT_SIGN, OUTPUT_DIGITS);

  signal CLK : std_logic;
  signal RST : std_logic;
  signal STATE_368      : BINARY_STATE_TYPE;
  signal STREAM_368     : std_logic_vector(0 downto 0);
  signal STREAM_368_STB : std_logic;
  signal STREAM_368_ACK : std_logic;

  signal STREAM_365     : std_logic_vector(7 downto 0);
  signal STREAM_365_STB : std_logic;
  signal STREAM_365_ACK : std_logic;
  signal SIGN_365       : std_logic;
  signal STATE_365      : HEX_FORMATER_STATE_TYPE;
  signal BINARY_365     : std_logic_vector(7 downto 0);
  signal CURSOR_365     : integer range 0 to 0;

  signal STREAM_364     : std_logic_vector(7 downto 0);
  signal STREAM_364_STB : std_logic;
  signal STREAM_364_ACK : std_logic;

  signal STREAM_367     : std_logic_vector(7 downto 0);
  signal STREAM_367_STB : std_logic;
  signal STREAM_367_ACK : std_logic;
  signal STATE_367 : UNARY_STATE_TYPE;
  type LOOKUP_367_TYPE is array (0 to 4) of std_logic_vector(7 downto 0);
  signal LOOKUP_367 : LOOKUP_367_TYPE := (
0 => "00101101",
1 => "00110000",
2 => "01111000",
3 => "00111000",
4 => "00110000"
  );

  signal STREAM_366     : std_logic_vector(3 downto 0);
  signal STREAM_366_STB : std_logic;
  signal STREAM_366_ACK : std_logic;


begin

  --internal clock generator
  process
  begin
    while True loop
      CLK <= '0';
      wait for 5 ns;
      CLK <= '1';
      wait for 5 ns;
    end loop;
    wait;
  end process;

  --internal reset generator
  process
  begin
    RST <= '1';
    wait for 20 ns;
    RST <= '0';
    wait;
  end process;

  --file: ./test_streams_VHDL.py, line: 905
  --Asserter(368)
  process
  begin
    wait until rising_edge(CLK);
    STREAM_368_ACK <= '0';
    if STREAM_368_STB = '1' and STREAM_368_ACK = '0' then
      assert(STREAM_368 /= "0") severity failure;
      STREAM_368_ACK <= '1';
    end if;
  end process;

  --file: /home/jon/streams/streams/streams.py, line: 109
  --STREAM 368 Binary(365, 367, 'eq')
  process
  begin
    wait until rising_edge(CLK);
    case STATE_368 is
      when BINARY_INPUT =>
        if STREAM_365_STB = '1' and STREAM_367_STB = '1' then
          STREAM_365_ACK <= '1'; STREAM_367_ACK <= '1';
          STREAM_368 <= EQ(  STREAM_365, STREAM_367);
          STREAM_368_STB <= '1';
          STATE_368 <= BINARY_OUTPUT;
        end if;
      when BINARY_OUTPUT =>
        STREAM_365_ACK <= '0'; STREAM_367_ACK <= '0';
        if STREAM_368_ACK = '1' then
           STREAM_368_STB <= '0';
           STATE_368 <= BINARY_INPUT;
        end if;
     end case;
     if RST = '1' then
       STREAM_368_STB <= '0';
       STREAM_365_ACK <= '0';
       STREAM_367_ACK <= '0';
       STATE_368 <= BINARY_INPUT;
     end if;
  end process;

  --file: ./test_streams_VHDL.py, line: 905
  --STREAM 365 HexFormater(364)
  process
    type NIBBLE_TYPE is array (0 to 0) of std_logic_vector(3 downto 0);
    variable NIBBLE : NIBBLE_TYPE;
  begin
    wait until rising_edge(CLK);
    case STATE_365 is
      when INPUT_A =>
        if STREAM_364_STB = '1' then
          STREAM_364_ACK <= '1';
          SIGN_365 <= STREAM_364(7);
          BINARY_365 <= std_logic_vector(abs(signed(STREAM_364)));
          CURSOR_365 <= 0;
          STATE_365 <= OUTPUT_SIGN;
        end if;

      when OUTPUT_SIGN =>
        if SIGN_365 = '1' then
          STREAM_365 <= "00101101";
          STREAM_365_STB <= '1';
          if STREAM_365_ACK = '1' then
            STREAM_365_STB <= '0';
            STATE_365 <= OUTPUT_DIGITS;
          end if;
        end if;

      when OUTPUT_DIGITS =>
        STREAM_364_ACK <= '0';
        NIBBLE(0) := BINARY_365(3 downto 0);
        case NIBBLE(CURSOR_365) is
            when X"0" => STREAM_365 <= X"30";
            when X"1" => STREAM_365 <= X"31";
            when X"2" => STREAM_365 <= X"32";
            when X"3" => STREAM_365 <= X"33";
            when X"4" => STREAM_365 <= X"34";
            when X"5" => STREAM_365 <= X"35";
            when X"6" => STREAM_365 <= X"36";
            when X"7" => STREAM_365 <= X"37";
            when X"8" => STREAM_365 <= X"38";
            when X"9" => STREAM_365 <= X"39";
            when X"A" => STREAM_365 <= X"61";
            when X"B" => STREAM_365 <= X"62";
            when X"C" => STREAM_365 <= X"63";
            when X"D" => STREAM_365 <= X"64";
            when X"E" => STREAM_365 <= X"65";
            when X"F" => STREAM_365 <= X"66";
            when others => null;
        end case;
        STREAM_365_STB <= '1';
        if STREAM_365_ACK = '1' then
          STREAM_365_STB <= '0';
          if CURSOR_365 = 0 then
            STATE_365 <= INPUT_A;
          else
            CURSOR_365 <= CURSOR_365 - 1;
          end if;
        end if;

     end case;
     if RST = '1' then
       STREAM_365_STB <= '0';
       STREAM_364_ACK <= '0';
       STATE_365 <= INPUT_A;
     end if;
  end process;

  --file: ./test_streams_VHDL.py, line: 905
  --STREAM 364 Repeater(-128, 8)
  STREAM_364 <= "10000000";
  process
  begin
    wait until rising_edge(CLK);
    STREAM_364_STB <= not STREAM_364_ACK;
  end process;

  --file: /home/jon/streams/streams/__init__.py, line: 53
  --STREAM 367 Lookup()
  process
  begin
    wait until rising_edge(CLK);
    case STATE_367 is
      when UNARY_INPUT =>
        if STREAM_366_STB = '1' then
          STREAM_366_ACK <= '1';
          STREAM_367_STB <= '1';
          STREAM_367 <= LOOKUP_367(to_integer(unsigned(STREAM_366)));
          STATE_367 <= UNARY_OUTPUT;
        end if;
      when UNARY_OUTPUT =>
        STREAM_366_ACK <= '0';
        if STREAM_367_ACK = '1' then
           STREAM_367_STB <= '0';
           STATE_367 <= UNARY_INPUT;
        end if;
     end case;
     if RST = '1' then
       STREAM_367_STB <= '0';
       STREAM_366_ACK <= '0';
       STATE_367 <= UNARY_INPUT;
     end if;
  end process;

  --file: /home/jon/streams/streams/__init__.py, line: 53
  --STREAM 366 Counter(0, 4, 1, 4)
  process
  begin
    wait until rising_edge(CLK);
    STREAM_366_STB <= '1';
    if STREAM_366_ACK = '1' then
      STREAM_366_STB <= '0';
      STREAM_366 <= STD_RESIZE(ADD(STREAM_366, "0001"), 4);
      if STREAM_366 = "0100" then
        STREAM_366 <= "0000";
      end if;
    end if;
    if RST = '1' then
      STREAM_366_STB <= '0';
      STREAM_366 <= "0000";
    end if;
  end process;


end architecture RTL;