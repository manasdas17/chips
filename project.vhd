-- generated by python streams library
-- date generated  : UTC 2010-10-24 13:01:49
-- platform        : linux2
-- python version  : 2.6.5 (r265:79063, Apr 16 2010, 13:57:41) 
--                   [GCC 4.4.3]
-- streams version : 0.1

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity STREAMS_VHDL_MODEL is
  port(
    CLK           : in  std_logic;
    RST           : in  std_logic;
    TX : out std_logic
  );
end entity STREAMS_VHDL_MODEL;

architecture RTL of STREAMS_VHDL_MODEL is


  --returns the greater of the two parameters
  function MAX(
    A : integer;
    B : integer) return integer is
  begin
    if A > B then
      return A;
    else
      return B;
    end if;
  end MAX;

  --returns a std_logic_vector sum of the two parameters
  function ADD(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'length, B'length) + 1) + 
      resize(signed(B), MAX(A'length, B'length) + 1));
    end ADD;

  --returns a std_logic_vector product of the two parameters
  function MUL(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      signed(A) *
      signed(B));
    end MUL;

  --returns a std_logic_vector difference of the two parameters
  function SUB(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'length, B'length) + 1) - 
      resize(signed(B), MAX(A'length, B'length) + 1));
  end SUB;

  --returns A shifted right (arithmetic) by A
  function SR(
    A  : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(shift_right(signed(A), to_integer(signed(B))));
  end SR;

  --returns A shifted left by B
  function SL(
    A  : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
        shift_left(
           resize(signed(A), A'length*2), --+ (2**(B'length-1))-1),
           to_integer(signed(B))
       )
   );
  end SL;

  --returns bitwise and of A and B
  --(A and B are resized to the length of the larger first)
  function BAND(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) and
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BAND;

  --returns bitwise or of A and B
  --(A and B are resized to the length of the larger first)
  function BOR(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) or
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BOR;

  --returns bitwise xor of A and B
  --(A and B are resized to the length of the larger first)
  function BXOR(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) xor
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BXOR;

  --equality comparison of A and B
  --(A and B are resized to the length of the larger first)
  function EQ(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) =
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end EQ;

  --inequality comparison of A and B
  --(A and B are resized to the length of the larger first)
  function NE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
    resize(signed(A), MAX(A'LENGTH, B'LENGTH)) /=
    resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end NE;

  --greater than comparison of A and B
  --(A and B are resized to the length of the larger first)
  function GT(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) >
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end GT;

  --greater than or equal comparison of A and B
  --(A and B are resized to the length of the larger first)
  function GE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) >=
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end GE;

  --less than comparison of A and B
  --(A and B are resized to the length of the larger first)
  function LT(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) <
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end LT;

  --less than or equal comparison of A and B
  --(A and B are resized to the length of the larger first)
  function LE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) <=
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end LE;

  --resize A to B bits
  function STD_RESIZE(
    A : std_logic_vector; 
    B : integer) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), B));
  end STD_RESIZE;

  --print a value
  procedure PRINT(
    A : std_logic_vector) is
    variable output_line : line;
  begin
    write(output_line, to_integer(signed(A)));
    writeline(output, output_line);
  end PRINT;

  type BINARY_STATE_TYPE is (BINARY_INPUT, BINARY_OUTPUT);
  type UNARY_STATE_TYPE is (UNARY_INPUT, UNARY_OUTPUT);
  type TEE_STATE_TYPE is (TEE_INPUT_A, TEE_WAIT_YZ, TEE_WAIT_Y, TEE_WAIT_Z);
  type DIVIDER_STATE_TYPE is (READ_A_B, DIVIDE_1, DIVIDE_2, WRITE_Z);
  type SERIAL_IN_STATE_TYPE is (IDLE, START, RX0, RX1, RX2, RX3, RX4, RX5, RX6, RX7, STOP, OUTPUT_DATA);
  type SERIAL_OUT_STATE_TYPE is (IDLE, START, WAIT_EN, TX0, TX1, TX2, TX3, TX4, TX5, TX6, TX7, STOP);
  type FORMATER_STATE_TYPE is (INPUT_A, SHIFT, OUTPUT_SIGN, OUTPUT_Z);
  type HEX_FORMATER_STATE_TYPE is (INPUT_A, OUTPUT_SIGN, OUTPUT_DIGITS);

  constant TIMER_1us_MAX : integer := 49;
  signal TIMER_1us_COUNT : integer range 0 to TIMER_1us_MAX;
  signal TIMER_1us : std_logic;



  signal STATE_3           : SERIAL_OUT_STATE_TYPE;
  constant CLOCK_DIVIDER_3 : Unsigned(11 downto 0) := To_unsigned(433, 12);
  signal BAUD_COUNT_3      : Unsigned(11 downto 0);
  signal DATA_3            : std_logic_vector(7 downto 0);
  signal X16CLK_EN_3       : std_logic;
  signal STREAM_2     : std_logic_vector(7 downto 0);
  signal STREAM_2_STB : std_logic;
  signal STREAM_2_ACK : std_logic;

  signal STREAM_0       : std_logic_vector(15 downto 0);
  signal STREAM_0_STB   : std_logic;
  signal STREAM_0_ACK   : std_logic;
  constant OP_ADD_1 : std_logic_vector(4 downto 0) := "00000";
  constant OP_SUB_1 : std_logic_vector(4 downto 0) := "00001";
  constant OP_MUL_1 : std_logic_vector(4 downto 0) := "00010";
  constant OP_DIV_1 : std_logic_vector(4 downto 0) := "00011";
  constant OP_BAND_1 : std_logic_vector(4 downto 0) := "00100";
  constant OP_BOR_1 : std_logic_vector(4 downto 0) := "00101";
  constant OP_BXOR_1 : std_logic_vector(4 downto 0) := "00110";
  constant OP_SL_1 : std_logic_vector(4 downto 0) := "00111";
  constant OP_SR_1 : std_logic_vector(4 downto 0) := "01000";
  constant OP_EQ_1 : std_logic_vector(4 downto 0) := "01001";
  constant OP_NE_1 : std_logic_vector(4 downto 0) := "01010";
  constant OP_GT_1 : std_logic_vector(4 downto 0) := "01011";
  constant OP_GE_1 : std_logic_vector(4 downto 0) := "01100";
  constant OP_JMP_1 : std_logic_vector(4 downto 0) := "01101";
  constant OP_JMPF_1 : std_logic_vector(4 downto 0) := "01110";
  constant OP_IMM_1 : std_logic_vector(4 downto 0) := "01111";
  constant OP_MOVE_1 : std_logic_vector(4 downto 0) := "10000";
  constant OP_WAIT_US_1 : std_logic_vector(4 downto 0) := "10001";
  constant OP_MOD_1 : std_logic_vector(4 downto 0) := "10010";
  constant OP_WRITE_0_1 : std_logic_vector(4 downto 0) := "10011";
  type PROCESS_1_STATE_TYPE is (STALL, EXECUTE, DIVIDE_0, DIVIDE_1, DIVIDE_2, WAIT_US, WRITE_STREAM_0);
  type INSTRUCTIONS_TYPE_1  is array (0 to 269) of std_logic_vector(25 downto 0);
  type REGISTERS_TYPE_1     is array (0 to 19) of std_logic_vector(15 downto 0);
  signal STATE_1        : PROCESS_1_STATE_TYPE;
  signal REGISTERS_1    : REGISTERS_TYPE_1;
  signal PC_1           : unsigned(8 downto 0);
  signal OPERATION_1    : std_logic_vector(4 downto 0);
  signal SRCA_1         : std_logic_vector(4 downto 0);
  signal SRCB_1         : std_logic_vector(4 downto 0);
  signal IMMEDIATE_1    : std_logic_vector(15 downto 0);
  signal ZERO_1         : std_logic;
  signal A_1            : std_logic_vector(15 downto 0);
  signal B_1            : std_logic_vector(15 downto 0);
  signal QUOTIENT_1     : std_logic_vector(15 downto 0);
  signal SHIFTER_1      : std_logic_vector(15 downto 0);
  signal REMAINDER_1    : std_logic_vector(15 downto 0);
  signal COUNT_1        : integer range 0 to 16;
  signal SIGN_1         : std_logic;
  signal INSTRUCTIONS_1 : INSTRUCTIONS_TYPE_1 := (
0 => OP_IMM_1 & "00001" & "0000000000000000", -- file: ./clock.py line: 5
1 => OP_IMM_1 & "00010" & "0000000000000000", -- file: ./clock.py line: 6
2 => OP_IMM_1 & "00011" & "0000000000000000", -- file: ./clock.py line: 7
3 => OP_IMM_1 & "00100" & "0000000000000000", -- file: ./clock.py line: 8
4 => OP_IMM_1 & "00101" & "0000000000000000", -- file: ./clock.py line: 9
5 => OP_IMM_1 & "00110" & "0000000000000000", -- file: /home/jon/streams/streams/__init__.py line: 89
6 => OP_IMM_1 & "00111" & "0000000000000000", -- file: /home/jon/streams/streams/__init__.py line: 87
7 => OP_IMM_1 & "01000" & "0000000000000000", -- file: /home/jon/streams/streams/__init__.py line: 90
8 => OP_IMM_1 & "01001" & "0000000000000000", -- file: /home/jon/streams/streams/__init__.py line: 88
9 => OP_IMM_1 & "01010" & "0000000000000000", -- file: /home/jon/streams/streams/__init__.py line: 89
10 => OP_IMM_1 & "01011" & "0000000000000000", -- file: /home/jon/streams/streams/__init__.py line: 87
11 => OP_IMM_1 & "01100" & "0000000000000000", -- file: /home/jon/streams/streams/__init__.py line: 90
12 => OP_IMM_1 & "01101" & "0000000000000000", -- file: /home/jon/streams/streams/__init__.py line: 88
13 => OP_IMM_1 & "01110" & "0000000000000000", -- file: /home/jon/streams/streams/__init__.py line: 89
14 => OP_IMM_1 & "01111" & "0000000000000000", -- file: /home/jon/streams/streams/__init__.py line: 87
15 => OP_IMM_1 & "10000" & "0000000000000000", -- file: /home/jon/streams/streams/__init__.py line: 90
16 => OP_IMM_1 & "10001" & "0000000000000000", -- file: /home/jon/streams/streams/__init__.py line: 88
17 => OP_IMM_1 & "10010" & "0000000000011000", -- file: /home/jon/streams/streams/instruction.py line: 109
18 => OP_MOVE_1 & "10011" & "0000000000000001", -- file: ./clock.py line: 5
19 => OP_GT_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 128
20 => OP_IMM_1 & "10011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
21 => OP_EQ_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 124
22 => OP_JMPF_1 & "10010" & "0000000000011001", -- file: None line: None
23 => OP_JMP_1 & "00000" & "0000000100001011", -- file: /home/jon/streams/streams/__init__.py line: 57
24 => OP_JMP_1 & "00000" & "0000000000011001", -- file: None line: None
25 => OP_IMM_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
26 => OP_MOVE_1 & "00010" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
27 => OP_IMM_1 & "10010" & "0000000000111100", -- file: /home/jon/streams/streams/instruction.py line: 109
28 => OP_MOVE_1 & "10011" & "0000000000000010", -- file: ./clock.py line: 6
29 => OP_GT_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 128
30 => OP_IMM_1 & "10011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
31 => OP_EQ_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 124
32 => OP_JMPF_1 & "10010" & "0000000000100011", -- file: None line: None
33 => OP_JMP_1 & "00000" & "0000000100000110", -- file: /home/jon/streams/streams/__init__.py line: 57
34 => OP_JMP_1 & "00000" & "0000000000100011", -- file: None line: None
35 => OP_IMM_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
36 => OP_MOVE_1 & "00011" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
37 => OP_IMM_1 & "10010" & "0000000000111100", -- file: /home/jon/streams/streams/instruction.py line: 109
38 => OP_MOVE_1 & "10011" & "0000000000000011", -- file: ./clock.py line: 7
39 => OP_GT_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 128
40 => OP_IMM_1 & "10011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
41 => OP_EQ_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 124
42 => OP_JMPF_1 & "10010" & "0000000000101101", -- file: None line: None
43 => OP_JMP_1 & "00000" & "0000000100000001", -- file: /home/jon/streams/streams/__init__.py line: 57
44 => OP_JMP_1 & "00000" & "0000000000101101", -- file: None line: None
45 => OP_IMM_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
46 => OP_MOVE_1 & "00100" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
47 => OP_IMM_1 & "10010" & "0000001111101000", -- file: /home/jon/streams/streams/instruction.py line: 109
48 => OP_MOVE_1 & "10011" & "0000000000000100", -- file: ./clock.py line: 8
49 => OP_GT_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 128
50 => OP_IMM_1 & "10011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
51 => OP_EQ_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 124
52 => OP_JMPF_1 & "10010" & "0000000000110111", -- file: None line: None
53 => OP_JMP_1 & "00000" & "0000000001001100", -- file: /home/jon/streams/streams/__init__.py line: 57
54 => OP_JMP_1 & "00000" & "0000000000110111", -- file: None line: None
55 => OP_IMM_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
56 => OP_MOVE_1 & "00101" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
57 => OP_IMM_1 & "10010" & "0000001111101000", -- file: /home/jon/streams/streams/instruction.py line: 109
58 => OP_MOVE_1 & "10011" & "0000000000000101", -- file: ./clock.py line: 9
59 => OP_GT_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 128
60 => OP_IMM_1 & "10011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
61 => OP_EQ_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 124
62 => OP_JMPF_1 & "10010" & "0000000001000001", -- file: None line: None
63 => OP_JMP_1 & "00000" & "0000000001000111", -- file: /home/jon/streams/streams/__init__.py line: 57
64 => OP_JMP_1 & "00000" & "0000000001000001", -- file: None line: None
65 => OP_WAIT_US_1 & "00000" & "0000000000000000", -- file: ./clock.py line: 29
66 => OP_MOVE_1 & "10010" & "0000000000000101", -- file: ./clock.py line: 9
67 => OP_IMM_1 & "10011" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
68 => OP_ADD_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 114
69 => OP_MOVE_1 & "00101" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
70 => OP_JMP_1 & "00000" & "0000000000111001", -- file: /home/jon/streams/streams/__init__.py line: 58
71 => OP_MOVE_1 & "10010" & "0000000000000100", -- file: ./clock.py line: 8
72 => OP_IMM_1 & "10011" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
73 => OP_ADD_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 114
74 => OP_MOVE_1 & "00100" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
75 => OP_JMP_1 & "00000" & "0000000000101111", -- file: /home/jon/streams/streams/__init__.py line: 58
76 => OP_MOVE_1 & "10010" & "0000000000000011", -- file: ./clock.py line: 7
77 => OP_IMM_1 & "10011" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
78 => OP_ADD_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 114
79 => OP_MOVE_1 & "00011" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
80 => OP_MOVE_1 & "10010" & "0000000000000001", -- file: ./clock.py line: 5
81 => OP_MOVE_1 & "00110" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
82 => OP_IMM_1 & "10010" & "0010011100010000", -- file: /home/jon/streams/streams/instruction.py line: 109
83 => OP_MOVE_1 & "00111" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
84 => OP_IMM_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
85 => OP_MOVE_1 & "01000" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
86 => OP_MOVE_1 & "10010" & "0000000000000111", -- file: /home/jon/streams/streams/__init__.py line: 87
87 => OP_IMM_1 & "10011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
88 => OP_GT_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 126
89 => OP_IMM_1 & "10011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
90 => OP_EQ_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 124
91 => OP_JMPF_1 & "10010" & "0000000001011110", -- file: None line: None
92 => OP_JMP_1 & "00000" & "0000000010000110", -- file: /home/jon/streams/streams/__init__.py line: 57
93 => OP_JMP_1 & "00000" & "0000000001011110", -- file: None line: None
94 => OP_IMM_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
95 => OP_MOVE_1 & "01001" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
96 => OP_MOVE_1 & "10010" & "0000000000000110", -- file: /home/jon/streams/streams/__init__.py line: 89
97 => OP_MOVE_1 & "10011" & "0000000000000111", -- file: /home/jon/streams/streams/__init__.py line: 87
98 => OP_GE_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 127
99 => OP_IMM_1 & "10011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
100 => OP_EQ_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 124
101 => OP_JMPF_1 & "10010" & "0000000001101000", -- file: None line: None
102 => OP_JMP_1 & "00000" & "0000000001110001", -- file: /home/jon/streams/streams/__init__.py line: 57
103 => OP_JMP_1 & "00000" & "0000000001101000", -- file: None line: None
104 => OP_MOVE_1 & "10010" & "0000000000000110", -- file: /home/jon/streams/streams/__init__.py line: 89
105 => OP_MOVE_1 & "10011" & "0000000000000111", -- file: /home/jon/streams/streams/__init__.py line: 87
106 => OP_SUB_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 115
107 => OP_MOVE_1 & "00110" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
108 => OP_MOVE_1 & "10010" & "0000000000001001", -- file: /home/jon/streams/streams/__init__.py line: 88
109 => OP_IMM_1 & "10011" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
110 => OP_ADD_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 114
111 => OP_MOVE_1 & "01001" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
112 => OP_JMP_1 & "00000" & "0000000001100000", -- file: /home/jon/streams/streams/__init__.py line: 58
113 => OP_IMM_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
114 => OP_MOVE_1 & "10011" & "0000000000000111", -- file: /home/jon/streams/streams/__init__.py line: 87
115 => OP_BOR_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 136
116 => OP_IMM_1 & "10011" & "0000000000001010", -- file: /home/jon/streams/streams/instruction.py line: 109
117 => OP_EQ_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 124
118 => OP_JMPF_1 & "10010" & "0000000001111010", -- file: None line: None
119 => OP_IMM_1 & "10010" & "1111111111111111", -- file: /home/jon/streams/streams/instruction.py line: 109
120 => OP_MOVE_1 & "01000" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
121 => OP_JMP_1 & "00000" & "0000000001111010", -- file: None line: None
122 => OP_MOVE_1 & "10010" & "0000000000001000", -- file: /home/jon/streams/streams/__init__.py line: 90
123 => OP_JMPF_1 & "10010" & "0000000010000001", -- file: None line: None
124 => OP_IMM_1 & "10010" & "0000000000110000", -- file: /home/jon/streams/streams/instruction.py line: 109
125 => OP_MOVE_1 & "10011" & "0000000000001001", -- file: /home/jon/streams/streams/__init__.py line: 88
126 => OP_BOR_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 136
127 => OP_WRITE_0_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 306
128 => OP_JMP_1 & "00000" & "0000000010000001", -- file: None line: None
129 => OP_MOVE_1 & "10010" & "0000000000000111", -- file: /home/jon/streams/streams/__init__.py line: 87
130 => OP_IMM_1 & "10011" & "0000000000001010", -- file: /home/jon/streams/streams/instruction.py line: 109
131 => OP_DIV_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 118
132 => OP_MOVE_1 & "00111" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
133 => OP_JMP_1 & "00000" & "0000000001010110", -- file: /home/jon/streams/streams/__init__.py line: 58
134 => OP_IMM_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
135 => OP_WRITE_0_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 306
136 => OP_IMM_1 & "10010" & "0000000000111010", -- file: /home/jon/streams/streams/instruction.py line: 109
137 => OP_WRITE_0_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 306
138 => OP_MOVE_1 & "10010" & "0000000000000010", -- file: ./clock.py line: 6
139 => OP_MOVE_1 & "01010" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
140 => OP_IMM_1 & "10010" & "0010011100010000", -- file: /home/jon/streams/streams/instruction.py line: 109
141 => OP_MOVE_1 & "01011" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
142 => OP_IMM_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
143 => OP_MOVE_1 & "01100" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
144 => OP_MOVE_1 & "10010" & "0000000000001011", -- file: /home/jon/streams/streams/__init__.py line: 87
145 => OP_IMM_1 & "10011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
146 => OP_GT_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 126
147 => OP_IMM_1 & "10011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
148 => OP_EQ_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 124
149 => OP_JMPF_1 & "10010" & "0000000010011000", -- file: None line: None
150 => OP_JMP_1 & "00000" & "0000000011000000", -- file: /home/jon/streams/streams/__init__.py line: 57
151 => OP_JMP_1 & "00000" & "0000000010011000", -- file: None line: None
152 => OP_IMM_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
153 => OP_MOVE_1 & "01101" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
154 => OP_MOVE_1 & "10010" & "0000000000001010", -- file: /home/jon/streams/streams/__init__.py line: 89
155 => OP_MOVE_1 & "10011" & "0000000000001011", -- file: /home/jon/streams/streams/__init__.py line: 87
156 => OP_GE_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 127
157 => OP_IMM_1 & "10011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
158 => OP_EQ_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 124
159 => OP_JMPF_1 & "10010" & "0000000010100010", -- file: None line: None
160 => OP_JMP_1 & "00000" & "0000000010101011", -- file: /home/jon/streams/streams/__init__.py line: 57
161 => OP_JMP_1 & "00000" & "0000000010100010", -- file: None line: None
162 => OP_MOVE_1 & "10010" & "0000000000001010", -- file: /home/jon/streams/streams/__init__.py line: 89
163 => OP_MOVE_1 & "10011" & "0000000000001011", -- file: /home/jon/streams/streams/__init__.py line: 87
164 => OP_SUB_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 115
165 => OP_MOVE_1 & "01010" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
166 => OP_MOVE_1 & "10010" & "0000000000001101", -- file: /home/jon/streams/streams/__init__.py line: 88
167 => OP_IMM_1 & "10011" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
168 => OP_ADD_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 114
169 => OP_MOVE_1 & "01101" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
170 => OP_JMP_1 & "00000" & "0000000010011010", -- file: /home/jon/streams/streams/__init__.py line: 58
171 => OP_IMM_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
172 => OP_MOVE_1 & "10011" & "0000000000001011", -- file: /home/jon/streams/streams/__init__.py line: 87
173 => OP_BOR_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 136
174 => OP_IMM_1 & "10011" & "0000000000001010", -- file: /home/jon/streams/streams/instruction.py line: 109
175 => OP_EQ_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 124
176 => OP_JMPF_1 & "10010" & "0000000010110100", -- file: None line: None
177 => OP_IMM_1 & "10010" & "1111111111111111", -- file: /home/jon/streams/streams/instruction.py line: 109
178 => OP_MOVE_1 & "01100" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
179 => OP_JMP_1 & "00000" & "0000000010110100", -- file: None line: None
180 => OP_MOVE_1 & "10010" & "0000000000001100", -- file: /home/jon/streams/streams/__init__.py line: 90
181 => OP_JMPF_1 & "10010" & "0000000010111011", -- file: None line: None
182 => OP_IMM_1 & "10010" & "0000000000110000", -- file: /home/jon/streams/streams/instruction.py line: 109
183 => OP_MOVE_1 & "10011" & "0000000000001101", -- file: /home/jon/streams/streams/__init__.py line: 88
184 => OP_BOR_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 136
185 => OP_WRITE_0_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 306
186 => OP_JMP_1 & "00000" & "0000000010111011", -- file: None line: None
187 => OP_MOVE_1 & "10010" & "0000000000001011", -- file: /home/jon/streams/streams/__init__.py line: 87
188 => OP_IMM_1 & "10011" & "0000000000001010", -- file: /home/jon/streams/streams/instruction.py line: 109
189 => OP_DIV_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 118
190 => OP_MOVE_1 & "01011" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
191 => OP_JMP_1 & "00000" & "0000000010010000", -- file: /home/jon/streams/streams/__init__.py line: 58
192 => OP_IMM_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
193 => OP_WRITE_0_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 306
194 => OP_IMM_1 & "10010" & "0000000000111010", -- file: /home/jon/streams/streams/instruction.py line: 109
195 => OP_WRITE_0_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 306
196 => OP_MOVE_1 & "10010" & "0000000000000011", -- file: ./clock.py line: 7
197 => OP_MOVE_1 & "01110" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
198 => OP_IMM_1 & "10010" & "0010011100010000", -- file: /home/jon/streams/streams/instruction.py line: 109
199 => OP_MOVE_1 & "01111" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
200 => OP_IMM_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
201 => OP_MOVE_1 & "10000" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
202 => OP_MOVE_1 & "10010" & "0000000000001111", -- file: /home/jon/streams/streams/__init__.py line: 87
203 => OP_IMM_1 & "10011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
204 => OP_GT_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 126
205 => OP_IMM_1 & "10011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
206 => OP_EQ_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 124
207 => OP_JMPF_1 & "10010" & "0000000011010010", -- file: None line: None
208 => OP_JMP_1 & "00000" & "0000000011111010", -- file: /home/jon/streams/streams/__init__.py line: 57
209 => OP_JMP_1 & "00000" & "0000000011010010", -- file: None line: None
210 => OP_IMM_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
211 => OP_MOVE_1 & "10001" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
212 => OP_MOVE_1 & "10010" & "0000000000001110", -- file: /home/jon/streams/streams/__init__.py line: 89
213 => OP_MOVE_1 & "10011" & "0000000000001111", -- file: /home/jon/streams/streams/__init__.py line: 87
214 => OP_GE_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 127
215 => OP_IMM_1 & "10011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
216 => OP_EQ_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 124
217 => OP_JMPF_1 & "10010" & "0000000011011100", -- file: None line: None
218 => OP_JMP_1 & "00000" & "0000000011100101", -- file: /home/jon/streams/streams/__init__.py line: 57
219 => OP_JMP_1 & "00000" & "0000000011011100", -- file: None line: None
220 => OP_MOVE_1 & "10010" & "0000000000001110", -- file: /home/jon/streams/streams/__init__.py line: 89
221 => OP_MOVE_1 & "10011" & "0000000000001111", -- file: /home/jon/streams/streams/__init__.py line: 87
222 => OP_SUB_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 115
223 => OP_MOVE_1 & "01110" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
224 => OP_MOVE_1 & "10010" & "0000000000010001", -- file: /home/jon/streams/streams/__init__.py line: 88
225 => OP_IMM_1 & "10011" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
226 => OP_ADD_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 114
227 => OP_MOVE_1 & "10001" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
228 => OP_JMP_1 & "00000" & "0000000011010100", -- file: /home/jon/streams/streams/__init__.py line: 58
229 => OP_IMM_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
230 => OP_MOVE_1 & "10011" & "0000000000001111", -- file: /home/jon/streams/streams/__init__.py line: 87
231 => OP_BOR_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 136
232 => OP_IMM_1 & "10011" & "0000000000001010", -- file: /home/jon/streams/streams/instruction.py line: 109
233 => OP_EQ_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 124
234 => OP_JMPF_1 & "10010" & "0000000011101110", -- file: None line: None
235 => OP_IMM_1 & "10010" & "1111111111111111", -- file: /home/jon/streams/streams/instruction.py line: 109
236 => OP_MOVE_1 & "10000" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
237 => OP_JMP_1 & "00000" & "0000000011101110", -- file: None line: None
238 => OP_MOVE_1 & "10010" & "0000000000010000", -- file: /home/jon/streams/streams/__init__.py line: 90
239 => OP_JMPF_1 & "10010" & "0000000011110101", -- file: None line: None
240 => OP_IMM_1 & "10010" & "0000000000110000", -- file: /home/jon/streams/streams/instruction.py line: 109
241 => OP_MOVE_1 & "10011" & "0000000000010001", -- file: /home/jon/streams/streams/__init__.py line: 88
242 => OP_BOR_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 136
243 => OP_WRITE_0_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 306
244 => OP_JMP_1 & "00000" & "0000000011110101", -- file: None line: None
245 => OP_MOVE_1 & "10010" & "0000000000001111", -- file: /home/jon/streams/streams/__init__.py line: 87
246 => OP_IMM_1 & "10011" & "0000000000001010", -- file: /home/jon/streams/streams/instruction.py line: 109
247 => OP_DIV_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 118
248 => OP_MOVE_1 & "01111" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
249 => OP_JMP_1 & "00000" & "0000000011001010", -- file: /home/jon/streams/streams/__init__.py line: 58
250 => OP_IMM_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
251 => OP_WRITE_0_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 306
252 => OP_IMM_1 & "10010" & "0000000000001101", -- file: /home/jon/streams/streams/instruction.py line: 109
253 => OP_WRITE_0_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 306
254 => OP_IMM_1 & "10010" & "0000000000001010", -- file: /home/jon/streams/streams/instruction.py line: 109
255 => OP_WRITE_0_1 & "10010" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 306
256 => OP_JMP_1 & "00000" & "0000000000100101", -- file: /home/jon/streams/streams/__init__.py line: 58
257 => OP_MOVE_1 & "10010" & "0000000000000010", -- file: ./clock.py line: 6
258 => OP_IMM_1 & "10011" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
259 => OP_ADD_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 114
260 => OP_MOVE_1 & "00010" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
261 => OP_JMP_1 & "00000" & "0000000000011011", -- file: /home/jon/streams/streams/__init__.py line: 58
262 => OP_MOVE_1 & "10010" & "0000000000000001", -- file: ./clock.py line: 5
263 => OP_IMM_1 & "10011" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
264 => OP_ADD_1 & "10010" & "0000000000010011", -- file: /home/jon/streams/streams/instruction.py line: 114
265 => OP_MOVE_1 & "00001" & "0000000000010010", -- file: /home/jon/streams/streams/instruction.py line: 264
266 => OP_JMP_1 & "00000" & "0000000000010001", -- file: /home/jon/streams/streams/__init__.py line: 58
267 => OP_JMP_1 & "00000" & "0000000000010001", -- file: ./clock.py line: 46
268 => OP_JMP_1 & "00000" & "0000000100001100", -- file: None line: None
269 => OP_JMP_1 & "00000" & "0000000000000000"); -- file: None line: None
  signal MOD_DIV_1      : std_logic;

begin

  process
  begin
    wait until rising_edge(CLK);
    TIMER_1us <= '0';
    if TIMER_1us_COUNT = 0 then
       TIMER_1us_COUNT <= TIMER_1us_MAX;
       TIMER_1us <= '1';
    else
       TIMER_1us_COUNT <= TIMER_1us_COUNT - 1;
    end if;
    if RST = '1' then
       TIMER_1us_COUNT <= TIMER_1us_MAX;
       TIMER_1us <= '0';
    end if;
  end process;



  --file: ./clock.py, line: 54
  --serial output port baud rate generator
  process
  begin
    wait until rising_edge(CLK);
    if BAUD_COUNT_3 = CLOCK_DIVIDER_3 then
      BAUD_COUNT_3 <= (others => '0');
      X16CLK_EN_3  <= '1';
    else
      BAUD_COUNT_3 <= BAUD_COUNT_3 + 1;
      X16CLK_EN_3  <= '0';
    end if;
    if RST = '1' then
      BAUD_COUNT_3 <= (others => '0');
      X16CLK_EN_3  <= '0';
    end if;
  end process;

  process
  begin
    wait until rising_edge(CLK);
    case STATE_3 is
      when IDLE =>
        if STREAM_2_STB = '1'  then
          STREAM_2_ACK <= '1';
          DATA_3 <= STREAM_2;
          STATE_3     <= WAIT_EN;
        end if;
      when WAIT_EN =>
        STREAM_2_ACK <= '0';
        if X16CLK_EN_3 = '1' then
          STATE_3 <= START;
        end if;
      when START =>
        if X16CLK_EN_3 = '1' then
          STATE_3 <= TX0;
        end if;
        TX <= '0'; 
      when TX0 =>
        if X16CLK_EN_3 = '1' then
          STATE_3 <= TX1;
        end if;
        TX <= DATA_3(0);
      when TX1 =>
        if X16CLK_EN_3 = '1' then
          STATE_3 <= TX2;
        end if;
        TX <= DATA_3(1);
      when TX2 =>
        if X16CLK_EN_3 = '1' then
          STATE_3 <= TX3;
        end if;
        TX <= DATA_3(2);
      when TX3 =>
        if X16CLK_EN_3 = '1' then
          STATE_3 <= TX4;
        end if;
        TX <= DATA_3(3);
      when TX4 =>
        if X16CLK_EN_3 = '1' then
          STATE_3 <= TX5;
        end if;
        TX <= DATA_3(4);
      when TX5 =>
        if X16CLK_EN_3 = '1' then
          STATE_3 <= TX6;
        end if;
        TX <= DATA_3(5);
      when TX6 =>
        if X16CLK_EN_3 = '1' then
          STATE_3 <= TX7;
        end if;
        TX <= DATA_3(6);
      when TX7 =>
        if X16CLK_EN_3 = '1' then
          STATE_3 <= STOP;
        end if;
        TX <= DATA_3(7);
      when STOP =>
        if X16CLK_EN_3 = '1' then
          STATE_3 <= IDLE;
        end if;
        TX <= '1';
      when others =>
        STATE_3 <= IDLE;
      end case;
    if RST = '1' then
      STREAM_2_ACK <= '0';
      STATE_3 <= IDLE;
    end if; 
  end process;
  --file: ./clock.py, line: 54
  --stream 2 Resizer(0, 8)
  STREAM_0_ACK <= STREAM_2_ACK;
  STREAM_2_STB <= STREAM_0_STB;
  STREAM_2 <= STREAM_0(7 downto 0);

  -- process
  process
    variable INSTRUCTION : std_logic_vector(25 downto 0);
  begin
    wait until rising_edge(CLK);
    INSTRUCTION := INSTRUCTIONS_1(to_integer(PC_1));
    OPERATION_1 <= INSTRUCTION(25 downto 21);
    SRCA_1      <= INSTRUCTION(20 downto 16);
    SRCB_1      <= INSTRUCTION(4 downto 0);
    IMMEDIATE_1 <= INSTRUCTION(15 downto 0);
  end process;

  process
    variable REGA    : std_logic_vector(15 downto 0);
    variable REGB    : std_logic_vector(15 downto 0);
    variable DEST    : integer range 0 to 19;
    variable RESULT  : std_logic_vector(15 downto 0);
    variable MODULO  : unsigned(15 downto 0);
    variable FLAG_EQ : std_logic;
    variable FLAG_NE : std_logic;
    variable FLAG_GT : std_logic;
    variable FLAG_GE : std_logic;
  begin
    wait until rising_edge(CLK);
    case STATE_1 is
      when STALL =>
        PC_1 <= PC_1 + 1;
        STATE_1 <= EXECUTE;
      when EXECUTE =>
        PC_1 <= PC_1 + 1;

        --FETCH_OPERANDS
        case OPERATION_1 is
          when OP_MOVE_1 => 
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_MUL_1  => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_ADD_1  => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_SUB_1  => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_BAND_1 => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_BOR_1  => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_BXOR_1 => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_SL_1   => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_SR_1   => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_EQ_1   => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_NE_1   => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_GT_1   => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_GE_1   => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_IMM_1  => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
          when OP_DIV_1 =>
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_MOD_1 =>
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_WRITE_0_1 =>
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
          when others => null;
        end case;

        --share comparator logic
        if REGA = REGB then
          FLAG_EQ := '1';
        else
          FLAG_EQ := '0';
        end if;

        if signed(REGA) > signed(REGB) then
          FLAG_GT := '1';
        else
          FLAG_GT := '0';
        end if;

        FLAG_NE := not FLAG_EQ;
        FLAG_GE := FLAG_GT or FLAG_EQ;

        --execute instructions
        case OPERATION_1 is
          when OP_MOVE_1 => 
            RESULT := REGB;
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_MUL_1  => 
            RESULT := STD_RESIZE( MUL(REGA, REGB), 16);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_ADD_1  => 
            RESULT := STD_RESIZE( ADD(REGA, REGB), 16);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_SUB_1  => 
            RESULT := STD_RESIZE( SUB(REGA, REGB), 16);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_BAND_1 => 
            RESULT := STD_RESIZE(BAND(REGA, REGB), 16);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_BOR_1  => 
            RESULT := STD_RESIZE( BOR(REGA, REGB), 16);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_BXOR_1 => 
            RESULT := STD_RESIZE(BXOR(REGA, REGB), 16);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_SL_1   => 
            RESULT := STD_RESIZE(  SL(REGA, REGB), 16);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_SR_1   => 
            RESULT := STD_RESIZE(  SR(REGA, REGB), 16);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_EQ_1   => 
            RESULT := (others => FLAG_EQ);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_NE_1   => 
            RESULT := (others => FLAG_NE);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_GT_1   => 
            RESULT := (others => FLAG_GT);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_GE_1   => 
            RESULT := (others => FLAG_GE);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_IMM_1  => 
            RESULT := IMMEDIATE_1;
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_JMP_1 =>
            STATE_1 <= STALL;
            PC_1 <= resize(unsigned(IMMEDIATE_1), 9);
          when OP_JMPF_1 =>
            if ZERO_1 = '1' then
              STATE_1 <= STALL;
              PC_1 <= resize(unsigned(IMMEDIATE_1), 9);
            end if;
          when OP_WAIT_US_1 =>
            STATE_1 <= WAIT_US;
            PC_1 <= PC_1;
          when OP_DIV_1 =>
            MOD_DIV_1 <= '1';
            A_1 <= std_logic_vector(abs(signed(REGA)));
            B_1 <= std_logic_vector(abs(signed(REGB)));
            SIGN_1 <= REGA(15) xor REGB(15);
            DEST := to_integer(unsigned(SRCA_1));
            STATE_1 <= DIVIDE_0;
            PC_1 <= PC_1;
          when OP_MOD_1 =>
            MOD_DIV_1 <= '0';
            A_1 <= std_logic_vector(abs(signed(REGA)));
            B_1 <= std_logic_vector(abs(signed(REGB)));
            SIGN_1 <= REGA(15);
            DEST := to_integer(unsigned(SRCA_1));
            STATE_1 <= DIVIDE_0;
            PC_1 <= PC_1;
          when OP_WRITE_0_1 =>
            STATE_1 <= WRITE_STREAM_0;
            PC_1 <= PC_1;

          when others => null;
        end case;

        --write back results
        if RESULT = "0000000000000000" then
          ZERO_1 <= '1';
        else
          ZERO_1 <= '0';
        end if;

      when DIVIDE_0 =>
        QUOTIENT_1 <= (others => '0');
        SHIFTER_1 <= (others => '0');
        SHIFTER_1(0) <= A_1(15);
        A_1 <= A_1(14 downto 0) & '0';
        COUNT_1 <= 15;
        STATE_1 <= DIVIDE_1;

      when DIVIDE_1 => --subtract
       --if SHIFTER - B is positive or zero
       if REMAINDER_1(15) = '0' then
         SHIFTER_1(15 downto 1) <= REMAINDER_1(14 downto 0);
       else
         SHIFTER_1(15 downto 1) <= SHIFTER_1(14 downto 0);
       end if;
       SHIFTER_1(0) <= A_1(15);
       A_1 <= A_1(14 downto 0) & '0';
       QUOTIENT_1 <= QUOTIENT_1(14 downto 0) & not(REMAINDER_1(15));
       if COUNT_1 = 0 then
         STATE_1 <= DIVIDE_2;
       else
         COUNT_1 <= COUNT_1 - 1;
       end if;

     when DIVIDE_2 =>
      if MOD_DIV_1 = '1' then --if division
        if SIGN_1 = '1' then --if negative
          REGISTERS_1(DEST) <= std_logic_vector(-signed(QUOTIENT_1));
        else
          REGISTERS_1(DEST) <= QUOTIENT_1;
        end if;
      else
        MODULO := unsigned(SHIFTER_1)/2;
        if SIGN_1 = '1' then --if negative
          REGISTERS_1(DEST) <= std_logic_vector(0-MODULO);
        else
          REGISTERS_1(DEST) <= std_logic_vector(  MODULO);
        end if;
      end if;
      STATE_1 <= EXECUTE;
      PC_1 <= PC_1 + 1;

      when WRITE_STREAM_0 =>
        STREAM_0_STB <= '1';
        STREAM_0 <= STD_RESIZE(REGA, 16);
        if STREAM_0_ACK = '1' then
          STREAM_0_STB <= '0';
          STATE_1 <= EXECUTE;
          PC_1 <= PC_1 + 1;
        end if;
      when WAIT_US =>
        if TIMER_1uS = '1'then
          PC_1 <= PC_1 + 1;
          STATE_1 <= EXECUTE;
        end if;
    end case;

    if RST = '1' then
      STATE_1 <= STALL;
      PC_1 <= "000000000";
      STREAM_0_STB <= '0';
    end if;
  end process;


  --subtractor
  REMAINDER_1 <= std_logic_vector(unsigned(SHIFTER_1) - resize(unsigned(B_1), 16));

end architecture RTL;