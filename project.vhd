-- generated by python streams library
-- date generated  : UTC 2010-10-23 09:12:44
-- platform        : linux2
-- python version  : 2.6.5 (r265:79063, Apr 16 2010, 13:57:41) 
--                   [GCC 4.4.3]
-- streams version : 0.1

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity STREAMS_VHDL_MODEL is

end entity STREAMS_VHDL_MODEL;

architecture RTL of STREAMS_VHDL_MODEL is


  --returns the greater of the two parameters
  function MAX(
    A : integer;
    B : integer) return integer is
  begin
    if A > B then
      return A;
    else
      return B;
    end if;
  end MAX;

  --returns a std_logic_vector sum of the two parameters
  function ADD(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'length, B'length) + 1) + 
      resize(signed(B), MAX(A'length, B'length) + 1));
    end ADD;

  --returns a std_logic_vector product of the two parameters
  function MUL(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      signed(A) *
      signed(B));
    end MUL;

  --returns a std_logic_vector difference of the two parameters
  function SUB(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'length, B'length) + 1) - 
      resize(signed(B), MAX(A'length, B'length) + 1));
  end SUB;

  --returns A shifted right (arithmetic) by A
  function SR(
    A  : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(shift_right(signed(A), to_integer(signed(B))));
  end SR;

  --returns A shifted left by B
  function SL(
    A  : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
        shift_left(
           resize(signed(A), A'length + (2**(B'length-1))-1),
           to_integer(signed(B))
       )
   );
  end SL;

  --returns bitwise and of A and B
  --(A and B are resized to the length of the larger first)
  function BAND(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) and
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BAND;

  --returns bitwise or of A and B
  --(A and B are resized to the length of the larger first)
  function BOR(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) or
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BOR;

  --returns bitwise xor of A and B
  --(A and B are resized to the length of the larger first)
  function BXOR(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) xor
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BXOR;

  --equality comparison of A and B
  --(A and B are resized to the length of the larger first)
  function EQ(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) =
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end EQ;

  --inequality comparison of A and B
  --(A and B are resized to the length of the larger first)
  function NE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
    resize(signed(A), MAX(A'LENGTH, B'LENGTH)) /=
    resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end NE;

  --greater than comparison of A and B
  --(A and B are resized to the length of the larger first)
  function GT(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) >
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end GT;

  --greater than or equal comparison of A and B
  --(A and B are resized to the length of the larger first)
  function GE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) >=
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end GE;

  --less than comparison of A and B
  --(A and B are resized to the length of the larger first)
  function LT(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) <
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end LT;

  --less than or equal comparison of A and B
  --(A and B are resized to the length of the larger first)
  function LE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) <=
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end LE;

  --resize A to B bits
  function STD_RESIZE(
    A : std_logic_vector; 
    B : integer) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), B));
  end STD_RESIZE;

  --print a value
  procedure PRINT(
    A : std_logic_vector) is
    variable output_line : line;
  begin
    write(output_line, to_integer(signed(A)));
    writeline(output, output_line);
  end PRINT;

  type BINARY_STATE_TYPE is (BINARY_INPUT, BINARY_OUTPUT);
  type UNARY_STATE_TYPE is (UNARY_INPUT, UNARY_OUTPUT);
  type TEE_STATE_TYPE is (TEE_INPUT_A, TEE_WAIT_YZ, TEE_WAIT_Y, TEE_WAIT_Z);
  type DIVIDER_STATE_TYPE is (READ_A_B, DIVIDE_1, DIVIDE_2, WRITE_Z);
  type SERIAL_IN_STATE_TYPE is (IDLE, START, RX0, RX1, RX2, RX3, RX4, RX5, RX6, RX7, STOP, OUTPUT_DATA);
  type SERIAL_OUT_STATE_TYPE is (IDLE, START, WAIT_EN, TX0, TX1, TX2, TX3, TX4, TX5, TX6, TX7, STOP);
  type FORMATER_STATE_TYPE is (INPUT_A, SHIFT, OUTPUT_SIGN, OUTPUT_Z);
  type HEX_FORMATER_STATE_TYPE is (INPUT_A, OUTPUT_SIGN, OUTPUT_DIGITS);

  signal CLK : std_logic;
  signal RST : std_logic;
  signal STATE_3      : BINARY_STATE_TYPE;
  signal STREAM_3     : std_logic_vector(0 downto 0);
  signal STREAM_3_STB : std_logic;
  signal STREAM_3_ACK : std_logic;

  signal STREAM_2     : std_logic_vector(0 downto 0);
  signal STREAM_2_STB : std_logic;
  signal STREAM_2_ACK : std_logic;

  signal STREAM_0       : std_logic_vector(7 downto 0);
  signal STREAM_0_STB   : std_logic;
  signal STREAM_0_ACK   : std_logic;
  constant OP_ADD_1 : std_logic_vector(4 downto 0) := "00000";
  constant OP_SUB_1 : std_logic_vector(4 downto 0) := "00001";
  constant OP_MUL_1 : std_logic_vector(4 downto 0) := "00010";
  constant OP_DIV_1 : std_logic_vector(4 downto 0) := "00011";
  constant OP_BAND_1 : std_logic_vector(4 downto 0) := "00100";
  constant OP_BOR_1 : std_logic_vector(4 downto 0) := "00101";
  constant OP_BXOR_1 : std_logic_vector(4 downto 0) := "00110";
  constant OP_SL_1 : std_logic_vector(4 downto 0) := "00111";
  constant OP_SR_1 : std_logic_vector(4 downto 0) := "01000";
  constant OP_EQ_1 : std_logic_vector(4 downto 0) := "01001";
  constant OP_NE_1 : std_logic_vector(4 downto 0) := "01010";
  constant OP_GT_1 : std_logic_vector(4 downto 0) := "01011";
  constant OP_GE_1 : std_logic_vector(4 downto 0) := "01100";
  constant OP_JMP_1 : std_logic_vector(4 downto 0) := "01101";
  constant OP_JMPF_1 : std_logic_vector(4 downto 0) := "01110";
  constant OP_IMM_1 : std_logic_vector(4 downto 0) := "01111";
  constant OP_MOVE_1 : std_logic_vector(4 downto 0) := "10000";
  constant WAIT_1 : std_logic_vector(4 downto 0) := "10001";
  constant OP_MOD_1 : std_logic_vector(4 downto 0) := "10010";
  constant OP_WRITE_0_1 : std_logic_vector(4 downto 0) := "10011";
  type PROCESS_1_STATE_TYPE is (STALL, EXECUTE, DIVIDE_0, DIVIDE_1, DIVIDE_2, WRITE_STREAM_0);
  type INSTRUCTIONS_TYPE_1  is array (0 to 3) of std_logic_vector(13 downto 0);
  type REGISTERS_TYPE_1     is array (0 to 1) of std_logic_vector(7 downto 0);
  signal STATE_1        : PROCESS_1_STATE_TYPE;
  signal REGISTERS_1    : REGISTERS_TYPE_1;
  signal PC_1           : unsigned(1 downto 0);
  signal OPERATION_1    : std_logic_vector(4 downto 0);
  signal SRCA_1         : std_logic_vector(0 downto 0);
  signal SRCB_1         : std_logic_vector(0 downto 0);
  signal IMMEDIATE_1    : std_logic_vector(7 downto 0);
  signal ZERO_1         : std_logic;
  signal A_1            : std_logic_vector(7 downto 0);
  signal B_1            : std_logic_vector(7 downto 0);
  signal QUOTIENT_1     : std_logic_vector(7 downto 0);
  signal SHIFTER_1      : std_logic_vector(7 downto 0);
  signal REMAINDER_1    : std_logic_vector(7 downto 0);
  signal COUNT_1        : integer range 0 to 8;
  signal SIGN_1         : std_logic;
  signal INSTRUCTIONS_1 : INSTRUCTIONS_TYPE_1 := (
0 => OP_IMM_1 & "1" & "00000000", -- file: /home/jon/streams/streams/instruction.py line: 109
1 => OP_WRITE_0_1 & "1" & "00000000", -- file: /home/jon/streams/streams/streams.py line: 306
2 => OP_JMP_1 & "0" & "00000010", -- file: None line: None
3 => OP_JMP_1 & "0" & "00000000"); -- file: None line: None
  signal MOD_DIV_1      : std_logic;

begin

  --internal clock generator
  process
  begin
    while True loop
      CLK <= '0';
      wait for 5 ns;
      CLK <= '1';
      wait for 5 ns;
    end loop;
    wait;
  end process;

  --internal reset generator
  process
  begin
    RST <= '1';
    wait for 20 ns;
    RST <= '0';
    wait;
  end process;

  --file: ./sizebug.py, line: 12
  --Asserter(3)
  process
  begin
    wait until rising_edge(CLK);
    STREAM_3_ACK <= '0';
    if STREAM_3_STB = '1' and STREAM_3_ACK = '0' then
      assert(STREAM_3 /= "0") severity failure;
      STREAM_3_ACK <= '1';
    end if;
  end process;

  --file: /home/jon/streams/streams/streams.py, line: 109
  --STREAM 3 Binary(0, 2, 'eq')
  process
  begin
    wait until rising_edge(CLK);
    case STATE_3 is
      when BINARY_INPUT =>
        if STREAM_0_STB = '1' and STREAM_2_STB = '1' then
          STREAM_0_ACK <= '1'; STREAM_2_ACK <= '1';
          STREAM_3 <= EQ(  STREAM_0, STREAM_2);
          STREAM_3_STB <= '1';
          STATE_3 <= BINARY_OUTPUT;
        end if;
      when BINARY_OUTPUT =>
        STREAM_0_ACK <= '0'; STREAM_2_ACK <= '0';
        if STREAM_3_ACK = '1' then
           STREAM_3_STB <= '0';
           STATE_3 <= BINARY_INPUT;
        end if;
     end case;
     if RST = '1' then
       STREAM_3_STB <= '0';
       STREAM_0_ACK <= '0';
       STREAM_2_ACK <= '0';
       STATE_3 <= BINARY_INPUT;
     end if;
  end process;

  --file: ./sizebug.py, line: 12
  --STREAM 2 Repeater(0, 1)
  STREAM_2 <= "0";
  process
  begin
    wait until rising_edge(CLK);
    STREAM_2_STB <= not STREAM_2_ACK;
  end process;

  -- process
  process
    variable INSTRUCTION : std_logic_vector(13 downto 0);
  begin
    wait until rising_edge(CLK);
    INSTRUCTION := INSTRUCTIONS_1(to_integer(PC_1));
    OPERATION_1 <= INSTRUCTION(13 downto 9);
    SRCA_1      <= INSTRUCTION(8 downto 8);
    SRCB_1      <= INSTRUCTION(0 downto 0);
    IMMEDIATE_1 <= INSTRUCTION(7 downto 0);
  end process;

  process
    variable REGA    : std_logic_vector(7 downto 0);
    variable REGB    : std_logic_vector(7 downto 0);
    variable DEST    : integer range 0 to 1;
    variable RESULT  : std_logic_vector(7 downto 0);
    variable MODULO  : unsigned(7 downto 0);
    variable FLAG_EQ : std_logic;
    variable FLAG_NE : std_logic;
    variable FLAG_GT : std_logic;
    variable FLAG_GE : std_logic;
  begin
    wait until rising_edge(CLK);
    case STATE_1 is
      when STALL =>
        PC_1 <= PC_1 + 1;
        STATE_1 <= EXECUTE;
      when EXECUTE =>
        PC_1 <= PC_1 + 1;

        --FETCH_OPERANDS
        case OPERATION_1 is
          when OP_MOVE_1 => 
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_MUL_1  => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_ADD_1  => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_SUB_1  => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_BAND_1 => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_BOR_1  => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_BXOR_1 => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_SL_1   => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_SR_1   => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_EQ_1   => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_NE_1   => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_GT_1   => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_GE_1   => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_IMM_1  => 
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
          when OP_DIV_1 =>
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_MOD_1 =>
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
            REGB := REGISTERS_1(to_integer(unsigned(SRCB_1)));
          when OP_WRITE_0_1 =>
            REGA := REGISTERS_1(to_integer(unsigned(SRCA_1)));
          when others => null;
        end case;

        --share comparator logic
        if REGA = REGB then
          FLAG_EQ := '1';
        else
          FLAG_EQ := '0';
        end if;

        if signed(REGA) > signed(REGB) then
          FLAG_GT := '1';
        else
          FLAG_GT := '0';
        end if;

        FLAG_NE := not FLAG_EQ;
        FLAG_GE := FLAG_GT or FLAG_EQ;

        --execute instructions
        case OPERATION_1 is
          when OP_MOVE_1 => 
            RESULT := REGB;
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_MUL_1  => 
            RESULT := STD_RESIZE( MUL(REGA, REGB), 8);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_ADD_1  => 
            RESULT := STD_RESIZE( ADD(REGA, REGB), 8);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_SUB_1  => 
            RESULT := STD_RESIZE( SUB(REGA, REGB), 8);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_BAND_1 => 
            RESULT := STD_RESIZE(BAND(REGA, REGB), 8);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_BOR_1  => 
            RESULT := STD_RESIZE( BOR(REGA, REGB), 8);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_BXOR_1 => 
            RESULT := STD_RESIZE(BXOR(REGA, REGB), 8);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_SL_1   => 
            RESULT := STD_RESIZE(  SL(REGA, REGB), 8);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_SR_1   => 
            RESULT := STD_RESIZE(  SR(REGA, REGB), 8);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_EQ_1   => 
            RESULT := (others => FLAG_EQ);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_NE_1   => 
            RESULT := (others => FLAG_NE);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_GT_1   => 
            RESULT := (others => FLAG_GT);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_GE_1   => 
            RESULT := (others => FLAG_GE);
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_IMM_1  => 
            RESULT := IMMEDIATE_1;
            REGISTERS_1(to_integer(unsigned(SRCA_1))) <= RESULT;
          when OP_DIV_1 =>
            MOD_DIV_1 <= '1';
            A_1 <= std_logic_vector(abs(signed(REGA)));
            B_1 <= std_logic_vector(abs(signed(REGB)));
            SIGN_1 <= REGA(7) xor REGB(7);
            DEST := to_integer(unsigned(SRCA_1));
            STATE_1 <= DIVIDE_0;
            PC_1 <= PC_1;
          when OP_MOD_1 =>
            MOD_DIV_1 <= '0';
            A_1 <= std_logic_vector(abs(signed(REGA)));
            B_1 <= std_logic_vector(abs(signed(REGB)));
            SIGN_1 <= REGA(7);
            DEST := to_integer(unsigned(SRCA_1));
            STATE_1 <= DIVIDE_0;
            PC_1 <= PC_1;
          when OP_JMP_1 =>
            STATE_1 <= STALL;
            PC_1 <= resize(unsigned(IMMEDIATE_1), 2);
          when OP_JMPF_1 =>
            if ZERO_1 = '1' then
              STATE_1 <= STALL;
              PC_1 <= resize(unsigned(IMMEDIATE_1), 2);
            end if;
          when OP_WRITE_0_1 =>
            STATE_1 <= WRITE_STREAM_0;
            PC_1 <= PC_1;


          when others => null;
        end case;

        --write back results
        if RESULT = "00000000" then
          ZERO_1 <= '1';
        else
          ZERO_1 <= '0';
        end if;

      when WRITE_STREAM_0 =>
        STREAM_0_STB <= '1';
        STREAM_0 <= STD_RESIZE(REGA, 8);
        if STREAM_0_ACK = '1' then
          STREAM_0_STB <= '0';
          STATE_1 <= EXECUTE;
          PC_1 <= PC_1 + 1;
        end if;

      when DIVIDE_0 =>
        QUOTIENT_1 <= (others => '0');
        SHIFTER_1 <= (others => '0');
        SHIFTER_1(0) <= A_1(7);
        A_1 <= A_1(6 downto 0) & '0';
        COUNT_1 <= 7;
        STATE_1 <= DIVIDE_1;

      when DIVIDE_1 => --subtract
       --if SHIFTER - B is positive or zero
       if REMAINDER_1(7) = '0' then
         SHIFTER_1(7 downto 1) <= REMAINDER_1(6 downto 0);
       else
         SHIFTER_1(7 downto 1) <= SHIFTER_1(6 downto 0);
       end if;
       SHIFTER_1(0) <= A_1(7);
       A_1 <= A_1(6 downto 0) & '0';
       QUOTIENT_1 <= QUOTIENT_1(6 downto 0) & not(REMAINDER_1(7));
       if COUNT_1 = 0 then
         STATE_1 <= DIVIDE_2;
       else
         COUNT_1 <= COUNT_1 - 1;
       end if;

     when DIVIDE_2 =>
      if MOD_DIV_1 = '1' then --if division
        if SIGN_1 = '1' then --if negative
          REGISTERS_1(DEST) <= std_logic_vector(-signed(QUOTIENT_1));
        else
          REGISTERS_1(DEST) <= QUOTIENT_1;
        end if;
      else
        MODULO := unsigned(SHIFTER_1)/2;
        if SIGN_1 = '1' then --if negative
          REGISTERS_1(DEST) <= std_logic_vector(0-MODULO);
        else
          REGISTERS_1(DEST) <= std_logic_vector(  MODULO);
        end if;
      end if;
      STATE_1 <= EXECUTE;
      PC_1 <= PC_1 + 1;
    end case;

    if RST = '1' then
      STATE_1 <= STALL;
      PC_1 <= "00";
      STREAM_0_STB <= '0';
    end if;
  end process;

  --subtractor
  REMAINDER_1 <= std_logic_vector(unsigned(SHIFTER_1) - resize(unsigned(B_1), 8));


end architecture RTL;