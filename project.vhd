-- generated by python streams library
-- date generated  : UTC 2010-11-08 20:05:16
-- platform        : linux2
-- python version  : 2.6.6 (r266:84292, Sep 15 2010, 16:22:56) 
--                   [GCC 4.4.5]
-- streams version : 0.1


--  ****************************************************************************
--  Filename         :
--  Project          :
--  Version          :0.1
--  Author           :Jonathan P Dawson
--  Created Date     :2005-12-18
--  ****************************************************************************
--  Description      :A RAM based on Xilinx block RAMs
--  ****************************************************************************
--  Dependencies     :Standard Libraries
--  ****************************************************************************
--  Revision History :
--  
--  Date :2005-12-18
--  Author :Jonathan P Dawson
--  Modification: Created File
--  
--  ****************************************************************************
--  Copyright (C) Jonathan P Dawson 2005
--  ****************************************************************************
 library ieee;
 use ieee.std_logic_1164.all;
 use ieee.numeric_std.all;

 entity RAMARRAY is
    generic(
        DEPTH : integer;
        WIDTH : integer
    );
    port(
        CLK             : in  std_logic;
        RST             : in  std_logic;
        ADDRESS_IN      : in  std_logic_vector;
        ADDRESS_IN_STB  : in  std_logic;
        ADDRESS_IN_ACK  : out std_logic;
        DATA_IN         : in  std_logic_vector;
        DATA_IN_STB     : in  std_logic;
        DATA_IN_ACK     : out std_logic;
        ADDRESS_OUT     : in  std_logic_vector;
        ADDRESS_OUT_STB : in  std_logic;
        ADDRESS_OUT_ACK : out std_logic;
        DATA_OUT        : out std_logic_vector;
        DATA_OUT_STB    : out std_logic;
        DATA_OUT_ACK    : in  std_logic
    );
  end entity RAMARRAY;

  architecture RTL of RAMARRAY is

    type MEMORY_TYPE is array (0 to DEPTH-1) of std_logic_vector(WIDTH-1 downto 0);
    shared variable MEMORY : MEMORY_TYPE;

    type IN_STATE_TYPE is (READ_IN_ADDRESS, ACK_IN_ADDRESS, READ_IN_DATA, ACK_IN_DATA);
    signal IN_STATE : IN_STATE_TYPE;

    type OUT_STATE_TYPE is (READ_OUT_ADDRESS, ACK_OUT_ADDRESS, WRITE_OUT_DATA);
    signal OUT_STATE : OUT_STATE_TYPE;

  begin

     process
      variable ADDRESS : integer range 0 to DEPTH-1;
    begin
      wait until rising_edge(CLK);
      case IN_STATE is

        when READ_IN_ADDRESS =>
           if ADDRESS_IN_STB = '1' then
               ADDRESS := to_integer(unsigned(ADDRESS_IN));
               ADDRESS_IN_ACK <= '1';
               IN_STATE <= ACK_IN_ADDRESS;
           end if;

        when ACK_IN_ADDRESS =>
           ADDRESS_IN_ACK <= '0';
           IN_STATE <= READ_IN_DATA;

        when READ_IN_DATA =>
           if DATA_IN_STB = '1' then
               MEMORY(ADDRESS) := DATA_IN;
               DATA_IN_ACK <= '1';
               IN_STATE <= ACK_IN_DATA;
           end if;

        when ACK_IN_DATA =>
           DATA_IN_ACK <= '0';
           IN_STATE <= READ_IN_ADDRESS;

        when others => IN_STATE <= READ_IN_ADDRESS;

      end case;
      if RST = '1' then
        DATA_IN_ACK <= '0';
        ADDRESS_IN_ACK <= '0';
        IN_STATE <= READ_IN_ADDRESS;
      end if;
    end process;

    process
       variable ADDRESS : integer range 0 to DEPTH-1;
    begin
      wait until rising_edge(CLK);
      case OUT_STATE is

        when READ_OUT_ADDRESS =>
           if ADDRESS_OUT_STB = '1' then
             ADDRESS := to_integer(unsigned(ADDRESS_OUT));
             ADDRESS_OUT_ACK <= '1';
             OUT_STATE <= ACK_OUT_ADDRESS;
           end if;

        when ACK_OUT_ADDRESS =>
           ADDRESS_OUT_ACK <= '0';
           OUT_STATE <= WRITE_OUT_DATA;

        when WRITE_OUT_DATA =>
           DATA_OUT <= MEMORY(ADDRESS);
           DATA_OUT_STB <= '1';
           if DATA_OUT_ACK = '1' then
             DATA_OUT_STB <= '0';
             OUT_STATE <= READ_OUT_ADDRESS;
           end if;

        when others => OUT_STATE <= READ_OUT_ADDRESS;

      end case;
      if RST = '1' then
        DATA_OUT_STB <= '0';
        ADDRESS_OUT_ACK <= '0';
        OUT_STATE <= READ_OUT_ADDRESS;
      end if;
  end process;

end RTL;
--  ****************************************************************************
--  End of RAM
--  ****************************************************************************
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity STREAMS_VHDL_MODEL is
  port(
    CLK           : in  std_logic;
    RST           : in  std_logic;
    TX : out std_logic;
    RX : in std_logic
  );
end entity STREAMS_VHDL_MODEL;

architecture RTL of STREAMS_VHDL_MODEL is


  --returns the greater of the two parameters
  function MAX(
    A : integer;
    B : integer) return integer is
  begin
    if A > B then
      return A;
    else
      return B;
    end if;
  end MAX;

  --returns a std_logic_vector sum of the two parameters
  function ADD(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'length, B'length) + 1) + 
      resize(signed(B), MAX(A'length, B'length) + 1));
    end ADD;

  --returns a std_logic_vector product of the two parameters
  function MUL(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      signed(A) *
      signed(B));
    end MUL;

  --returns a std_logic_vector difference of the two parameters
  function SUB(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'length, B'length) + 1) - 
      resize(signed(B), MAX(A'length, B'length) + 1));
  end SUB;

  --returns A shifted right (arithmetic) by A
  function SR(
    A  : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(shift_right(signed(A), to_integer(signed(B))));
  end SR;

  --returns A shifted left by B
  function SL(
    A  : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(shift_left(signed(A), to_integer(signed(B))));
  end SL;

  --returns bitwise and of A and B
  --(A and B are resized to the length of the larger first)
  function BAND(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) and
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BAND;

  --returns bitwise or of A and B
  --(A and B are resized to the length of the larger first)
  function BOR(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) or
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BOR;

  --returns bitwise xor of A and B
  --(A and B are resized to the length of the larger first)
  function BXOR(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) xor
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BXOR;

  --equality comparison of A and B
  --(A and B are resized to the length of the larger first)
  function EQ(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) =
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end EQ;

  --inequality comparison of A and B
  --(A and B are resized to the length of the larger first)
  function NE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
    resize(signed(A), MAX(A'LENGTH, B'LENGTH)) /=
    resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end NE;

  --greater than comparison of A and B
  --(A and B are resized to the length of the larger first)
  function GT(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) >
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end GT;

  --greater than or equal comparison of A and B
  --(A and B are resized to the length of the larger first)
  function GE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) >=
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end GE;

  --less than comparison of A and B
  --(A and B are resized to the length of the larger first)
  function LT(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) <
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end LT;

  --less than or equal comparison of A and B
  --(A and B are resized to the length of the larger first)
  function LE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) <=
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end LE;

  --resize A to B bits
  function STD_RESIZE(
    A : std_logic_vector; 
    B : integer) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), B));
  end STD_RESIZE;

  type BINARY_STATE_TYPE is (BINARY_INPUT, BINARY_OUTPUT);
  type UNARY_STATE_TYPE is (UNARY_INPUT, UNARY_OUTPUT);
  type TEE_STATE_TYPE is (TEE_INPUT_A, TEE_WAIT_YZ, TEE_WAIT_Y, TEE_WAIT_Z);
  type DIVIDER_STATE_TYPE is (READ_A_B, DIVIDE_1, DIVIDE_2, WRITE_Z);
  type SERIAL_IN_STATE_TYPE is (IDLE, START, RX0, RX1, RX2, RX3, RX4, RX5, RX6, RX7, STOP, OUTPUT_DATA);
  type SERIAL_OUT_STATE_TYPE is (IDLE, START, WAIT_EN, TX0, TX1, TX2, TX3, TX4, TX5, TX6, TX7, STOP);
  type PRINTER_STATE_TYPE is (INPUT_A, SHIFT, OUTPUT_SIGN, OUTPUT_Z, OUTPUT_NL);
  type HEX_PRINTER_STATE_TYPE is (INPUT_A, OUTPUT_SIGN, OUTPUT_DIGITS);

  constant TIMER_1us_MAX : integer := 49;
  signal TIMER_1us_COUNT : integer range 0 to TIMER_1us_MAX;
  signal TIMER_1us : std_logic;



  signal STATE_10           : SERIAL_OUT_STATE_TYPE;
  constant CLOCK_DIVIDER_10 : Unsigned(11 downto 0) := To_unsigned(108, 12);
  signal BAUD_COUNT_10      : Unsigned(11 downto 0);
  signal DATA_10            : std_logic_vector(7 downto 0);
  signal X16CLK_EN_10       : std_logic;
  --file: ./example_7_edge_detect.py, line: 171
  --STREAM 9 Printer(3)
  signal STREAM_9     : std_logic_vector(7 downto 0);
  signal STREAM_9_STB : std_logic;
  signal STREAM_9_ACK : std_logic;
  signal SIGN_9       : std_logic;
  signal STATE_9      : PRINTER_STATE_TYPE;
  type SHIFTER_9_TYPE is array (0 to 3) of std_logic_vector(3 downto 0);
  signal BINARY_9     : std_logic_vector(12 downto 0);
  signal SHIFTER_9    : SHIFTER_9_TYPE;
  signal COUNT_9      : integer range 0 to 12;
  signal CURSOR_9     : integer range 0 to 3;

  signal STATE_0           : SERIAL_IN_STATE_TYPE;
  signal STREAM_0          : std_logic_vector(7 downto 0);
  signal STREAM_0_STB      : std_logic;
  signal STREAM_0_ACK      : std_logic;
  signal COUNT_0           : integer Range 0 to 3;
  signal BIT_SPACING_0     : integer Range 0 to 15;
  signal INT_SERIAL_0      : std_logic;
  signal SERIAL_DEGLITCH_0 : std_logic_Vector(1 downto 0);
  constant CLOCK_DIVIDER_0 : unsigned(11 downto 0) := To_unsigned(6, 12);
  signal BAUD_COUNT_0      : unsigned(11 downto 0);
  signal X16CLK_EN_0       : std_logic;
  component RAMARRAY is
    generic(
        DEPTH : integer;
        WIDTH : integer
    );
    port(
        CLK             : in  std_logic;
        RST             : in  std_logic;
        ADDRESS_IN      : in  std_logic_vector;
        ADDRESS_IN_STB  : in  std_logic;
        ADDRESS_IN_ACK  : out std_logic;
        DATA_IN         : in  std_logic_vector;
        DATA_IN_STB     : in  std_logic;
        DATA_IN_ACK     : out std_logic;
        ADDRESS_OUT     : in  std_logic_vector;
        ADDRESS_OUT_STB : in  std_logic;
        ADDRESS_OUT_ACK : out std_logic;
        DATA_OUT        : out std_logic_vector;
        DATA_OUT_STB    : out std_logic;
        DATA_OUT_ACK    : in  std_logic
    );
  end component RAMARRAY;

  signal STREAM_7     : std_logic_vector(12 downto 0);
  signal STREAM_7_STB : std_logic;
  signal STREAM_7_ACK : std_logic;

  signal STREAM_4       : std_logic_vector(12 downto 0);
  signal STREAM_4_STB   : std_logic;
  signal STREAM_4_ACK   : std_logic;
  signal STREAM_5       : std_logic_vector(12 downto 0);
  signal STREAM_5_STB   : std_logic;
  signal STREAM_5_ACK   : std_logic;
  signal STREAM_6       : std_logic_vector(12 downto 0);
  signal STREAM_6_STB   : std_logic;
  signal STREAM_6_ACK   : std_logic;
  signal STREAM_3       : std_logic_vector(12 downto 0);
  signal STREAM_3_STB   : std_logic;
  signal STREAM_3_ACK   : std_logic;
  constant OP_ADD_8 : std_logic_vector(4 downto 0) := "00000";
  constant OP_SUB_8 : std_logic_vector(4 downto 0) := "00001";
  constant OP_MUL_8 : std_logic_vector(4 downto 0) := "00010";
  constant OP_DIV_8 : std_logic_vector(4 downto 0) := "00011";
  constant OP_BAND_8 : std_logic_vector(4 downto 0) := "00100";
  constant OP_BOR_8 : std_logic_vector(4 downto 0) := "00101";
  constant OP_BXOR_8 : std_logic_vector(4 downto 0) := "00110";
  constant OP_SL_8 : std_logic_vector(4 downto 0) := "00111";
  constant OP_SR_8 : std_logic_vector(4 downto 0) := "01000";
  constant OP_EQ_8 : std_logic_vector(4 downto 0) := "01001";
  constant OP_NE_8 : std_logic_vector(4 downto 0) := "01010";
  constant OP_GT_8 : std_logic_vector(4 downto 0) := "01011";
  constant OP_GE_8 : std_logic_vector(4 downto 0) := "01100";
  constant OP_JMP_8 : std_logic_vector(4 downto 0) := "01101";
  constant OP_JMPF_8 : std_logic_vector(4 downto 0) := "01110";
  constant OP_IMM_8 : std_logic_vector(4 downto 0) := "01111";
  constant OP_MOVE_8 : std_logic_vector(4 downto 0) := "10000";
  constant OP_WAIT_US_8 : std_logic_vector(4 downto 0) := "10001";
  constant OP_MOD_8 : std_logic_vector(4 downto 0) := "10010";
  constant OP_READ_1_8 : std_logic_vector(4 downto 0) := "10011";
  constant OP_READ_7_8 : std_logic_vector(4 downto 0) := "10100";
  constant OP_WRITE_4_8 : std_logic_vector(4 downto 0) := "10101";
  constant OP_WRITE_5_8 : std_logic_vector(4 downto 0) := "10110";
  constant OP_WRITE_6_8 : std_logic_vector(4 downto 0) := "10111";
  constant OP_WRITE_3_8 : std_logic_vector(4 downto 0) := "11000";
  type PROCESS_8_STATE_TYPE is (STALL, EXECUTE, WAIT_US, READ_STREAM_1, ACK_STREAM_1, READ_STREAM_7, ACK_STREAM_7, WRITE_STREAM_4, WRITE_STREAM_5, WRITE_STREAM_6, WRITE_STREAM_3);
  type INSTRUCTIONS_TYPE_8  is array (0 to 515) of std_logic_vector(21 downto 0);
  type REGISTERS_TYPE_8     is array (0 to 15) of std_logic_vector(12 downto 0);
  signal STATE_8        : PROCESS_8_STATE_TYPE;
  signal REGISTERS_8    : REGISTERS_TYPE_8;
  signal PC_8           : unsigned(9 downto 0);
  signal OPERATION_8    : std_logic_vector(4 downto 0);
  signal SRCA_8         : std_logic_vector(3 downto 0);
  signal SRCB_8         : std_logic_vector(3 downto 0);
  signal IMMEDIATE_8    : std_logic_vector(12 downto 0);
  signal ZERO_8         : std_logic;
  signal A_8            : std_logic_vector(12 downto 0);
  signal B_8            : std_logic_vector(12 downto 0);
  signal QUOTIENT_8     : std_logic_vector(12 downto 0);
  signal SHIFTER_8      : std_logic_vector(12 downto 0);
  signal REMAINDER_8    : std_logic_vector(12 downto 0);
  signal COUNT_8        : integer range 0 to 13;
  signal SIGN_8         : std_logic;
  signal INSTRUCTIONS_8 : INSTRUCTIONS_TYPE_8 := (
0 => OP_IMM_8 & "0001" & "0000000000000", -- file: ./example_7_edge_detect.py line: 41
1 => OP_IMM_8 & "0010" & "0000000000000", -- file: ./example_7_edge_detect.py line: 43
2 => OP_IMM_8 & "0011" & "0000000000000", -- file: ./example_7_edge_detect.py line: 42
3 => OP_IMM_8 & "0100" & "0000000000000", -- file: /home/jon/streams/streams/__init__.py line: 184
4 => OP_IMM_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
5 => OP_MOVE_8 & "0001" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
6 => OP_IMM_8 & "0101" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
7 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
8 => OP_GT_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 128
9 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
10 => OP_EQ_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 124
11 => OP_JMPF_8 & "0101" & "0000000001110", -- file: None line: None
12 => OP_JMP_8 & "0000" & "0000000011001", -- file: /home/jon/streams/streams/__init__.py line: 58
13 => OP_JMP_8 & "0000" & "0000000001110", -- file: None line: None
14 => OP_IMM_8 & "0101" & "0000100000000", -- file: /home/jon/streams/streams/instruction.py line: 109
15 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
16 => OP_ADD_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 130
17 => OP_WRITE_4_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
18 => OP_IMM_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
19 => OP_WRITE_5_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
20 => OP_MOVE_8 & "0101" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
21 => OP_IMM_8 & "0110" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
22 => OP_ADD_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 114
23 => OP_MOVE_8 & "0001" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
24 => OP_JMP_8 & "0000" & "0000000000110", -- file: /home/jon/streams/streams/__init__.py line: 59
25 => OP_IMM_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
26 => OP_MOVE_8 & "0001" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
27 => OP_IMM_8 & "0101" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
28 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
29 => OP_GT_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 128
30 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
31 => OP_EQ_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 124
32 => OP_JMPF_8 & "0101" & "0000000100011", -- file: None line: None
33 => OP_JMP_8 & "0000" & "0000000101111", -- file: /home/jon/streams/streams/__init__.py line: 58
34 => OP_JMP_8 & "0000" & "0000000100011", -- file: None line: None
35 => OP_READ_1_8 & "0010" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 148
36 => OP_IMM_8 & "0101" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
37 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
38 => OP_ADD_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 130
39 => OP_WRITE_4_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
40 => OP_MOVE_8 & "0101" & "0000000000010", -- file: ./example_7_edge_detect.py line: 43
41 => OP_WRITE_5_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
42 => OP_MOVE_8 & "0101" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
43 => OP_IMM_8 & "0110" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
44 => OP_ADD_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 114
45 => OP_MOVE_8 & "0001" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
46 => OP_JMP_8 & "0000" & "0000000011011", -- file: /home/jon/streams/streams/__init__.py line: 59
47 => OP_IMM_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
48 => OP_MOVE_8 & "0001" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
49 => OP_IMM_8 & "0101" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
50 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
51 => OP_GT_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 128
52 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
53 => OP_EQ_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 124
54 => OP_JMPF_8 & "0101" & "0000000111001", -- file: None line: None
55 => OP_JMP_8 & "0000" & "0000001000011", -- file: /home/jon/streams/streams/__init__.py line: 58
56 => OP_JMP_8 & "0000" & "0000000111001", -- file: None line: None
57 => OP_READ_1_8 & "0010" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 148
58 => OP_MOVE_8 & "0101" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
59 => OP_WRITE_4_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
60 => OP_MOVE_8 & "0101" & "0000000000010", -- file: ./example_7_edge_detect.py line: 43
61 => OP_WRITE_5_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
62 => OP_MOVE_8 & "0101" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
63 => OP_IMM_8 & "0110" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
64 => OP_ADD_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 114
65 => OP_MOVE_8 & "0001" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
66 => OP_JMP_8 & "0000" & "0000000110001", -- file: /home/jon/streams/streams/__init__.py line: 59
67 => OP_IMM_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
68 => OP_MOVE_8 & "0011" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
69 => OP_IMM_8 & "0101" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
70 => OP_MOVE_8 & "0110" & "0000000000011", -- file: ./example_7_edge_detect.py line: 42
71 => OP_GT_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 128
72 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
73 => OP_EQ_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 124
74 => OP_JMPF_8 & "0101" & "0000001001101", -- file: None line: None
75 => OP_JMP_8 & "0000" & "0001000000010", -- file: /home/jon/streams/streams/__init__.py line: 58
76 => OP_JMP_8 & "0000" & "0000001001101", -- file: None line: None
77 => OP_IMM_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
78 => OP_MOVE_8 & "0001" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
79 => OP_IMM_8 & "0101" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
80 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
81 => OP_GT_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 128
82 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
83 => OP_EQ_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 124
84 => OP_JMPF_8 & "0101" & "0000001010111", -- file: None line: None
85 => OP_JMP_8 & "0000" & "0000110100111", -- file: /home/jon/streams/streams/__init__.py line: 58
86 => OP_JMP_8 & "0000" & "0000001010111", -- file: None line: None
87 => OP_IMM_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
88 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
89 => OP_GT_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 128
90 => OP_JMPF_8 & "0101" & "0000001011111", -- file: None line: None
91 => OP_IMM_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
92 => OP_MOVE_8 & "0000" & "0000000000101", -- file: ./example_7_edge_detect.py line: 36
93 => OP_JMP_8 & "0000" & "0000001110010", -- file: ./example_7_edge_detect.py line: 36
94 => OP_JMP_8 & "0000" & "0000001011111", -- file: None line: None
95 => OP_MOVE_8 & "0101" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
96 => OP_IMM_8 & "0110" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
97 => OP_GE_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 127
98 => OP_JMPF_8 & "0101" & "0000001100111", -- file: None line: None
99 => OP_IMM_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
100 => OP_MOVE_8 & "0000" & "0000000000101", -- file: ./example_7_edge_detect.py line: 37
101 => OP_JMP_8 & "0000" & "0000001110010", -- file: ./example_7_edge_detect.py line: 37
102 => OP_JMP_8 & "0000" & "0000001100111", -- file: None line: None
103 => OP_MOVE_8 & "0101" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
104 => OP_IMM_8 & "0110" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
105 => OP_ADD_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 114
106 => OP_WRITE_6_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
107 => OP_READ_7_8 & "0100" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 148
108 => OP_MOVE_8 & "0101" & "0000000000100", -- file: /home/jon/streams/streams/__init__.py line: 184
109 => OP_MOVE_8 & "0000" & "0000000000101", -- file: /home/jon/streams/streams/__init__.py line: 195
110 => OP_JMP_8 & "0000" & "0000001101111", -- file: /home/jon/streams/streams/__init__.py line: 195
111 => OP_MOVE_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/__init__.py line: 195
112 => OP_MOVE_8 & "0000" & "0000000000101", -- file: ./example_7_edge_detect.py line: 38
113 => OP_JMP_8 & "0000" & "0000001110010", -- file: ./example_7_edge_detect.py line: 38
114 => OP_MOVE_8 & "0101" & "0000000000000", -- file: ./example_7_edge_detect.py line: 38
115 => OP_MOVE_8 & "0010" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
116 => OP_MOVE_8 & "0101" & "0000000000010", -- file: ./example_7_edge_detect.py line: 43
117 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
118 => OP_MOVE_8 & "0111" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
119 => OP_IMM_8 & "1000" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
120 => OP_SUB_8 & "0111" & "0000000001000", -- file: /home/jon/streams/streams/instruction.py line: 115
121 => OP_GT_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 128
122 => OP_JMPF_8 & "0110" & "0000001111111", -- file: None line: None
123 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
124 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 36
125 => OP_JMP_8 & "0000" & "0000010010110", -- file: ./example_7_edge_detect.py line: 36
126 => OP_JMP_8 & "0000" & "0000001111111", -- file: None line: None
127 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
128 => OP_IMM_8 & "0111" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
129 => OP_SUB_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 115
130 => OP_IMM_8 & "0111" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
131 => OP_GE_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 127
132 => OP_JMPF_8 & "0110" & "0000010001001", -- file: None line: None
133 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
134 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 37
135 => OP_JMP_8 & "0000" & "0000010010110", -- file: ./example_7_edge_detect.py line: 37
136 => OP_JMP_8 & "0000" & "0000010001001", -- file: None line: None
137 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
138 => OP_IMM_8 & "0111" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
139 => OP_SUB_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 115
140 => OP_IMM_8 & "0111" & "0000100000000", -- file: /home/jon/streams/streams/instruction.py line: 109
141 => OP_ADD_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 114
142 => OP_WRITE_6_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
143 => OP_READ_7_8 & "0100" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 148
144 => OP_MOVE_8 & "0110" & "0000000000100", -- file: /home/jon/streams/streams/__init__.py line: 184
145 => OP_MOVE_8 & "0000" & "0000000000110", -- file: /home/jon/streams/streams/__init__.py line: 195
146 => OP_JMP_8 & "0000" & "0000010010011", -- file: /home/jon/streams/streams/__init__.py line: 195
147 => OP_MOVE_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/__init__.py line: 195
148 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 38
149 => OP_JMP_8 & "0000" & "0000010010110", -- file: ./example_7_edge_detect.py line: 38
150 => OP_MOVE_8 & "0110" & "0000000000000", -- file: ./example_7_edge_detect.py line: 38
151 => OP_IMM_8 & "0111" & "0000000000011", -- file: /home/jon/streams/streams/instruction.py line: 109
152 => OP_SR_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 122
153 => OP_SUB_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 115
154 => OP_MOVE_8 & "0010" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
155 => OP_MOVE_8 & "0101" & "0000000000010", -- file: ./example_7_edge_detect.py line: 43
156 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
157 => OP_MOVE_8 & "0111" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
158 => OP_IMM_8 & "1000" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
159 => OP_SUB_8 & "0111" & "0000000001000", -- file: /home/jon/streams/streams/instruction.py line: 115
160 => OP_GT_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 128
161 => OP_JMPF_8 & "0110" & "0000010100110", -- file: None line: None
162 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
163 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 36
164 => OP_JMP_8 & "0000" & "0000010111101", -- file: ./example_7_edge_detect.py line: 36
165 => OP_JMP_8 & "0000" & "0000010100110", -- file: None line: None
166 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
167 => OP_IMM_8 & "0111" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
168 => OP_SUB_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 115
169 => OP_IMM_8 & "0111" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
170 => OP_GE_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 127
171 => OP_JMPF_8 & "0110" & "0000010110000", -- file: None line: None
172 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
173 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 37
174 => OP_JMP_8 & "0000" & "0000010111101", -- file: ./example_7_edge_detect.py line: 37
175 => OP_JMP_8 & "0000" & "0000010110000", -- file: None line: None
176 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
177 => OP_IMM_8 & "0111" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
178 => OP_SUB_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 115
179 => OP_IMM_8 & "0111" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
180 => OP_ADD_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 114
181 => OP_WRITE_6_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
182 => OP_READ_7_8 & "0100" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 148
183 => OP_MOVE_8 & "0110" & "0000000000100", -- file: /home/jon/streams/streams/__init__.py line: 184
184 => OP_MOVE_8 & "0000" & "0000000000110", -- file: /home/jon/streams/streams/__init__.py line: 195
185 => OP_JMP_8 & "0000" & "0000010111010", -- file: /home/jon/streams/streams/__init__.py line: 195
186 => OP_MOVE_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/__init__.py line: 195
187 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 38
188 => OP_JMP_8 & "0000" & "0000010111101", -- file: ./example_7_edge_detect.py line: 38
189 => OP_MOVE_8 & "0110" & "0000000000000", -- file: ./example_7_edge_detect.py line: 38
190 => OP_IMM_8 & "0111" & "0000000000011", -- file: /home/jon/streams/streams/instruction.py line: 109
191 => OP_SR_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 122
192 => OP_SUB_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 115
193 => OP_MOVE_8 & "0010" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
194 => OP_MOVE_8 & "0101" & "0000000000010", -- file: ./example_7_edge_detect.py line: 43
195 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
196 => OP_MOVE_8 & "0111" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
197 => OP_IMM_8 & "1000" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
198 => OP_SUB_8 & "0111" & "0000000001000", -- file: /home/jon/streams/streams/instruction.py line: 115
199 => OP_GT_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 128
200 => OP_JMPF_8 & "0110" & "0000011001101", -- file: None line: None
201 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
202 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 36
203 => OP_JMP_8 & "0000" & "0000011100100", -- file: ./example_7_edge_detect.py line: 36
204 => OP_JMP_8 & "0000" & "0000011001101", -- file: None line: None
205 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
206 => OP_IMM_8 & "0111" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
207 => OP_SUB_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 115
208 => OP_IMM_8 & "0111" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
209 => OP_GE_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 127
210 => OP_JMPF_8 & "0110" & "0000011010111", -- file: None line: None
211 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
212 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 37
213 => OP_JMP_8 & "0000" & "0000011100100", -- file: ./example_7_edge_detect.py line: 37
214 => OP_JMP_8 & "0000" & "0000011010111", -- file: None line: None
215 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
216 => OP_IMM_8 & "0111" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
217 => OP_SUB_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 115
218 => OP_IMM_8 & "0111" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
219 => OP_ADD_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 114
220 => OP_WRITE_6_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
221 => OP_READ_7_8 & "0100" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 148
222 => OP_MOVE_8 & "0110" & "0000000000100", -- file: /home/jon/streams/streams/__init__.py line: 184
223 => OP_MOVE_8 & "0000" & "0000000000110", -- file: /home/jon/streams/streams/__init__.py line: 195
224 => OP_JMP_8 & "0000" & "0000011100001", -- file: /home/jon/streams/streams/__init__.py line: 195
225 => OP_MOVE_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/__init__.py line: 195
226 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 38
227 => OP_JMP_8 & "0000" & "0000011100100", -- file: ./example_7_edge_detect.py line: 38
228 => OP_MOVE_8 & "0110" & "0000000000000", -- file: ./example_7_edge_detect.py line: 38
229 => OP_IMM_8 & "0111" & "0000000000011", -- file: /home/jon/streams/streams/instruction.py line: 109
230 => OP_SR_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 122
231 => OP_SUB_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 115
232 => OP_MOVE_8 & "0010" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
233 => OP_MOVE_8 & "0101" & "0000000000010", -- file: ./example_7_edge_detect.py line: 43
234 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
235 => OP_MOVE_8 & "0111" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
236 => OP_GT_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 128
237 => OP_JMPF_8 & "0110" & "0000011110010", -- file: None line: None
238 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
239 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 36
240 => OP_JMP_8 & "0000" & "0000100000101", -- file: ./example_7_edge_detect.py line: 36
241 => OP_JMP_8 & "0000" & "0000011110010", -- file: None line: None
242 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
243 => OP_IMM_8 & "0111" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
244 => OP_GE_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 127
245 => OP_JMPF_8 & "0110" & "0000011111010", -- file: None line: None
246 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
247 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 37
248 => OP_JMP_8 & "0000" & "0000100000101", -- file: ./example_7_edge_detect.py line: 37
249 => OP_JMP_8 & "0000" & "0000011111010", -- file: None line: None
250 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
251 => OP_IMM_8 & "0111" & "0000100000000", -- file: /home/jon/streams/streams/instruction.py line: 109
252 => OP_ADD_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 114
253 => OP_WRITE_6_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
254 => OP_READ_7_8 & "0100" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 148
255 => OP_MOVE_8 & "0110" & "0000000000100", -- file: /home/jon/streams/streams/__init__.py line: 184
256 => OP_MOVE_8 & "0000" & "0000000000110", -- file: /home/jon/streams/streams/__init__.py line: 195
257 => OP_JMP_8 & "0000" & "0000100000010", -- file: /home/jon/streams/streams/__init__.py line: 195
258 => OP_MOVE_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/__init__.py line: 195
259 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 38
260 => OP_JMP_8 & "0000" & "0000100000101", -- file: ./example_7_edge_detect.py line: 38
261 => OP_MOVE_8 & "0110" & "0000000000000", -- file: ./example_7_edge_detect.py line: 38
262 => OP_IMM_8 & "0111" & "0000000000011", -- file: /home/jon/streams/streams/instruction.py line: 109
263 => OP_SR_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 122
264 => OP_SUB_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 115
265 => OP_MOVE_8 & "0010" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
266 => OP_MOVE_8 & "0101" & "0000000000010", -- file: ./example_7_edge_detect.py line: 43
267 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
268 => OP_MOVE_8 & "0111" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
269 => OP_GT_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 128
270 => OP_JMPF_8 & "0110" & "0000100010011", -- file: None line: None
271 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
272 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 36
273 => OP_JMP_8 & "0000" & "0000100100110", -- file: ./example_7_edge_detect.py line: 36
274 => OP_JMP_8 & "0000" & "0000100010011", -- file: None line: None
275 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
276 => OP_IMM_8 & "0111" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
277 => OP_GE_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 127
278 => OP_JMPF_8 & "0110" & "0000100011011", -- file: None line: None
279 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
280 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 37
281 => OP_JMP_8 & "0000" & "0000100100110", -- file: ./example_7_edge_detect.py line: 37
282 => OP_JMP_8 & "0000" & "0000100011011", -- file: None line: None
283 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
284 => OP_IMM_8 & "0111" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
285 => OP_ADD_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 114
286 => OP_WRITE_6_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
287 => OP_READ_7_8 & "0100" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 148
288 => OP_MOVE_8 & "0110" & "0000000000100", -- file: /home/jon/streams/streams/__init__.py line: 184
289 => OP_MOVE_8 & "0000" & "0000000000110", -- file: /home/jon/streams/streams/__init__.py line: 195
290 => OP_JMP_8 & "0000" & "0000100100011", -- file: /home/jon/streams/streams/__init__.py line: 195
291 => OP_MOVE_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/__init__.py line: 195
292 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 38
293 => OP_JMP_8 & "0000" & "0000100100110", -- file: ./example_7_edge_detect.py line: 38
294 => OP_MOVE_8 & "0110" & "0000000000000", -- file: ./example_7_edge_detect.py line: 38
295 => OP_IMM_8 & "0111" & "0000000000011", -- file: /home/jon/streams/streams/instruction.py line: 109
296 => OP_SR_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 122
297 => OP_SUB_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 115
298 => OP_MOVE_8 & "0010" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
299 => OP_MOVE_8 & "0101" & "0000000000010", -- file: ./example_7_edge_detect.py line: 43
300 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
301 => OP_MOVE_8 & "0111" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
302 => OP_IMM_8 & "1000" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
303 => OP_ADD_8 & "0111" & "0000000001000", -- file: /home/jon/streams/streams/instruction.py line: 114
304 => OP_GT_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 128
305 => OP_JMPF_8 & "0110" & "0000100110110", -- file: None line: None
306 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
307 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 36
308 => OP_JMP_8 & "0000" & "0000101001101", -- file: ./example_7_edge_detect.py line: 36
309 => OP_JMP_8 & "0000" & "0000100110110", -- file: None line: None
310 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
311 => OP_IMM_8 & "0111" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
312 => OP_ADD_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 114
313 => OP_IMM_8 & "0111" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
314 => OP_GE_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 127
315 => OP_JMPF_8 & "0110" & "0000101000000", -- file: None line: None
316 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
317 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 37
318 => OP_JMP_8 & "0000" & "0000101001101", -- file: ./example_7_edge_detect.py line: 37
319 => OP_JMP_8 & "0000" & "0000101000000", -- file: None line: None
320 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
321 => OP_IMM_8 & "0111" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
322 => OP_ADD_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 114
323 => OP_IMM_8 & "0111" & "0000100000000", -- file: /home/jon/streams/streams/instruction.py line: 109
324 => OP_ADD_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 114
325 => OP_WRITE_6_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
326 => OP_READ_7_8 & "0100" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 148
327 => OP_MOVE_8 & "0110" & "0000000000100", -- file: /home/jon/streams/streams/__init__.py line: 184
328 => OP_MOVE_8 & "0000" & "0000000000110", -- file: /home/jon/streams/streams/__init__.py line: 195
329 => OP_JMP_8 & "0000" & "0000101001010", -- file: /home/jon/streams/streams/__init__.py line: 195
330 => OP_MOVE_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/__init__.py line: 195
331 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 38
332 => OP_JMP_8 & "0000" & "0000101001101", -- file: ./example_7_edge_detect.py line: 38
333 => OP_MOVE_8 & "0110" & "0000000000000", -- file: ./example_7_edge_detect.py line: 38
334 => OP_IMM_8 & "0111" & "0000000000011", -- file: /home/jon/streams/streams/instruction.py line: 109
335 => OP_SR_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 122
336 => OP_SUB_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 115
337 => OP_MOVE_8 & "0010" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
338 => OP_MOVE_8 & "0101" & "0000000000010", -- file: ./example_7_edge_detect.py line: 43
339 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
340 => OP_MOVE_8 & "0111" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
341 => OP_IMM_8 & "1000" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
342 => OP_ADD_8 & "0111" & "0000000001000", -- file: /home/jon/streams/streams/instruction.py line: 114
343 => OP_GT_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 128
344 => OP_JMPF_8 & "0110" & "0000101011101", -- file: None line: None
345 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
346 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 36
347 => OP_JMP_8 & "0000" & "0000101110100", -- file: ./example_7_edge_detect.py line: 36
348 => OP_JMP_8 & "0000" & "0000101011101", -- file: None line: None
349 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
350 => OP_IMM_8 & "0111" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
351 => OP_ADD_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 114
352 => OP_IMM_8 & "0111" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
353 => OP_GE_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 127
354 => OP_JMPF_8 & "0110" & "0000101100111", -- file: None line: None
355 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
356 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 37
357 => OP_JMP_8 & "0000" & "0000101110100", -- file: ./example_7_edge_detect.py line: 37
358 => OP_JMP_8 & "0000" & "0000101100111", -- file: None line: None
359 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
360 => OP_IMM_8 & "0111" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
361 => OP_ADD_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 114
362 => OP_IMM_8 & "0111" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
363 => OP_ADD_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 114
364 => OP_WRITE_6_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
365 => OP_READ_7_8 & "0100" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 148
366 => OP_MOVE_8 & "0110" & "0000000000100", -- file: /home/jon/streams/streams/__init__.py line: 184
367 => OP_MOVE_8 & "0000" & "0000000000110", -- file: /home/jon/streams/streams/__init__.py line: 195
368 => OP_JMP_8 & "0000" & "0000101110001", -- file: /home/jon/streams/streams/__init__.py line: 195
369 => OP_MOVE_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/__init__.py line: 195
370 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 38
371 => OP_JMP_8 & "0000" & "0000101110100", -- file: ./example_7_edge_detect.py line: 38
372 => OP_MOVE_8 & "0110" & "0000000000000", -- file: ./example_7_edge_detect.py line: 38
373 => OP_IMM_8 & "0111" & "0000000000011", -- file: /home/jon/streams/streams/instruction.py line: 109
374 => OP_SR_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 122
375 => OP_SUB_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 115
376 => OP_MOVE_8 & "0010" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
377 => OP_MOVE_8 & "0101" & "0000000000010", -- file: ./example_7_edge_detect.py line: 43
378 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
379 => OP_MOVE_8 & "0111" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
380 => OP_IMM_8 & "1000" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
381 => OP_ADD_8 & "0111" & "0000000001000", -- file: /home/jon/streams/streams/instruction.py line: 114
382 => OP_GT_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 128
383 => OP_JMPF_8 & "0110" & "0000110000100", -- file: None line: None
384 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
385 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 36
386 => OP_JMP_8 & "0000" & "0000110011011", -- file: ./example_7_edge_detect.py line: 36
387 => OP_JMP_8 & "0000" & "0000110000100", -- file: None line: None
388 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
389 => OP_IMM_8 & "0111" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
390 => OP_ADD_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 114
391 => OP_IMM_8 & "0111" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
392 => OP_GE_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 127
393 => OP_JMPF_8 & "0110" & "0000110001110", -- file: None line: None
394 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
395 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 37
396 => OP_JMP_8 & "0000" & "0000110011011", -- file: ./example_7_edge_detect.py line: 37
397 => OP_JMP_8 & "0000" & "0000110001110", -- file: None line: None
398 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
399 => OP_IMM_8 & "0111" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
400 => OP_ADD_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 114
401 => OP_IMM_8 & "0111" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
402 => OP_ADD_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 114
403 => OP_WRITE_6_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
404 => OP_READ_7_8 & "0100" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 148
405 => OP_MOVE_8 & "0110" & "0000000000100", -- file: /home/jon/streams/streams/__init__.py line: 184
406 => OP_MOVE_8 & "0000" & "0000000000110", -- file: /home/jon/streams/streams/__init__.py line: 195
407 => OP_JMP_8 & "0000" & "0000110011000", -- file: /home/jon/streams/streams/__init__.py line: 195
408 => OP_MOVE_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/__init__.py line: 195
409 => OP_MOVE_8 & "0000" & "0000000000110", -- file: ./example_7_edge_detect.py line: 38
410 => OP_JMP_8 & "0000" & "0000110011011", -- file: ./example_7_edge_detect.py line: 38
411 => OP_MOVE_8 & "0110" & "0000000000000", -- file: ./example_7_edge_detect.py line: 38
412 => OP_IMM_8 & "0111" & "0000000000011", -- file: /home/jon/streams/streams/instruction.py line: 109
413 => OP_SR_8 & "0110" & "0000000000111", -- file: /home/jon/streams/streams/instruction.py line: 122
414 => OP_SUB_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 115
415 => OP_MOVE_8 & "0010" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
416 => OP_MOVE_8 & "0101" & "0000000000010", -- file: ./example_7_edge_detect.py line: 43
417 => OP_WRITE_3_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
418 => OP_MOVE_8 & "0101" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
419 => OP_IMM_8 & "0110" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
420 => OP_ADD_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 114
421 => OP_MOVE_8 & "0001" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
422 => OP_JMP_8 & "0000" & "0000001001111", -- file: /home/jon/streams/streams/__init__.py line: 59
423 => OP_IMM_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
424 => OP_MOVE_8 & "0001" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
425 => OP_IMM_8 & "0101" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
426 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
427 => OP_GT_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 128
428 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
429 => OP_EQ_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 124
430 => OP_JMPF_8 & "0101" & "0000110110001", -- file: None line: None
431 => OP_JMP_8 & "0000" & "0000111000100", -- file: /home/jon/streams/streams/__init__.py line: 58
432 => OP_JMP_8 & "0000" & "0000110110001", -- file: None line: None
433 => OP_IMM_8 & "0101" & "0000100000000", -- file: /home/jon/streams/streams/instruction.py line: 109
434 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
435 => OP_ADD_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 130
436 => OP_WRITE_4_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
437 => OP_IMM_8 & "0101" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
438 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
439 => OP_ADD_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 130
440 => OP_WRITE_6_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
441 => OP_READ_7_8 & "0100" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 148
442 => OP_MOVE_8 & "0101" & "0000000000100", -- file: /home/jon/streams/streams/__init__.py line: 184
443 => OP_MOVE_8 & "0000" & "0000000000101", -- file: /home/jon/streams/streams/__init__.py line: 195
444 => OP_JMP_8 & "0000" & "0000110111101", -- file: /home/jon/streams/streams/__init__.py line: 195
445 => OP_MOVE_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/__init__.py line: 195
446 => OP_WRITE_5_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
447 => OP_MOVE_8 & "0101" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
448 => OP_IMM_8 & "0110" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
449 => OP_ADD_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 114
450 => OP_MOVE_8 & "0001" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
451 => OP_JMP_8 & "0000" & "0000110101001", -- file: /home/jon/streams/streams/__init__.py line: 59
452 => OP_IMM_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
453 => OP_MOVE_8 & "0001" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
454 => OP_IMM_8 & "0101" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
455 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
456 => OP_GT_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 128
457 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
458 => OP_EQ_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 124
459 => OP_JMPF_8 & "0101" & "0000111001110", -- file: None line: None
460 => OP_JMP_8 & "0000" & "0000111011111", -- file: /home/jon/streams/streams/__init__.py line: 58
461 => OP_JMP_8 & "0000" & "0000111001110", -- file: None line: None
462 => OP_IMM_8 & "0101" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
463 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
464 => OP_ADD_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 130
465 => OP_WRITE_4_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
466 => OP_MOVE_8 & "0101" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
467 => OP_WRITE_6_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
468 => OP_READ_7_8 & "0100" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 148
469 => OP_MOVE_8 & "0101" & "0000000000100", -- file: /home/jon/streams/streams/__init__.py line: 184
470 => OP_MOVE_8 & "0000" & "0000000000101", -- file: /home/jon/streams/streams/__init__.py line: 195
471 => OP_JMP_8 & "0000" & "0000111011000", -- file: /home/jon/streams/streams/__init__.py line: 195
472 => OP_MOVE_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/__init__.py line: 195
473 => OP_WRITE_5_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
474 => OP_MOVE_8 & "0101" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
475 => OP_IMM_8 & "0110" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
476 => OP_ADD_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 114
477 => OP_MOVE_8 & "0001" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
478 => OP_JMP_8 & "0000" & "0000111000110", -- file: /home/jon/streams/streams/__init__.py line: 59
479 => OP_IMM_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
480 => OP_MOVE_8 & "0001" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
481 => OP_IMM_8 & "0101" & "0000010000000", -- file: /home/jon/streams/streams/instruction.py line: 109
482 => OP_MOVE_8 & "0110" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
483 => OP_GT_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 128
484 => OP_IMM_8 & "0110" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
485 => OP_EQ_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 124
486 => OP_JMPF_8 & "0101" & "0000111101001", -- file: None line: None
487 => OP_JMP_8 & "0000" & "0000111111101", -- file: /home/jon/streams/streams/__init__.py line: 58
488 => OP_JMP_8 & "0000" & "0000111101001", -- file: None line: None
489 => OP_IMM_8 & "0101" & "0000001111111", -- file: /home/jon/streams/streams/instruction.py line: 109
490 => OP_MOVE_8 & "0110" & "0000000000011", -- file: ./example_7_edge_detect.py line: 42
491 => OP_GT_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 128
492 => OP_JMPF_8 & "0101" & "0000111101111", -- file: None line: None
493 => OP_READ_1_8 & "0010" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 148
494 => OP_JMP_8 & "0000" & "0000111110100", -- file: None line: None
495 => OP_IMM_8 & "0101" & "1111111111111", -- file: /home/jon/streams/streams/instruction.py line: 109
496 => OP_JMPF_8 & "0101" & "0000111110100", -- file: None line: None
497 => OP_IMM_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
498 => OP_MOVE_8 & "0010" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
499 => OP_JMP_8 & "0000" & "0000111110100", -- file: None line: None
500 => OP_MOVE_8 & "0101" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
501 => OP_WRITE_4_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
502 => OP_MOVE_8 & "0101" & "0000000000010", -- file: ./example_7_edge_detect.py line: 43
503 => OP_WRITE_5_8 & "0101" & "0000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
504 => OP_MOVE_8 & "0101" & "0000000000001", -- file: ./example_7_edge_detect.py line: 41
505 => OP_IMM_8 & "0110" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
506 => OP_ADD_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 114
507 => OP_MOVE_8 & "0001" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
508 => OP_JMP_8 & "0000" & "0000111100001", -- file: /home/jon/streams/streams/__init__.py line: 59
509 => OP_MOVE_8 & "0101" & "0000000000011", -- file: ./example_7_edge_detect.py line: 42
510 => OP_IMM_8 & "0110" & "0000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
511 => OP_ADD_8 & "0101" & "0000000000110", -- file: /home/jon/streams/streams/instruction.py line: 114
512 => OP_MOVE_8 & "0011" & "0000000000101", -- file: /home/jon/streams/streams/instruction.py line: 264
513 => OP_JMP_8 & "0000" & "0000001000101", -- file: /home/jon/streams/streams/__init__.py line: 59
514 => OP_JMP_8 & "0000" & "0001000000010", -- file: None line: None
515 => OP_JMP_8 & "0000" & "0000000000000"); -- file: None line: None
  signal MOD_DIV_8      : std_logic;
  signal STREAM_1       : std_logic_vector(8 downto 0);
  signal STREAM_1_STB   : std_logic;
  signal STREAM_1_ACK   : std_logic;
  constant OP_ADD_2 : std_logic_vector(4 downto 0) := "00000";
  constant OP_SUB_2 : std_logic_vector(4 downto 0) := "00001";
  constant OP_MUL_2 : std_logic_vector(4 downto 0) := "00010";
  constant OP_DIV_2 : std_logic_vector(4 downto 0) := "00011";
  constant OP_BAND_2 : std_logic_vector(4 downto 0) := "00100";
  constant OP_BOR_2 : std_logic_vector(4 downto 0) := "00101";
  constant OP_BXOR_2 : std_logic_vector(4 downto 0) := "00110";
  constant OP_SL_2 : std_logic_vector(4 downto 0) := "00111";
  constant OP_SR_2 : std_logic_vector(4 downto 0) := "01000";
  constant OP_EQ_2 : std_logic_vector(4 downto 0) := "01001";
  constant OP_NE_2 : std_logic_vector(4 downto 0) := "01010";
  constant OP_GT_2 : std_logic_vector(4 downto 0) := "01011";
  constant OP_GE_2 : std_logic_vector(4 downto 0) := "01100";
  constant OP_JMP_2 : std_logic_vector(4 downto 0) := "01101";
  constant OP_JMPF_2 : std_logic_vector(4 downto 0) := "01110";
  constant OP_IMM_2 : std_logic_vector(4 downto 0) := "01111";
  constant OP_MOVE_2 : std_logic_vector(4 downto 0) := "10000";
  constant OP_WAIT_US_2 : std_logic_vector(4 downto 0) := "10001";
  constant OP_MOD_2 : std_logic_vector(4 downto 0) := "10010";
  constant OP_READ_0_2 : std_logic_vector(4 downto 0) := "10011";
  constant OP_WRITE_1_2 : std_logic_vector(4 downto 0) := "10100";
  type PROCESS_2_STATE_TYPE is (STALL, EXECUTE, WAIT_US, READ_STREAM_0, ACK_STREAM_0, WRITE_STREAM_1);
  type INSTRUCTIONS_TYPE_2  is array (0 to 53) of std_logic_vector(16 downto 0);
  type REGISTERS_TYPE_2     is array (0 to 7) of std_logic_vector(8 downto 0);
  signal STATE_2        : PROCESS_2_STATE_TYPE;
  signal REGISTERS_2    : REGISTERS_TYPE_2;
  signal PC_2           : unsigned(5 downto 0);
  signal OPERATION_2    : std_logic_vector(4 downto 0);
  signal SRCA_2         : std_logic_vector(2 downto 0);
  signal SRCB_2         : std_logic_vector(2 downto 0);
  signal IMMEDIATE_2    : std_logic_vector(8 downto 0);
  signal ZERO_2         : std_logic;
  signal A_2            : std_logic_vector(8 downto 0);
  signal B_2            : std_logic_vector(8 downto 0);
  signal QUOTIENT_2     : std_logic_vector(8 downto 0);
  signal SHIFTER_2      : std_logic_vector(8 downto 0);
  signal REMAINDER_2    : std_logic_vector(8 downto 0);
  signal COUNT_2        : integer range 0 to 9;
  signal SIGN_2         : std_logic;
  signal INSTRUCTIONS_2 : INSTRUCTIONS_TYPE_2 := (
0 => OP_IMM_2 & "001" & "000000000", -- file: /home/jon/streams/streams/__init__.py line: 143
1 => OP_IMM_2 & "010" & "000000000", -- file: /home/jon/streams/streams/__init__.py line: 144
2 => OP_IMM_2 & "011" & "000000000", -- file: /home/jon/streams/streams/__init__.py line: 168
3 => OP_READ_0_2 & "001" & "000000000", -- file: /home/jon/streams/streams/streams.py line: 148
4 => OP_IMM_2 & "100" & "000110000", -- file: /home/jon/streams/streams/instruction.py line: 109
5 => OP_MOVE_2 & "101" & "000000001", -- file: /home/jon/streams/streams/__init__.py line: 143
6 => OP_GT_2 & "100" & "000000101", -- file: /home/jon/streams/streams/instruction.py line: 128
7 => OP_MOVE_2 & "101" & "000000001", -- file: /home/jon/streams/streams/__init__.py line: 143
8 => OP_IMM_2 & "110" & "000111001", -- file: /home/jon/streams/streams/instruction.py line: 109
9 => OP_GT_2 & "101" & "000000110", -- file: /home/jon/streams/streams/instruction.py line: 126
10 => OP_BOR_2 & "100" & "000000101", -- file: /home/jon/streams/streams/instruction.py line: 120
11 => OP_IMM_2 & "101" & "000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
12 => OP_EQ_2 & "100" & "000000101", -- file: /home/jon/streams/streams/instruction.py line: 124
13 => OP_JMPF_2 & "100" & "000010000", -- file: None line: None
14 => OP_JMP_2 & "000" & "000010010", -- file: /home/jon/streams/streams/__init__.py line: 58
15 => OP_JMP_2 & "000" & "000010000", -- file: None line: None
16 => OP_READ_0_2 & "001" & "000000000", -- file: /home/jon/streams/streams/streams.py line: 148
17 => OP_JMP_2 & "000" & "000000100", -- file: /home/jon/streams/streams/__init__.py line: 59
18 => OP_MOVE_2 & "100" & "000000001", -- file: /home/jon/streams/streams/__init__.py line: 143
19 => OP_IMM_2 & "101" & "000001111", -- file: /home/jon/streams/streams/instruction.py line: 109
20 => OP_BAND_2 & "100" & "000000101", -- file: /home/jon/streams/streams/instruction.py line: 119
21 => OP_MOVE_2 & "010" & "000000100", -- file: /home/jon/streams/streams/instruction.py line: 264
22 => OP_READ_0_2 & "001" & "000000000", -- file: /home/jon/streams/streams/streams.py line: 148
23 => OP_MOVE_2 & "100" & "000000001", -- file: /home/jon/streams/streams/__init__.py line: 143
24 => OP_IMM_2 & "101" & "000110000", -- file: /home/jon/streams/streams/instruction.py line: 109
25 => OP_GE_2 & "100" & "000000101", -- file: /home/jon/streams/streams/instruction.py line: 127
26 => OP_IMM_2 & "101" & "000111001", -- file: /home/jon/streams/streams/instruction.py line: 109
27 => OP_MOVE_2 & "110" & "000000001", -- file: /home/jon/streams/streams/__init__.py line: 143
28 => OP_GE_2 & "101" & "000000110", -- file: /home/jon/streams/streams/instruction.py line: 129
29 => OP_BAND_2 & "100" & "000000101", -- file: /home/jon/streams/streams/instruction.py line: 119
30 => OP_JMPF_2 & "100" & "000101010", -- file: None line: None
31 => OP_MOVE_2 & "100" & "000000010", -- file: /home/jon/streams/streams/__init__.py line: 144
32 => OP_IMM_2 & "101" & "000001010", -- file: /home/jon/streams/streams/instruction.py line: 109
33 => OP_MUL_2 & "100" & "000000101", -- file: /home/jon/streams/streams/instruction.py line: 116
34 => OP_MOVE_2 & "010" & "000000100", -- file: /home/jon/streams/streams/instruction.py line: 264
35 => OP_MOVE_2 & "100" & "000000010", -- file: /home/jon/streams/streams/__init__.py line: 144
36 => OP_MOVE_2 & "101" & "000000001", -- file: /home/jon/streams/streams/__init__.py line: 143
37 => OP_IMM_2 & "110" & "000001111", -- file: /home/jon/streams/streams/instruction.py line: 109
38 => OP_BAND_2 & "101" & "000000110", -- file: /home/jon/streams/streams/instruction.py line: 119
39 => OP_ADD_2 & "100" & "000000101", -- file: /home/jon/streams/streams/instruction.py line: 114
40 => OP_MOVE_2 & "010" & "000000100", -- file: /home/jon/streams/streams/instruction.py line: 264
41 => OP_JMP_2 & "000" & "000101110", -- file: None line: None
42 => OP_IMM_2 & "100" & "000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
43 => OP_JMPF_2 & "100" & "000101110", -- file: None line: None
44 => OP_JMP_2 & "000" & "000101111", -- file: /home/jon/streams/streams/__init__.py line: 161
45 => OP_JMP_2 & "000" & "000101110", -- file: None line: None
46 => OP_JMP_2 & "000" & "000010110", -- file: /home/jon/streams/streams/__init__.py line: 161
47 => OP_MOVE_2 & "100" & "000000010", -- file: /home/jon/streams/streams/__init__.py line: 144
48 => OP_MOVE_2 & "011" & "000000100", -- file: /home/jon/streams/streams/instruction.py line: 264
49 => OP_MOVE_2 & "100" & "000000011", -- file: /home/jon/streams/streams/__init__.py line: 168
50 => OP_WRITE_1_2 & "100" & "000000000", -- file: /home/jon/streams/streams/streams.py line: 371
51 => OP_JMP_2 & "000" & "000000011", -- file: /home/jon/streams/streams/__init__.py line: 173
52 => OP_JMP_2 & "000" & "000110100", -- file: None line: None
53 => OP_JMP_2 & "000" & "000000000"); -- file: None line: None
  signal MOD_DIV_2      : std_logic;

begin

  process
  begin
    wait until rising_edge(CLK);
    TIMER_1us <= '0';
    if TIMER_1us_COUNT = 0 then
       TIMER_1us_COUNT <= TIMER_1us_MAX;
       TIMER_1us <= '1';
    else
       TIMER_1us_COUNT <= TIMER_1us_COUNT - 1;
    end if;
    if RST = '1' then
       TIMER_1us_COUNT <= TIMER_1us_MAX;
       TIMER_1us <= '0';
    end if;
  end process;



  --file: ./example_7_edge_detect.py, line: 171
  --serial output port baud rate generator
  process
  begin
    wait until rising_edge(CLK);
    if BAUD_COUNT_10 = CLOCK_DIVIDER_10 then
      BAUD_COUNT_10 <= (others => '0');
      X16CLK_EN_10  <= '1';
    else
      BAUD_COUNT_10 <= BAUD_COUNT_10 + 1;
      X16CLK_EN_10  <= '0';
    end if;
    if RST = '1' then
      BAUD_COUNT_10 <= (others => '0');
      X16CLK_EN_10  <= '0';
    end if;
  end process;

  process
  begin
    wait until rising_edge(CLK);
    case STATE_10 is
      when IDLE =>
        if STREAM_9_STB = '1'  then
          STREAM_9_ACK <= '1';
          DATA_10 <= STREAM_9;
          STATE_10     <= WAIT_EN;
        end if;
      when WAIT_EN =>
        STREAM_9_ACK <= '0';
        if X16CLK_EN_10 = '1' then
          STATE_10 <= START;
        end if;
      when START =>
        if X16CLK_EN_10 = '1' then
          STATE_10 <= TX0;
        end if;
        TX <= '0'; 
      when TX0 =>
        if X16CLK_EN_10 = '1' then
          STATE_10 <= TX1;
        end if;
        TX <= DATA_10(0);
      when TX1 =>
        if X16CLK_EN_10 = '1' then
          STATE_10 <= TX2;
        end if;
        TX <= DATA_10(1);
      when TX2 =>
        if X16CLK_EN_10 = '1' then
          STATE_10 <= TX3;
        end if;
        TX <= DATA_10(2);
      when TX3 =>
        if X16CLK_EN_10 = '1' then
          STATE_10 <= TX4;
        end if;
        TX <= DATA_10(3);
      when TX4 =>
        if X16CLK_EN_10 = '1' then
          STATE_10 <= TX5;
        end if;
        TX <= DATA_10(4);
      when TX5 =>
        if X16CLK_EN_10 = '1' then
          STATE_10 <= TX6;
        end if;
        TX <= DATA_10(5);
      when TX6 =>
        if X16CLK_EN_10 = '1' then
          STATE_10 <= TX7;
        end if;
        TX <= DATA_10(6);
      when TX7 =>
        if X16CLK_EN_10 = '1' then
          STATE_10 <= STOP;
        end if;
        TX <= DATA_10(7);
      when STOP =>
        if X16CLK_EN_10 = '1' then
          STATE_10 <= IDLE;
        end if;
        TX <= '1';
      when others =>
        STATE_10 <= IDLE;
      end case;
    if RST = '1' then
      STREAM_9_ACK <= '0';
      STATE_10 <= IDLE;
    end if; 
  end process;
  --file: ./example_7_edge_detect.py, line: 171
  --STREAM 9 Printer(3)
  process
    variable CARRY_9 : std_logic_vector(4 downto 0);
  begin
    wait until rising_edge(CLK);
    case STATE_9 is
      when INPUT_A =>
        if STREAM_3_STB = '1' then
          STREAM_3_ACK <= '1';
          SIGN_9 <= STREAM_3(12);
          SHIFTER_9 <= (others => "0000");
          if STREAM_3(12) = '1' then
            BINARY_9 <= std_logic_vector(-signed(STREAM_3));
          else
            BINARY_9 <= STREAM_3;
          end if;
          COUNT_9 <= 12;
          STATE_9 <= SHIFT;
        end if;

      when SHIFT =>
        STREAM_3_ACK <= '0';
        CARRY_9 := (Others => '0');
        CARRY_9(0) := BINARY_9(12);
        for DIGIT in 0 to 3 loop
            case SHIFTER_9(DIGIT) is
                when "0101" =>
                  CARRY_9(DIGIT+1) := '1';
                  SHIFTER_9(DIGIT) <= "000" & CARRY_9(DIGIT);
                when "0110" =>
                  CARRY_9(DIGIT+1) := '1';
                  SHIFTER_9(DIGIT) <= "001" & CARRY_9(DIGIT);
                when "0111" =>
                  CARRY_9(DIGIT+1) := '1';
                  SHIFTER_9(DIGIT) <= "010" & CARRY_9(DIGIT);
                when "1000" =>
                  CARRY_9(DIGIT+1) := '1';
                  SHIFTER_9(DIGIT) <= "011" & CARRY_9(DIGIT);
                when others =>
                  CARRY_9(DIGIT+1) := '0';
                  SHIFTER_9(DIGIT) <= SHIFTER_9(DIGIT)(2 downto 0) & CARRY_9(DIGIT);
            end case;
        end loop;
        BINARY_9 <= BINARY_9(11 downto 0) & '0';
        if COUNT_9 = 0 then
          STATE_9 <= OUTPUT_SIGN;
          CURSOR_9 <= 3;
        else
          COUNT_9 <= COUNT_9 - 1;
        end if;

      when OUTPUT_SIGN =>
        if SIGN_9 = '1' then
          STREAM_9 <= "00101101";
          STREAM_9_STB <= '1';
          if STREAM_9_ACK = '1' then
            STREAM_9_STB <= '0';
            STATE_9 <= OUTPUT_Z;
          end if;
        else
          STATE_9 <= OUTPUT_Z;
        end if;

      when OUTPUT_Z =>
        STREAM_9_STB <= '1';
        STREAM_9 <= "0011" & SHIFTER_9(CURSOR_9);
        if STREAM_9_ACK = '1' then
          STREAM_9_STB <= '0';
          if CURSOR_9 = 0 then
            STATE_9 <= OUTPUT_NL;
          else
            CURSOR_9 <= CURSOR_9 - 1;
          end if;
        end if;

      when OUTPUT_NL =>
        STREAM_9_STB <= '1';
        STREAM_9 <= X"0A";
        if STREAM_9_ACK = '1' then
          STREAM_9_STB <= '0';
          STATE_9 <= INPUT_A;
        end if;

     end case;
     if RST = '1' then
       STREAM_9_STB <= '0';
       STREAM_3_ACK <= '0';
       STATE_9 <= INPUT_A;
     end if;
  end process;

  --file: ./example_7_edge_detect.py, line: 171
  --serial input port baud rate generator
  process
  begin
    wait until rising_edge(CLK);
    if BAUD_COUNT_0 = CLOCK_DIVIDER_0 then
      BAUD_COUNT_0 <= (others => '0');
      X16CLK_EN_0  <= '1';
    else
      BAUD_COUNT_0 <= BAUD_COUNT_0 + 1;
      X16CLK_EN_0  <= '0';
    end if;
    if RST = '1' then
      BAUD_COUNT_0 <= (others => '0');
      X16CLK_EN_0  <= '0';
    end if;
  end process;

  --synchronise and filter
  process
  begin
    wait until rising_edge(CLK);
    SERIAL_DEGLITCH_0 <= SERIAL_DEGLITCH_0(0) & RX;
    if X16CLK_EN_0 = '1' then
      if SERIAL_DEGLITCH_0(1) = '1' then
        if COUNT_0 = 3 then
          INT_SERIAL_0 <= '1';
        else 
          COUNT_0 <= COUNT_0 + 1;
        end if;
      else
        if COUNT_0 = 0 then
          INT_SERIAL_0 <= '0';
        else
          COUNT_0 <= COUNT_0 - 1;
        end if;
      end if;
    end if;
  end process;

  process
  begin
    wait until rising_edge(CLK);
	 if X16CLK_EN_0 = '1' then 
      if BIT_SPACING_0 = 15 then
        BIT_SPACING_0 <= 0;
      else
        BIT_SPACING_0 <= BIT_SPACING_0 + 1;
      end if;
    end if;
    case STATE_0 is
      when IDLE =>
        BIT_SPACING_0 <= 0;
        if X16CLK_EN_0 = '1' and INT_SERIAL_0 = '0' then
          STATE_0 <= START;
        end if;
      when START =>
        if X16CLK_EN_0 = '1' and BIT_SPACING_0 = 7 then
          BIT_SPACING_0 <= 0;
          STATE_0 <= RX0;
        end if; 
      when RX0 =>
        if X16CLK_EN_0 = '1' and BIT_SPACING_0 = 15 then
          STREAM_0(0) <= INT_SERIAL_0;
          BIT_SPACING_0 <= 0;
          STATE_0 <= RX1;
        end if;
      when RX1 =>
        if X16CLK_EN_0 = '1' and BIT_SPACING_0 = 15 then
          STREAM_0(1) <= INT_SERIAL_0;
          BIT_SPACING_0 <= 0;
          STATE_0 <= RX2;
        end if;
      when RX2 =>
        if X16CLK_EN_0 = '1' and BIT_SPACING_0 = 15 then
          STREAM_0(2) <= INT_SERIAL_0;
          BIT_SPACING_0 <= 0;
          STATE_0 <= RX3;
        end if;
      when RX3 =>
        if X16CLK_EN_0 = '1' and BIT_SPACING_0 = 15 then
          STREAM_0(3) <= INT_SERIAL_0;
          BIT_SPACING_0 <= 0;
          STATE_0 <= RX4;
        end if;
      when RX4 =>
        if X16CLK_EN_0 = '1' and BIT_SPACING_0 = 15 then
          STREAM_0(4) <= INT_SERIAL_0;
          BIT_SPACING_0 <= 0;
          STATE_0 <= RX5;
        end if;
      when RX5 =>
        if X16CLK_EN_0 = '1' and BIT_SPACING_0 = 15 then
          STREAM_0(5) <= INT_SERIAL_0;
          BIT_SPACING_0 <= 0;
          STATE_0 <= RX6;
        end if;
      when RX6 =>
        if X16CLK_EN_0 = '1' and BIT_SPACING_0 = 15 then
          STREAM_0(6) <= INT_SERIAL_0;
          BIT_SPACING_0 <= 0;
          STATE_0 <= RX7;
        end if;
      when RX7 =>
        if X16CLK_EN_0 = '1' and BIT_SPACING_0 = 15 then
          STREAM_0(7) <= INT_SERIAL_0;
          BIT_SPACING_0 <= 0;
          STATE_0 <= STOP;
        end if;
      when STOP =>
        if X16CLK_EN_0 = '1' and BIT_SPACING_0 = 15 then
            BIT_SPACING_0 <= 0;
            STATE_0 <= OUTPUT_DATA;
        end if;
      when OUTPUT_DATA =>
          STREAM_0_STB <= '1';
          if STREAM_0_ACK = '1' then
            STREAM_0_STB <= '0';
            STATE_0 <= IDLE;
          end if;
      when others =>
        STATE_0 <= IDLE;
    end case;
    if RST = '1' then
      STATE_0 <= IDLE;
      STREAM_0_STB <= '0';
    end if; 
  end process;

  --file: /home/jon/streams/streams/__init__.py, line: 185
  --STREAM 7 Array()
    RAMARRAY_7 : RAMARRAY generic map(
      DEPTH => 384,
      WIDTH => 13
    )
    port map(
      CLK             => CLK,
      RST             => RST,
      ADDRESS_IN      => STREAM_4,
      ADDRESS_IN_STB  => STREAM_4_STB,
      ADDRESS_IN_ACK  => STREAM_4_ACK,
      DATA_IN         => STREAM_5,
      DATA_IN_STB     => STREAM_5_STB,
      DATA_IN_ACK     => STREAM_5_ACK,
      ADDRESS_OUT     => STREAM_6,
      ADDRESS_OUT_STB => STREAM_6_STB,
      ADDRESS_OUT_ACK => STREAM_6_ACK,
      DATA_OUT        => STREAM_7,
      DATA_OUT_STB    => STREAM_7_STB,
      DATA_OUT_ACK    => STREAM_7_ACK
    );

  -- process
  process
    variable INSTRUCTION : std_logic_vector(21 downto 0);
  begin
    wait until rising_edge(CLK);
    INSTRUCTION := INSTRUCTIONS_8(to_integer(PC_8));
    OPERATION_8 <= INSTRUCTION(21 downto 17);
    SRCA_8      <= INSTRUCTION(16 downto 13);
    SRCB_8      <= INSTRUCTION(3 downto 0);
    IMMEDIATE_8 <= INSTRUCTION(12 downto 0);
  end process;

  process
    variable REGA    : std_logic_vector(12 downto 0);
    variable REGB    : std_logic_vector(12 downto 0);
    variable DEST    : std_logic_vector(3 downto 0);
    variable RESULT  : std_logic_vector(12 downto 0);
    variable REGISTERS_EN  : std_logic;
    variable MODULO  : unsigned(12 downto 0);
    variable FLAG_EQ : std_logic;
    variable FLAG_NE : std_logic;
    variable FLAG_GT : std_logic;
    variable FLAG_GE : std_logic;
  begin
    wait until rising_edge(CLK);
    REGISTERS_EN := '0';
    case STATE_8 is
      when STALL =>
        PC_8 <= PC_8 + 1;
        STATE_8 <= EXECUTE;
      when EXECUTE =>
        REGA := REGISTERS_8(to_integer(unsigned(SRCA_8)));
        REGB := REGISTERS_8(to_integer(unsigned(SRCB_8)));
        DEST := SRCA_8;
        RESULT := REGA;
        PC_8 <= PC_8 + 1;

        --share comparator logic
        if REGA = REGB then
          FLAG_EQ := '1';
        else
          FLAG_EQ := '0';
        end if;

        if signed(REGA) > signed(REGB) then
          FLAG_GT := '1';
        else
          FLAG_GT := '0';
        end if;

        FLAG_NE := not FLAG_EQ;
        FLAG_GE := FLAG_GT or FLAG_EQ;

        --execute instructions
        case OPERATION_8 is
          when OP_MOVE_8 => 
            RESULT := REGB;
            REGISTERS_EN := '1';
          when OP_MUL_8  => 
            RESULT := STD_RESIZE( MUL(REGA, REGB), 13);
            REGISTERS_EN := '1';
          when OP_ADD_8  => 
            RESULT := STD_RESIZE( ADD(REGA, REGB), 13);
            REGISTERS_EN := '1';
          when OP_SUB_8  => 
            RESULT := STD_RESIZE( SUB(REGA, REGB), 13);
            REGISTERS_EN := '1';
          when OP_BAND_8 => 
            RESULT := STD_RESIZE(BAND(REGA, REGB), 13);
            REGISTERS_EN := '1';
          when OP_BOR_8  => 
            RESULT := STD_RESIZE( BOR(REGA, REGB), 13);
            REGISTERS_EN := '1';
          when OP_BXOR_8 => 
            RESULT := STD_RESIZE(BXOR(REGA, REGB), 13);
            REGISTERS_EN := '1';
          when OP_SL_8   => 
            RESULT := STD_RESIZE(  SL(REGA, REGB), 13);
            REGISTERS_EN := '1';
          when OP_SR_8   => 
            RESULT := STD_RESIZE(  SR(REGA, REGB), 13);
            REGISTERS_EN := '1';
          when OP_EQ_8   => 
            RESULT := (others => FLAG_EQ);
            REGISTERS_EN := '1';
          when OP_NE_8   => 
            RESULT := (others => FLAG_NE);
            REGISTERS_EN := '1';
          when OP_GT_8   => 
            RESULT := (others => FLAG_GT);
            REGISTERS_EN := '1';
          when OP_GE_8   => 
            RESULT := (others => FLAG_GE);
            REGISTERS_EN := '1';
          when OP_IMM_8  => 
            RESULT := IMMEDIATE_8;
            REGISTERS_EN := '1';
          when OP_JMP_8 =>
            STATE_8 <= STALL;
            PC_8 <= resize(unsigned(IMMEDIATE_8), 10);
          when OP_JMPF_8 =>
            if ZERO_8 = '1' then
              STATE_8 <= STALL;
              PC_8 <= resize(unsigned(IMMEDIATE_8), 10);
            end if;
          when OP_WAIT_US_8 =>
            STATE_8 <= WAIT_US;
            PC_8 <= PC_8;

          when OP_WRITE_4_8 =>
            STATE_8 <= WRITE_STREAM_4;
            DEST := SRCA_8;
            PC_8 <= PC_8;
          when OP_WRITE_5_8 =>
            STATE_8 <= WRITE_STREAM_5;
            DEST := SRCA_8;
            PC_8 <= PC_8;
          when OP_WRITE_6_8 =>
            STATE_8 <= WRITE_STREAM_6;
            DEST := SRCA_8;
            PC_8 <= PC_8;
          when OP_WRITE_3_8 =>
            STATE_8 <= WRITE_STREAM_3;
            DEST := SRCA_8;
            PC_8 <= PC_8;
          when OP_READ_1_8 =>
            STATE_8 <= READ_STREAM_1;
            PC_8 <= PC_8;
          when OP_READ_7_8 =>
            STATE_8 <= READ_STREAM_7;
            PC_8 <= PC_8;
          when others => null;
        end case;

        --write back results
        if RESULT = "0000000000000" then
          ZERO_8 <= '1';
        else
          ZERO_8 <= '0';
        end if;

      when READ_STREAM_1 =>
        if STREAM_1_STB = '1' then
          STREAM_1_ACK <= '1';
          REGISTERS_EN := '1';
          RESULT := STD_RESIZE(STREAM_1, 13);
          STATE_8 <= ACK_STREAM_1;
        end if;
      when ACK_STREAM_1 =>
        STREAM_1_ACK <= '0';
        STATE_8 <= EXECUTE;
        PC_8 <= PC_8 + 1;
      when READ_STREAM_7 =>
        if STREAM_7_STB = '1' then
          STREAM_7_ACK <= '1';
          REGISTERS_EN := '1';
          RESULT := STD_RESIZE(STREAM_7, 13);
          STATE_8 <= ACK_STREAM_7;
        end if;
      when ACK_STREAM_7 =>
        STREAM_7_ACK <= '0';
        STATE_8 <= EXECUTE;
        PC_8 <= PC_8 + 1;
      when WRITE_STREAM_4 =>
        STREAM_4_STB <= '1';
        STREAM_4 <= STD_RESIZE(REGA, 13);
        if STREAM_4_ACK = '1' then
          STREAM_4_STB <= '0';
          STATE_8 <= EXECUTE;
          PC_8 <= PC_8 + 1;
        end if;
      when WRITE_STREAM_5 =>
        STREAM_5_STB <= '1';
        STREAM_5 <= STD_RESIZE(REGA, 13);
        if STREAM_5_ACK = '1' then
          STREAM_5_STB <= '0';
          STATE_8 <= EXECUTE;
          PC_8 <= PC_8 + 1;
        end if;
      when WRITE_STREAM_6 =>
        STREAM_6_STB <= '1';
        STREAM_6 <= STD_RESIZE(REGA, 13);
        if STREAM_6_ACK = '1' then
          STREAM_6_STB <= '0';
          STATE_8 <= EXECUTE;
          PC_8 <= PC_8 + 1;
        end if;
      when WRITE_STREAM_3 =>
        STREAM_3_STB <= '1';
        STREAM_3 <= STD_RESIZE(REGA, 13);
        if STREAM_3_ACK = '1' then
          STREAM_3_STB <= '0';
          STATE_8 <= EXECUTE;
          PC_8 <= PC_8 + 1;
        end if;
      when WAIT_US =>
        if TIMER_1uS = '1'then
          PC_8 <= PC_8 + 1;
          STATE_8 <= EXECUTE;
        end if;
    end case;

    if RST = '1' then
      STATE_8 <= STALL;
      PC_8 <= "0000000000";
      STREAM_1_ACK <= '0';
      STREAM_7_ACK <= '0';
      STREAM_4_STB <= '0';
      STREAM_5_STB <= '0';
      STREAM_6_STB <= '0';
      STREAM_3_STB <= '0';
    end if;
    if REGISTERS_EN = '1' then
      REGISTERS_8(to_integer(unsigned(DEST))) <= RESULT;
    end if;
  end process;


  -- process
  process
    variable INSTRUCTION : std_logic_vector(16 downto 0);
  begin
    wait until rising_edge(CLK);
    INSTRUCTION := INSTRUCTIONS_2(to_integer(PC_2));
    OPERATION_2 <= INSTRUCTION(16 downto 12);
    SRCA_2      <= INSTRUCTION(11 downto 9);
    SRCB_2      <= INSTRUCTION(2 downto 0);
    IMMEDIATE_2 <= INSTRUCTION(8 downto 0);
  end process;

  process
    variable REGA    : std_logic_vector(8 downto 0);
    variable REGB    : std_logic_vector(8 downto 0);
    variable DEST    : std_logic_vector(2 downto 0);
    variable RESULT  : std_logic_vector(8 downto 0);
    variable REGISTERS_EN  : std_logic;
    variable MODULO  : unsigned(8 downto 0);
    variable FLAG_EQ : std_logic;
    variable FLAG_NE : std_logic;
    variable FLAG_GT : std_logic;
    variable FLAG_GE : std_logic;
  begin
    wait until rising_edge(CLK);
    REGISTERS_EN := '0';
    case STATE_2 is
      when STALL =>
        PC_2 <= PC_2 + 1;
        STATE_2 <= EXECUTE;
      when EXECUTE =>
        REGA := REGISTERS_2(to_integer(unsigned(SRCA_2)));
        REGB := REGISTERS_2(to_integer(unsigned(SRCB_2)));
        DEST := SRCA_2;
        RESULT := REGA;
        PC_2 <= PC_2 + 1;

        --share comparator logic
        if REGA = REGB then
          FLAG_EQ := '1';
        else
          FLAG_EQ := '0';
        end if;

        if signed(REGA) > signed(REGB) then
          FLAG_GT := '1';
        else
          FLAG_GT := '0';
        end if;

        FLAG_NE := not FLAG_EQ;
        FLAG_GE := FLAG_GT or FLAG_EQ;

        --execute instructions
        case OPERATION_2 is
          when OP_MOVE_2 => 
            RESULT := REGB;
            REGISTERS_EN := '1';
          when OP_MUL_2  => 
            RESULT := STD_RESIZE( MUL(REGA, REGB), 9);
            REGISTERS_EN := '1';
          when OP_ADD_2  => 
            RESULT := STD_RESIZE( ADD(REGA, REGB), 9);
            REGISTERS_EN := '1';
          when OP_SUB_2  => 
            RESULT := STD_RESIZE( SUB(REGA, REGB), 9);
            REGISTERS_EN := '1';
          when OP_BAND_2 => 
            RESULT := STD_RESIZE(BAND(REGA, REGB), 9);
            REGISTERS_EN := '1';
          when OP_BOR_2  => 
            RESULT := STD_RESIZE( BOR(REGA, REGB), 9);
            REGISTERS_EN := '1';
          when OP_BXOR_2 => 
            RESULT := STD_RESIZE(BXOR(REGA, REGB), 9);
            REGISTERS_EN := '1';
          when OP_SL_2   => 
            RESULT := STD_RESIZE(  SL(REGA, REGB), 9);
            REGISTERS_EN := '1';
          when OP_SR_2   => 
            RESULT := STD_RESIZE(  SR(REGA, REGB), 9);
            REGISTERS_EN := '1';
          when OP_EQ_2   => 
            RESULT := (others => FLAG_EQ);
            REGISTERS_EN := '1';
          when OP_NE_2   => 
            RESULT := (others => FLAG_NE);
            REGISTERS_EN := '1';
          when OP_GT_2   => 
            RESULT := (others => FLAG_GT);
            REGISTERS_EN := '1';
          when OP_GE_2   => 
            RESULT := (others => FLAG_GE);
            REGISTERS_EN := '1';
          when OP_IMM_2  => 
            RESULT := IMMEDIATE_2;
            REGISTERS_EN := '1';
          when OP_JMP_2 =>
            STATE_2 <= STALL;
            PC_2 <= resize(unsigned(IMMEDIATE_2), 6);
          when OP_JMPF_2 =>
            if ZERO_2 = '1' then
              STATE_2 <= STALL;
              PC_2 <= resize(unsigned(IMMEDIATE_2), 6);
            end if;
          when OP_WAIT_US_2 =>
            STATE_2 <= WAIT_US;
            PC_2 <= PC_2;

          when OP_WRITE_1_2 =>
            STATE_2 <= WRITE_STREAM_1;
            DEST := SRCA_2;
            PC_2 <= PC_2;
          when OP_READ_0_2 =>
            STATE_2 <= READ_STREAM_0;
            PC_2 <= PC_2;
          when others => null;
        end case;

        --write back results
        if RESULT = "000000000" then
          ZERO_2 <= '1';
        else
          ZERO_2 <= '0';
        end if;

      when READ_STREAM_0 =>
        if STREAM_0_STB = '1' then
          STREAM_0_ACK <= '1';
          REGISTERS_EN := '1';
          RESULT := STD_RESIZE(STREAM_0, 9);
          STATE_2 <= ACK_STREAM_0;
        end if;
      when ACK_STREAM_0 =>
        STREAM_0_ACK <= '0';
        STATE_2 <= EXECUTE;
        PC_2 <= PC_2 + 1;
      when WRITE_STREAM_1 =>
        STREAM_1_STB <= '1';
        STREAM_1 <= STD_RESIZE(REGA, 9);
        if STREAM_1_ACK = '1' then
          STREAM_1_STB <= '0';
          STATE_2 <= EXECUTE;
          PC_2 <= PC_2 + 1;
        end if;
      when WAIT_US =>
        if TIMER_1uS = '1'then
          PC_2 <= PC_2 + 1;
          STATE_2 <= EXECUTE;
        end if;
    end case;

    if RST = '1' then
      STATE_2 <= STALL;
      PC_2 <= "000000";
      STREAM_0_ACK <= '0';
      STREAM_1_STB <= '0';
    end if;
    if REGISTERS_EN = '1' then
      REGISTERS_2(to_integer(unsigned(DEST))) <= RESULT;
    end if;
  end process;



end architecture RTL;