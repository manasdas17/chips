-- generated by python streams library
-- date generated  : UTC 2010-10-17 19:16:59
-- platform        : linux2
-- python version  : 2.6.5 (r265:79063, Apr 16 2010, 13:57:41) 
--                   [GCC 4.4.3]
-- streams version : 0.1

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity STREAMS_VHDL_MODEL is

end entity STREAMS_VHDL_MODEL;

architecture RTL of STREAMS_VHDL_MODEL is


  --returns the greater of the two parameters
  function MAX(
    A : integer;
    B : integer) return integer is
  begin
    if A > B then
      return A;
    else
      return B;
    end if;
  end MAX;

  --returns a std_logic_vector sum of the two parameters
  function ADD(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'length, B'length) + 1) + 
      resize(signed(B), MAX(A'length, B'length) + 1));
    end ADD;

  --returns a std_logic_vector product of the two parameters
  function MUL(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      signed(A) *
      signed(B));
    end MUL;

  --returns a std_logic_vector difference of the two parameters
  function SUB(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'length, B'length) + 1) - 
      resize(signed(B), MAX(A'length, B'length) + 1));
  end SUB;

  --returns A shifted right (arithmetic) by A
  function SR(
    A  : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(shift_right(signed(A), to_integer(signed(B))));
  end SR;

  --returns A shifted left by B
  function SL(
    A  : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
        shift_left(
           resize(signed(A), A'length + (2**(B'length-1))-1),
           to_integer(signed(B))
       )
   );
  end SL;

  --returns bitwise and of A and B
  --(A and B are resized to the length of the larger first)
  function BAND(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) and
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BAND;

  --returns bitwise or of A and B
  --(A and B are resized to the length of the larger first)
  function BOR(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) or
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BOR;

  --returns bitwise xor of A and B
  --(A and B are resized to the length of the larger first)
  function BXOR(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) xor
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BXOR;

  --equality comparison of A and B
  --(A and B are resized to the length of the larger first)
  function EQ(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) =
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end EQ;

  --inequality comparison of A and B
  --(A and B are resized to the length of the larger first)
  function NE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
    resize(signed(A), MAX(A'LENGTH, B'LENGTH)) /=
    resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end NE;

  --greater than comparison of A and B
  --(A and B are resized to the length of the larger first)
  function GT(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) >
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end GT;

  --greater than or equal comparison of A and B
  --(A and B are resized to the length of the larger first)
  function GE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) >=
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end GE;

  --less than comparison of A and B
  --(A and B are resized to the length of the larger first)
  function LT(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) <
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end LT;

  --less than or equal comparison of A and B
  --(A and B are resized to the length of the larger first)
  function LE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) <=
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end LE;

  --resize A to B bits
  function STD_RESIZE(
    A : std_logic_vector; 
    B : integer) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), B));
  end STD_RESIZE;

  --print a value
  procedure PRINT(
    A : std_logic_vector) is
    variable output_line : line;
  begin
    write(output_line, to_integer(signed(A)));
    writeline(output, output_line);
  end PRINT;

  type BINARY_STATE_TYPE is (BINARY_INPUT, BINARY_OUTPUT);
  type UNARY_STATE_TYPE is (UNARY_INPUT, UNARY_OUTPUT);
  type TEE_STATE_TYPE is (TEE_INPUT_A, TEE_WAIT_YZ, TEE_WAIT_Y, TEE_WAIT_Z);
  type DIVIDER_STATE_TYPE is (READ_A_B, DIVIDE_1, DIVIDE_2, WRITE_Z);
  type SERIAL_IN_STATE_TYPE is (IDLE, START, RX0, RX1, RX2, RX3, RX4, RX5, RX6, RX7, STOP, OUTPUT_DATA);
  type SERIAL_OUT_STATE_TYPE is (IDLE, START, WAIT_EN, TX0, TX1, TX2, TX3, TX4, TX5, TX6, TX7, STOP);
  type FORMATER_STATE_TYPE is (INPUT_A, SHIFT, OUTPUT_SIGN, OUTPUT_Z);
  type HEX_FORMATER_STATE_TYPE is (INPUT_A, OUTPUT_SIGN, OUTPUT_DIGITS);

  signal CLK : std_logic;
  signal RST : std_logic;
  signal STREAM_0       : std_logic_vector(19 downto 0);
  signal STREAM_0_STB   : std_logic;
  signal STREAM_0_ACK   : std_logic;
  signal STREAM_2       : std_logic_vector(19 downto 0);
  signal STREAM_2_STB   : std_logic;
  signal STREAM_2_ACK   : std_logic;
  signal STREAM_8       : std_logic_vector(19 downto 0);
  signal STREAM_8_STB   : std_logic;
  signal STREAM_8_ACK   : std_logic;
  constant OP_ADD_9 : std_logic_vector(4 downto 0) := "00000";
  constant OP_SUB_9 : std_logic_vector(4 downto 0) := "00001";
  constant OP_MUL_9 : std_logic_vector(4 downto 0) := "00010";
  constant OP_DIV_9 : std_logic_vector(4 downto 0) := "00011";
  constant OP_BAND_9 : std_logic_vector(4 downto 0) := "00100";
  constant OP_BOR_9 : std_logic_vector(4 downto 0) := "00101";
  constant OP_BXOR_9 : std_logic_vector(4 downto 0) := "00110";
  constant OP_SL_9 : std_logic_vector(4 downto 0) := "00111";
  constant OP_SR_9 : std_logic_vector(4 downto 0) := "01000";
  constant OP_EQ_9 : std_logic_vector(4 downto 0) := "01001";
  constant OP_NE_9 : std_logic_vector(4 downto 0) := "01010";
  constant OP_GT_9 : std_logic_vector(4 downto 0) := "01011";
  constant OP_GE_9 : std_logic_vector(4 downto 0) := "01100";
  constant OP_JMP_9 : std_logic_vector(4 downto 0) := "01101";
  constant OP_JMPF_9 : std_logic_vector(4 downto 0) := "01110";
  constant OP_IMM_9 : std_logic_vector(4 downto 0) := "01111";
  constant OP_MOVE_9 : std_logic_vector(4 downto 0) := "10000";
  constant WAIT_9 : std_logic_vector(4 downto 0) := "10001";
  constant OP_MOD_9 : std_logic_vector(4 downto 0) := "10010";
  constant OP_READ_5_9 : std_logic_vector(4 downto 0) := "10011";
  constant OP_READ_7_9 : std_logic_vector(4 downto 0) := "10100";
  constant OP_READ_1_9 : std_logic_vector(4 downto 0) := "10101";
  constant OP_READ_3_9 : std_logic_vector(4 downto 0) := "10110";
  constant OP_WRITE_0_9 : std_logic_vector(4 downto 0) := "10111";
  constant OP_WRITE_2_9 : std_logic_vector(4 downto 0) := "11000";
  constant OP_WRITE_8_9 : std_logic_vector(4 downto 0) := "11001";
  type PROCESS_9_STATE_TYPE is (STALL, EXECUTE, DIVIDE_0, DIVIDE_1, DIVIDE_2, READ_STREAM_5, ACK_STREAM_5, READ_STREAM_7, ACK_STREAM_7, READ_STREAM_1, ACK_STREAM_1, READ_STREAM_3, ACK_STREAM_3, WRITE_STREAM_0, WRITE_STREAM_2, WRITE_STREAM_8);
  type INSTRUCTIONS_TYPE_9  is array (0 to 227) of std_logic_vector(29 downto 0);
  type REGISTERS_TYPE_9     is array (0 to 16) of std_logic_vector(19 downto 0);
  signal STATE_9        : PROCESS_9_STATE_TYPE;
  signal REGISTERS_9    : REGISTERS_TYPE_9;
  signal PC_9           : unsigned(7 downto 0);
  signal OPERATION_9    : std_logic_vector(4 downto 0);
  signal SRCA_9         : std_logic_vector(4 downto 0);
  signal SRCB_9         : std_logic_vector(4 downto 0);
  signal IMMEDIATE_9    : std_logic_vector(19 downto 0);
  signal ZERO_9         : std_logic;
  signal A_9            : std_logic_vector(19 downto 0);
  signal B_9            : std_logic_vector(19 downto 0);
  signal QUOTIENT_9     : std_logic_vector(19 downto 0);
  signal SHIFTER_9      : std_logic_vector(19 downto 0);
  signal REMAINDER_9    : std_logic_vector(19 downto 0);
  signal COUNT_9        : integer range 0 to 20;
  signal SIGN_9         : std_logic;
  signal INSTRUCTIONS_9 : INSTRUCTIONS_TYPE_9 := (
0 => OP_IMM_9 & "00001" & "00000000000000000000", -- file: ./example_5.py line: 42
1 => OP_IMM_9 & "00010" & "00000000000000000000", -- file: ./example_5.py line: 43
2 => OP_IMM_9 & "00011" & "00000000000000000000", -- file: ./example_5.py line: 52
3 => OP_IMM_9 & "00100" & "00000000000000000000", -- file: ./example_5.py line: 54
4 => OP_IMM_9 & "00101" & "00000000000000000000", -- file: ./example_5.py line: 55
5 => OP_IMM_9 & "00110" & "00000000000000000000", -- file: ./example_5.py line: 56
6 => OP_IMM_9 & "00111" & "00000000000000000000", -- file: ./example_5.py line: 57
7 => OP_IMM_9 & "01000" & "00000000000000000000", -- file: ./example_5.py line: 58
8 => OP_IMM_9 & "01001" & "00000000000000000000", -- file: ./example_5.py line: 45
9 => OP_IMM_9 & "01010" & "00000000000000000000", -- file: ./example_5.py line: 59
10 => OP_IMM_9 & "01011" & "00000000000000000000", -- file: ./example_5.py line: 60
11 => OP_IMM_9 & "01100" & "00000000000000000000", -- file: ./example_5.py line: 46
12 => OP_READ_5_9 & "00001" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 82
13 => OP_READ_7_9 & "00010" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 82
14 => OP_MOVE_9 & "01101" & "00000000000000000001", -- file: ./example_5.py line: 42
15 => OP_IMM_9 & "01110" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
16 => OP_SUB_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 116
17 => OP_MOVE_9 & "00011" & "00000000000000001101", -- file: /home/jon/streams/streams/instruction.py line: 239
18 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
19 => OP_MOVE_9 & "01110" & "00000000000000000011", -- file: ./example_5.py line: 52
20 => OP_GT_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 129
21 => OP_JMPF_9 & "01101" & "00000000000000011011", -- file: None line: None
22 => OP_IMM_9 & "01101" & "00000000001000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
23 => OP_MOVE_9 & "01110" & "00000000000000000011", -- file: ./example_5.py line: 52
24 => OP_SUB_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 132
25 => OP_MOVE_9 & "00011" & "00000000000000001101", -- file: /home/jon/streams/streams/instruction.py line: 239
26 => OP_JMP_9 & "00000" & "00000000000000011011", -- file: None line: None
27 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
28 => OP_MOVE_9 & "01110" & "00000000000000000010", -- file: ./example_5.py line: 43
29 => OP_GT_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 129
30 => OP_JMPF_9 & "01101" & "00000000000000101001", -- file: None line: None
31 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
32 => OP_MOVE_9 & "01110" & "00000000000000000010", -- file: ./example_5.py line: 43
33 => OP_SUB_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 132
34 => OP_WRITE_0_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 180
35 => OP_READ_1_9 & "00100" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 82
36 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
37 => OP_MOVE_9 & "01110" & "00000000000000000100", -- file: ./example_5.py line: 54
38 => OP_SUB_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 132
39 => OP_MOVE_9 & "00100" & "00000000000000001101", -- file: /home/jon/streams/streams/instruction.py line: 239
40 => OP_JMP_9 & "00000" & "00000000000000101111", -- file: None line: None
41 => OP_IMM_9 & "01101" & "00000000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 110
42 => OP_JMPF_9 & "01101" & "00000000000000101111", -- file: None line: None
43 => OP_MOVE_9 & "01101" & "00000000000000000010", -- file: ./example_5.py line: 43
44 => OP_WRITE_0_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 180
45 => OP_READ_1_9 & "00100" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 82
46 => OP_JMP_9 & "00000" & "00000000000000101111", -- file: None line: None
47 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
48 => OP_MOVE_9 & "01110" & "00000000000000000010", -- file: ./example_5.py line: 43
49 => OP_GT_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 129
50 => OP_JMPF_9 & "01101" & "00000000000000111011", -- file: None line: None
51 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
52 => OP_MOVE_9 & "01110" & "00000000000000000010", -- file: ./example_5.py line: 43
53 => OP_SUB_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 132
54 => OP_IMM_9 & "01110" & "00000000000010000000", -- file: /home/jon/streams/streams/instruction.py line: 110
55 => OP_ADD_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 115
56 => OP_WRITE_0_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 180
57 => OP_READ_1_9 & "00101" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 82
58 => OP_JMP_9 & "00000" & "00000000000001000011", -- file: None line: None
59 => OP_IMM_9 & "01101" & "00000000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 110
60 => OP_JMPF_9 & "01101" & "00000000000001000011", -- file: None line: None
61 => OP_MOVE_9 & "01101" & "00000000000000000010", -- file: ./example_5.py line: 43
62 => OP_IMM_9 & "01110" & "00000000000010000000", -- file: /home/jon/streams/streams/instruction.py line: 110
63 => OP_ADD_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 115
64 => OP_WRITE_0_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 180
65 => OP_READ_1_9 & "00101" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 82
66 => OP_JMP_9 & "00000" & "00000000000001000011", -- file: None line: None
67 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
68 => OP_MOVE_9 & "01110" & "00000000000000000011", -- file: ./example_5.py line: 52
69 => OP_GT_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 129
70 => OP_JMPF_9 & "01101" & "00000000000001010001", -- file: None line: None
71 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
72 => OP_MOVE_9 & "01110" & "00000000000000000011", -- file: ./example_5.py line: 52
73 => OP_SUB_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 132
74 => OP_WRITE_0_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 180
75 => OP_READ_1_9 & "00110" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 82
76 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
77 => OP_MOVE_9 & "01110" & "00000000000000000110", -- file: ./example_5.py line: 56
78 => OP_SUB_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 132
79 => OP_MOVE_9 & "00110" & "00000000000000001101", -- file: /home/jon/streams/streams/instruction.py line: 239
80 => OP_JMP_9 & "00000" & "00000000000001010111", -- file: None line: None
81 => OP_IMM_9 & "01101" & "00000000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 110
82 => OP_JMPF_9 & "01101" & "00000000000001010111", -- file: None line: None
83 => OP_MOVE_9 & "01101" & "00000000000000000011", -- file: ./example_5.py line: 52
84 => OP_WRITE_0_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 180
85 => OP_READ_1_9 & "00110" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 82
86 => OP_JMP_9 & "00000" & "00000000000001010111", -- file: None line: None
87 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
88 => OP_MOVE_9 & "01110" & "00000000000000000011", -- file: ./example_5.py line: 52
89 => OP_GT_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 129
90 => OP_JMPF_9 & "01101" & "00000000000001100011", -- file: None line: None
91 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
92 => OP_MOVE_9 & "01110" & "00000000000000000011", -- file: ./example_5.py line: 52
93 => OP_SUB_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 132
94 => OP_IMM_9 & "01110" & "00000000000010000000", -- file: /home/jon/streams/streams/instruction.py line: 110
95 => OP_ADD_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 115
96 => OP_WRITE_0_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 180
97 => OP_READ_1_9 & "00111" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 82
98 => OP_JMP_9 & "00000" & "00000000000001101011", -- file: None line: None
99 => OP_IMM_9 & "01101" & "00000000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 110
100 => OP_JMPF_9 & "01101" & "00000000000001101011", -- file: None line: None
101 => OP_MOVE_9 & "01101" & "00000000000000000011", -- file: ./example_5.py line: 52
102 => OP_IMM_9 & "01110" & "00000000000010000000", -- file: /home/jon/streams/streams/instruction.py line: 110
103 => OP_ADD_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 115
104 => OP_WRITE_0_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 180
105 => OP_READ_1_9 & "00111" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 82
106 => OP_JMP_9 & "00000" & "00000000000001101011", -- file: None line: None
107 => OP_MOVE_9 & "01101" & "00000000000000000100", -- file: ./example_5.py line: 54
108 => OP_IMM_9 & "01110" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
109 => OP_MUL_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 117
110 => OP_IMM_9 & "01110" & "00000000000000001001", -- file: /home/jon/streams/streams/instruction.py line: 110
111 => OP_MOVE_9 & "01111" & "00000000000000000101", -- file: ./example_5.py line: 55
112 => OP_IMM_9 & "10000" & "11111111111111111111", -- file: /home/jon/streams/streams/instruction.py line: 110
113 => OP_MUL_9 & "01111" & "00000000000000010000", -- file: /home/jon/streams/streams/instruction.py line: 117
114 => OP_IMM_9 & "10000" & "00000000000000001001", -- file: /home/jon/streams/streams/instruction.py line: 110
115 => OP_SR_9 & "01111" & "00000000000000010000", -- file: /home/jon/streams/streams/instruction.py line: 123
116 => OP_MOVE_9 & "10000" & "00000000000000000111", -- file: ./example_5.py line: 57
117 => OP_MUL_9 & "01111" & "00000000000000010000", -- file: /home/jon/streams/streams/instruction.py line: 117
118 => OP_ADD_9 & "01110" & "00000000000000001111", -- file: /home/jon/streams/streams/instruction.py line: 131
119 => OP_SR_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 123
120 => OP_IMM_9 & "01110" & "00000000000000001001", -- file: /home/jon/streams/streams/instruction.py line: 110
121 => OP_SR_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 123
122 => OP_MOVE_9 & "01000" & "00000000000000001101", -- file: /home/jon/streams/streams/instruction.py line: 239
123 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
124 => OP_MOVE_9 & "01110" & "00000000000000001000", -- file: ./example_5.py line: 58
125 => OP_GT_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 129
126 => OP_JMPF_9 & "01101" & "00000000000010001001", -- file: None line: None
127 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
128 => OP_MOVE_9 & "01110" & "00000000000000001000", -- file: ./example_5.py line: 58
129 => OP_SUB_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 132
130 => OP_WRITE_2_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 180
131 => OP_READ_3_9 & "01001" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 82
132 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
133 => OP_MOVE_9 & "01110" & "00000000000000001001", -- file: ./example_5.py line: 45
134 => OP_SUB_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 132
135 => OP_MOVE_9 & "01001" & "00000000000000001101", -- file: /home/jon/streams/streams/instruction.py line: 239
136 => OP_JMP_9 & "00000" & "00000000000010001111", -- file: None line: None
137 => OP_IMM_9 & "01101" & "00000000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 110
138 => OP_JMPF_9 & "01101" & "00000000000010001111", -- file: None line: None
139 => OP_MOVE_9 & "01101" & "00000000000000001000", -- file: ./example_5.py line: 58
140 => OP_WRITE_2_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 180
141 => OP_READ_3_9 & "01001" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 82
142 => OP_JMP_9 & "00000" & "00000000000010001111", -- file: None line: None
143 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
144 => OP_MOVE_9 & "01110" & "00000000000000001001", -- file: ./example_5.py line: 45
145 => OP_GT_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 129
146 => OP_JMPF_9 & "01101" & "00000000000010011011", -- file: None line: None
147 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
148 => OP_MOVE_9 & "01110" & "00000000000000001001", -- file: ./example_5.py line: 45
149 => OP_SUB_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 132
150 => OP_IMM_9 & "01110" & "00000000000010000000", -- file: /home/jon/streams/streams/instruction.py line: 110
151 => OP_ADD_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 115
152 => OP_WRITE_0_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 180
153 => OP_READ_1_9 & "01010" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 82
154 => OP_JMP_9 & "00000" & "00000000000010100011", -- file: None line: None
155 => OP_IMM_9 & "01101" & "00000000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 110
156 => OP_JMPF_9 & "01101" & "00000000000010100011", -- file: None line: None
157 => OP_MOVE_9 & "01101" & "00000000000000001001", -- file: ./example_5.py line: 45
158 => OP_IMM_9 & "01110" & "00000000000010000000", -- file: /home/jon/streams/streams/instruction.py line: 110
159 => OP_ADD_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 115
160 => OP_WRITE_0_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 180
161 => OP_READ_1_9 & "01010" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 82
162 => OP_JMP_9 & "00000" & "00000000000010100011", -- file: None line: None
163 => OP_MOVE_9 & "01101" & "00000000000000000100", -- file: ./example_5.py line: 54
164 => OP_MOVE_9 & "01110" & "00000000000000001000", -- file: ./example_5.py line: 58
165 => OP_IMM_9 & "01111" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
166 => OP_MUL_9 & "01110" & "00000000000000001111", -- file: /home/jon/streams/streams/instruction.py line: 117
167 => OP_IMM_9 & "01111" & "00000000000000001001", -- file: /home/jon/streams/streams/instruction.py line: 110
168 => OP_SR_9 & "01110" & "00000000000000001111", -- file: /home/jon/streams/streams/instruction.py line: 123
169 => OP_SUB_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 116
170 => OP_MOVE_9 & "01110" & "00000000000000001010", -- file: ./example_5.py line: 59
171 => OP_IMM_9 & "01111" & "11111111111111111111", -- file: /home/jon/streams/streams/instruction.py line: 110
172 => OP_MUL_9 & "01110" & "00000000000000001111", -- file: /home/jon/streams/streams/instruction.py line: 117
173 => OP_IMM_9 & "01111" & "00000000000000001001", -- file: /home/jon/streams/streams/instruction.py line: 110
174 => OP_SR_9 & "01110" & "00000000000000001111", -- file: /home/jon/streams/streams/instruction.py line: 123
175 => OP_DIV_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 119
176 => OP_IMM_9 & "01110" & "00000000000000001001", -- file: /home/jon/streams/streams/instruction.py line: 110
177 => OP_SL_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 124
178 => OP_MOVE_9 & "01011" & "00000000000000001101", -- file: /home/jon/streams/streams/instruction.py line: 239
179 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
180 => OP_MOVE_9 & "01110" & "00000000000000001011", -- file: ./example_5.py line: 60
181 => OP_GT_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 129
182 => OP_JMPF_9 & "01101" & "00000000000011001010", -- file: None line: None
183 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
184 => OP_MOVE_9 & "01110" & "00000000000000001011", -- file: ./example_5.py line: 60
185 => OP_SUB_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 132
186 => OP_WRITE_2_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 180
187 => OP_READ_3_9 & "01100" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 82
188 => OP_MOVE_9 & "01101" & "00000000000000001100", -- file: ./example_5.py line: 46
189 => OP_IMM_9 & "01110" & "00000000000010000000", -- file: /home/jon/streams/streams/instruction.py line: 110
190 => OP_SUB_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 116
191 => OP_MOVE_9 & "01100" & "00000000000000001101", -- file: /home/jon/streams/streams/instruction.py line: 239
192 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
193 => OP_MOVE_9 & "01110" & "00000000000000001100", -- file: ./example_5.py line: 46
194 => OP_GE_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 130
195 => OP_JMPF_9 & "01101" & "00000000000011001001", -- file: None line: None
196 => OP_IMM_9 & "01101" & "00000000001000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
197 => OP_MOVE_9 & "01110" & "00000000000000001100", -- file: ./example_5.py line: 46
198 => OP_SUB_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 132
199 => OP_MOVE_9 & "01100" & "00000000000000001101", -- file: /home/jon/streams/streams/instruction.py line: 239
200 => OP_JMP_9 & "00000" & "00000000000011001001", -- file: None line: None
201 => OP_JMP_9 & "00000" & "00000000000011011101", -- file: None line: None
202 => OP_IMM_9 & "01101" & "00000000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 110
203 => OP_JMPF_9 & "01101" & "00000000000011011101", -- file: None line: None
204 => OP_MOVE_9 & "01101" & "00000000000000001011", -- file: ./example_5.py line: 60
205 => OP_WRITE_2_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 180
206 => OP_READ_3_9 & "01100" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 82
207 => OP_MOVE_9 & "01101" & "00000000000000001100", -- file: ./example_5.py line: 46
208 => OP_IMM_9 & "01110" & "00000000000010000000", -- file: /home/jon/streams/streams/instruction.py line: 110
209 => OP_SUB_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 116
210 => OP_MOVE_9 & "01100" & "00000000000000001101", -- file: /home/jon/streams/streams/instruction.py line: 239
211 => OP_IMM_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
212 => OP_MOVE_9 & "01110" & "00000000000000001100", -- file: ./example_5.py line: 46
213 => OP_GT_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 129
214 => OP_JMPF_9 & "01101" & "00000000000011011100", -- file: None line: None
215 => OP_IMM_9 & "01101" & "00000000001000000000", -- file: /home/jon/streams/streams/instruction.py line: 110
216 => OP_MOVE_9 & "01110" & "00000000000000001100", -- file: ./example_5.py line: 46
217 => OP_SUB_9 & "01101" & "00000000000000001110", -- file: /home/jon/streams/streams/instruction.py line: 132
218 => OP_MOVE_9 & "01100" & "00000000000000001101", -- file: /home/jon/streams/streams/instruction.py line: 239
219 => OP_JMP_9 & "00000" & "00000000000011011100", -- file: None line: None
220 => OP_JMP_9 & "00000" & "00000000000011011101", -- file: None line: None
221 => OP_MOVE_9 & "01101" & "00000000000000001001", -- file: ./example_5.py line: 45
222 => OP_WRITE_8_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 180
223 => OP_MOVE_9 & "01101" & "00000000000000001100", -- file: ./example_5.py line: 46
224 => OP_WRITE_8_9 & "01101" & "00000000000000000000", -- file: /home/jon/streams/streams/streams.py line: 180
225 => OP_JMP_9 & "00000" & "00000000000000001100", -- file: ./example_5.py line: 156
226 => OP_JMP_9 & "00000" & "00000000000011100010", -- file: None line: None
227 => OP_JMP_9 & "00000" & "00000000000000000000"); -- file: None line: None
  signal MOD_DIV_9      : std_logic;
  signal STREAM_4     : std_logic_vector(1 downto 0);
  signal STREAM_4_STB : std_logic;
  signal STREAM_4_ACK : std_logic;

  signal STREAM_5     : std_logic_vector(8 downto 0);
  signal STREAM_5_STB : std_logic;
  signal STREAM_5_ACK : std_logic;
  signal STATE_5 : UNARY_STATE_TYPE;
  type LOOKUP_5_TYPE is array (0 to 1) of std_logic_vector(8 downto 0);
  signal LOOKUP_5 : LOOKUP_5_TYPE := (
0 => "010010000",
1 => "010001001"
  );

  signal STREAM_6     : std_logic_vector(1 downto 0);
  signal STREAM_6_STB : std_logic;
  signal STREAM_6_ACK : std_logic;

  signal STREAM_7     : std_logic_vector(7 downto 0);
  signal STREAM_7_STB : std_logic;
  signal STREAM_7_ACK : std_logic;
  signal STATE_7 : UNARY_STATE_TYPE;
  type LOOKUP_7_TYPE is array (0 to 1) of std_logic_vector(7 downto 0);
  signal LOOKUP_7 : LOOKUP_7_TYPE := (
0 => "11101010",
1 => "10110111"
  );

  signal STREAM_1     : std_logic_vector(8 downto 0);
  signal STREAM_1_STB : std_logic;
  signal STREAM_1_ACK : std_logic;
  signal STATE_1 : UNARY_STATE_TYPE;
  type LOOKUP_1_TYPE is array (0 to 511) of std_logic_vector(8 downto 0);
  signal LOOKUP_1 : LOOKUP_1_TYPE := (
0 => "000000000",
1 => "000000011",
2 => "000000110",
3 => "000001001",
4 => "000001101",
5 => "000010000",
6 => "000010011",
7 => "000010110",
8 => "000011001",
9 => "000011100",
10 => "000011111",
11 => "000100010",
12 => "000100101",
13 => "000101001",
14 => "000101100",
15 => "000101111",
16 => "000110010",
17 => "000110101",
18 => "000111000",
19 => "000111011",
20 => "000111110",
21 => "001000001",
22 => "001000100",
23 => "001000111",
24 => "001001010",
25 => "001001101",
26 => "001010000",
27 => "001010011",
28 => "001010110",
29 => "001011001",
30 => "001011100",
31 => "001011111",
32 => "001100010",
33 => "001100100",
34 => "001100111",
35 => "001101010",
36 => "001101101",
37 => "001110000",
38 => "001110011",
39 => "001110101",
40 => "001111000",
41 => "001111011",
42 => "001111110",
43 => "010000000",
44 => "010000011",
45 => "010000110",
46 => "010001000",
47 => "010001011",
48 => "010001110",
49 => "010010000",
50 => "010010011",
51 => "010010101",
52 => "010011000",
53 => "010011010",
54 => "010011101",
55 => "010011111",
56 => "010100010",
57 => "010100100",
58 => "010100111",
59 => "010101001",
60 => "010101011",
61 => "010101110",
62 => "010110000",
63 => "010110010",
64 => "010110100",
65 => "010110111",
66 => "010111001",
67 => "010111011",
68 => "010111101",
69 => "010111111",
70 => "011000001",
71 => "011000011",
72 => "011000101",
73 => "011000111",
74 => "011001001",
75 => "011001011",
76 => "011001101",
77 => "011001111",
78 => "011010000",
79 => "011010010",
80 => "011010100",
81 => "011010110",
82 => "011010111",
83 => "011011001",
84 => "011011011",
85 => "011011100",
86 => "011011110",
87 => "011011111",
88 => "011100001",
89 => "011100010",
90 => "011100100",
91 => "011100101",
92 => "011100111",
93 => "011101000",
94 => "011101001",
95 => "011101010",
96 => "011101100",
97 => "011101101",
98 => "011101110",
99 => "011101111",
100 => "011110000",
101 => "011110001",
102 => "011110010",
103 => "011110011",
104 => "011110100",
105 => "011110101",
106 => "011110110",
107 => "011110111",
108 => "011110111",
109 => "011111000",
110 => "011111001",
111 => "011111001",
112 => "011111010",
113 => "011111011",
114 => "011111011",
115 => "011111100",
116 => "011111100",
117 => "011111101",
118 => "011111101",
119 => "011111101",
120 => "011111110",
121 => "011111110",
122 => "011111110",
123 => "011111111",
124 => "011111111",
125 => "011111111",
126 => "011111111",
127 => "011111111",
128 => "011111111",
129 => "011111111",
130 => "011111111",
131 => "011111111",
132 => "011111111",
133 => "011111111",
134 => "011111110",
135 => "011111110",
136 => "011111110",
137 => "011111101",
138 => "011111101",
139 => "011111101",
140 => "011111100",
141 => "011111100",
142 => "011111011",
143 => "011111011",
144 => "011111010",
145 => "011111001",
146 => "011111001",
147 => "011111000",
148 => "011110111",
149 => "011110111",
150 => "011110110",
151 => "011110101",
152 => "011110100",
153 => "011110011",
154 => "011110010",
155 => "011110001",
156 => "011110000",
157 => "011101111",
158 => "011101110",
159 => "011101101",
160 => "011101100",
161 => "011101010",
162 => "011101001",
163 => "011101000",
164 => "011100111",
165 => "011100101",
166 => "011100100",
167 => "011100010",
168 => "011100001",
169 => "011011111",
170 => "011011110",
171 => "011011100",
172 => "011011011",
173 => "011011001",
174 => "011010111",
175 => "011010110",
176 => "011010100",
177 => "011010010",
178 => "011010000",
179 => "011001111",
180 => "011001101",
181 => "011001011",
182 => "011001001",
183 => "011000111",
184 => "011000101",
185 => "011000011",
186 => "011000001",
187 => "010111111",
188 => "010111101",
189 => "010111011",
190 => "010111001",
191 => "010110111",
192 => "010110100",
193 => "010110010",
194 => "010110000",
195 => "010101110",
196 => "010101011",
197 => "010101001",
198 => "010100111",
199 => "010100100",
200 => "010100010",
201 => "010011111",
202 => "010011101",
203 => "010011010",
204 => "010011000",
205 => "010010101",
206 => "010010011",
207 => "010010000",
208 => "010001110",
209 => "010001011",
210 => "010001000",
211 => "010000110",
212 => "010000011",
213 => "010000000",
214 => "001111110",
215 => "001111011",
216 => "001111000",
217 => "001110101",
218 => "001110011",
219 => "001110000",
220 => "001101101",
221 => "001101010",
222 => "001100111",
223 => "001100100",
224 => "001100010",
225 => "001011111",
226 => "001011100",
227 => "001011001",
228 => "001010110",
229 => "001010011",
230 => "001010000",
231 => "001001101",
232 => "001001010",
233 => "001000111",
234 => "001000100",
235 => "001000001",
236 => "000111110",
237 => "000111011",
238 => "000111000",
239 => "000110101",
240 => "000110010",
241 => "000101111",
242 => "000101100",
243 => "000101001",
244 => "000100101",
245 => "000100010",
246 => "000011111",
247 => "000011100",
248 => "000011001",
249 => "000010110",
250 => "000010011",
251 => "000010000",
252 => "000001101",
253 => "000001001",
254 => "000000110",
255 => "000000011",
256 => "000000000",
257 => "111111101",
258 => "111111010",
259 => "111110111",
260 => "111110011",
261 => "111110000",
262 => "111101101",
263 => "111101010",
264 => "111100111",
265 => "111100100",
266 => "111100001",
267 => "111011110",
268 => "111011011",
269 => "111010111",
270 => "111010100",
271 => "111010001",
272 => "111001110",
273 => "111001011",
274 => "111001000",
275 => "111000101",
276 => "111000010",
277 => "110111111",
278 => "110111100",
279 => "110111001",
280 => "110110110",
281 => "110110011",
282 => "110110000",
283 => "110101101",
284 => "110101010",
285 => "110100111",
286 => "110100100",
287 => "110100001",
288 => "110011110",
289 => "110011100",
290 => "110011001",
291 => "110010110",
292 => "110010011",
293 => "110010000",
294 => "110001101",
295 => "110001011",
296 => "110001000",
297 => "110000101",
298 => "110000010",
299 => "110000000",
300 => "101111101",
301 => "101111010",
302 => "101111000",
303 => "101110101",
304 => "101110010",
305 => "101110000",
306 => "101101101",
307 => "101101011",
308 => "101101000",
309 => "101100110",
310 => "101100011",
311 => "101100001",
312 => "101011110",
313 => "101011100",
314 => "101011001",
315 => "101010111",
316 => "101010101",
317 => "101010010",
318 => "101010000",
319 => "101001110",
320 => "101001100",
321 => "101001001",
322 => "101000111",
323 => "101000101",
324 => "101000011",
325 => "101000001",
326 => "100111111",
327 => "100111101",
328 => "100111011",
329 => "100111001",
330 => "100110111",
331 => "100110101",
332 => "100110011",
333 => "100110001",
334 => "100110000",
335 => "100101110",
336 => "100101100",
337 => "100101010",
338 => "100101001",
339 => "100100111",
340 => "100100101",
341 => "100100100",
342 => "100100010",
343 => "100100001",
344 => "100011111",
345 => "100011110",
346 => "100011100",
347 => "100011011",
348 => "100011001",
349 => "100011000",
350 => "100010111",
351 => "100010110",
352 => "100010100",
353 => "100010011",
354 => "100010010",
355 => "100010001",
356 => "100010000",
357 => "100001111",
358 => "100001110",
359 => "100001101",
360 => "100001100",
361 => "100001011",
362 => "100001010",
363 => "100001001",
364 => "100001001",
365 => "100001000",
366 => "100000111",
367 => "100000111",
368 => "100000110",
369 => "100000101",
370 => "100000101",
371 => "100000100",
372 => "100000100",
373 => "100000011",
374 => "100000011",
375 => "100000011",
376 => "100000010",
377 => "100000010",
378 => "100000010",
379 => "100000001",
380 => "100000001",
381 => "100000001",
382 => "100000001",
383 => "100000001",
384 => "100000001",
385 => "100000001",
386 => "100000001",
387 => "100000001",
388 => "100000001",
389 => "100000001",
390 => "100000010",
391 => "100000010",
392 => "100000010",
393 => "100000011",
394 => "100000011",
395 => "100000011",
396 => "100000100",
397 => "100000100",
398 => "100000101",
399 => "100000101",
400 => "100000110",
401 => "100000111",
402 => "100000111",
403 => "100001000",
404 => "100001001",
405 => "100001001",
406 => "100001010",
407 => "100001011",
408 => "100001100",
409 => "100001101",
410 => "100001110",
411 => "100001111",
412 => "100010000",
413 => "100010001",
414 => "100010010",
415 => "100010011",
416 => "100010100",
417 => "100010110",
418 => "100010111",
419 => "100011000",
420 => "100011001",
421 => "100011011",
422 => "100011100",
423 => "100011110",
424 => "100011111",
425 => "100100001",
426 => "100100010",
427 => "100100100",
428 => "100100101",
429 => "100100111",
430 => "100101001",
431 => "100101010",
432 => "100101100",
433 => "100101110",
434 => "100110000",
435 => "100110001",
436 => "100110011",
437 => "100110101",
438 => "100110111",
439 => "100111001",
440 => "100111011",
441 => "100111101",
442 => "100111111",
443 => "101000001",
444 => "101000011",
445 => "101000101",
446 => "101000111",
447 => "101001001",
448 => "101001100",
449 => "101001110",
450 => "101010000",
451 => "101010010",
452 => "101010101",
453 => "101010111",
454 => "101011001",
455 => "101011100",
456 => "101011110",
457 => "101100001",
458 => "101100011",
459 => "101100110",
460 => "101101000",
461 => "101101011",
462 => "101101101",
463 => "101110000",
464 => "101110010",
465 => "101110101",
466 => "101111000",
467 => "101111010",
468 => "101111101",
469 => "110000000",
470 => "110000010",
471 => "110000101",
472 => "110001000",
473 => "110001011",
474 => "110001101",
475 => "110010000",
476 => "110010011",
477 => "110010110",
478 => "110011001",
479 => "110011100",
480 => "110011110",
481 => "110100001",
482 => "110100100",
483 => "110100111",
484 => "110101010",
485 => "110101101",
486 => "110110000",
487 => "110110011",
488 => "110110110",
489 => "110111001",
490 => "110111100",
491 => "110111111",
492 => "111000010",
493 => "111000101",
494 => "111001000",
495 => "111001011",
496 => "111001110",
497 => "111010001",
498 => "111010100",
499 => "111010111",
500 => "111011011",
501 => "111011110",
502 => "111100001",
503 => "111100100",
504 => "111100111",
505 => "111101010",
506 => "111101101",
507 => "111110000",
508 => "111110011",
509 => "111110111",
510 => "111111010",
511 => "111111101"
  );

  signal STREAM_3     : std_logic_vector(8 downto 0);
  signal STREAM_3_STB : std_logic;
  signal STREAM_3_ACK : std_logic;
  signal STATE_3 : UNARY_STATE_TYPE;
  type LOOKUP_3_TYPE is array (0 to 255) of std_logic_vector(8 downto 0);
  signal LOOKUP_3 : LOOKUP_3_TYPE := (
0 => "000000000",
1 => "000000000",
2 => "000000001",
3 => "000000001",
4 => "000000001",
5 => "000000010",
6 => "000000010",
7 => "000000010",
8 => "000000011",
9 => "000000011",
10 => "000000011",
11 => "000000100",
12 => "000000100",
13 => "000000100",
14 => "000000100",
15 => "000000101",
16 => "000000101",
17 => "000000101",
18 => "000000110",
19 => "000000110",
20 => "000000110",
21 => "000000111",
22 => "000000111",
23 => "000000111",
24 => "000001000",
25 => "000001000",
26 => "000001000",
27 => "000001001",
28 => "000001001",
29 => "000001001",
30 => "000001010",
31 => "000001010",
32 => "000001010",
33 => "000001011",
34 => "000001011",
35 => "000001011",
36 => "000001100",
37 => "000001100",
38 => "000001100",
39 => "000001101",
40 => "000001101",
41 => "000001101",
42 => "000001101",
43 => "000001110",
44 => "000001110",
45 => "000001110",
46 => "000001111",
47 => "000001111",
48 => "000001111",
49 => "000010000",
50 => "000010000",
51 => "000010000",
52 => "000010001",
53 => "000010001",
54 => "000010001",
55 => "000010010",
56 => "000010010",
57 => "000010010",
58 => "000010011",
59 => "000010011",
60 => "000010011",
61 => "000010100",
62 => "000010100",
63 => "000010100",
64 => "000010101",
65 => "000010101",
66 => "000010101",
67 => "000010110",
68 => "000010110",
69 => "000010110",
70 => "000010111",
71 => "000010111",
72 => "000010111",
73 => "000011000",
74 => "000011000",
75 => "000011000",
76 => "000011001",
77 => "000011001",
78 => "000011001",
79 => "000011010",
80 => "000011010",
81 => "000011010",
82 => "000011011",
83 => "000011011",
84 => "000011011",
85 => "000011100",
86 => "000011100",
87 => "000011100",
88 => "000011101",
89 => "000011101",
90 => "000011101",
91 => "000011110",
92 => "000011110",
93 => "000011110",
94 => "000011111",
95 => "000011111",
96 => "000011111",
97 => "000100000",
98 => "000100000",
99 => "000100000",
100 => "000100001",
101 => "000100001",
102 => "000100010",
103 => "000100010",
104 => "000100010",
105 => "000100011",
106 => "000100011",
107 => "000100011",
108 => "000100100",
109 => "000100100",
110 => "000100100",
111 => "000100101",
112 => "000100101",
113 => "000100101",
114 => "000100110",
115 => "000100110",
116 => "000100110",
117 => "000100111",
118 => "000100111",
119 => "000101000",
120 => "000101000",
121 => "000101000",
122 => "000101001",
123 => "000101001",
124 => "000101001",
125 => "000101010",
126 => "000101010",
127 => "000101010",
128 => "000101011",
129 => "000101011",
130 => "000101100",
131 => "000101100",
132 => "000101100",
133 => "000101101",
134 => "000101101",
135 => "000101101",
136 => "000101110",
137 => "000101110",
138 => "000101111",
139 => "000101111",
140 => "000101111",
141 => "000110000",
142 => "000110000",
143 => "000110001",
144 => "000110001",
145 => "000110001",
146 => "000110010",
147 => "000110010",
148 => "000110010",
149 => "000110011",
150 => "000110011",
151 => "000110100",
152 => "000110100",
153 => "000110100",
154 => "000110101",
155 => "000110101",
156 => "000110110",
157 => "000110110",
158 => "000110110",
159 => "000110111",
160 => "000110111",
161 => "000111000",
162 => "000111000",
163 => "000111001",
164 => "000111001",
165 => "000111001",
166 => "000111010",
167 => "000111010",
168 => "000111011",
169 => "000111011",
170 => "000111011",
171 => "000111100",
172 => "000111100",
173 => "000111101",
174 => "000111101",
175 => "000111110",
176 => "000111110",
177 => "000111111",
178 => "000111111",
179 => "000111111",
180 => "001000000",
181 => "001000000",
182 => "001000001",
183 => "001000001",
184 => "001000010",
185 => "001000010",
186 => "001000011",
187 => "001000011",
188 => "001000100",
189 => "001000100",
190 => "001000101",
191 => "001000101",
192 => "001000101",
193 => "001000110",
194 => "001000110",
195 => "001000111",
196 => "001000111",
197 => "001001000",
198 => "001001000",
199 => "001001001",
200 => "001001001",
201 => "001001010",
202 => "001001011",
203 => "001001011",
204 => "001001100",
205 => "001001100",
206 => "001001101",
207 => "001001101",
208 => "001001110",
209 => "001001110",
210 => "001001111",
211 => "001001111",
212 => "001010000",
213 => "001010001",
214 => "001010001",
215 => "001010010",
216 => "001010010",
217 => "001010011",
218 => "001010100",
219 => "001010100",
220 => "001010101",
221 => "001010101",
222 => "001010110",
223 => "001010111",
224 => "001010111",
225 => "001011000",
226 => "001011001",
227 => "001011001",
228 => "001011010",
229 => "001011011",
230 => "001011100",
231 => "001011100",
232 => "001011101",
233 => "001011110",
234 => "001011111",
235 => "001100000",
236 => "001100000",
237 => "001100001",
238 => "001100010",
239 => "001100011",
240 => "001100100",
241 => "001100101",
242 => "001100110",
243 => "001100111",
244 => "001101000",
245 => "001101001",
246 => "001101010",
247 => "001101100",
248 => "001101101",
249 => "001101110",
250 => "001110000",
251 => "001110010",
252 => "001110011",
253 => "001110110",
254 => "001111001",
255 => "010000000"
  );


begin

  --internal clock generator
  process
  begin
    while True loop
      CLK <= '0';
      wait for 5 ns;
      CLK <= '1';
      wait for 5 ns;
    end loop;
    wait;
  end process;

  --internal reset generator
  process
  begin
    RST <= '1';
    wait for 20 ns;
    RST <= '0';
    wait;
  end process;

  -- process
  process
    variable INSTRUCTION : std_logic_vector(29 downto 0);
  begin
    wait until rising_edge(CLK);
    INSTRUCTION := INSTRUCTIONS_9(to_integer(PC_9));
    OPERATION_9 <= INSTRUCTION(29 downto 25);
    SRCA_9      <= INSTRUCTION(24 downto 20);
    SRCB_9      <= INSTRUCTION(4 downto 0);
    IMMEDIATE_9 <= INSTRUCTION(19 downto 0);
  end process;

  process
    variable REGA    : std_logic_vector(19 downto 0);
    variable REGB    : std_logic_vector(19 downto 0);
    variable DEST    : integer range 0 to 16;
    variable RESULT  : std_logic_vector(19 downto 0);
    variable MODULO  : unsigned(19 downto 0);
    variable FLAG_EQ : std_logic;
    variable FLAG_NE : std_logic;
    variable FLAG_GT : std_logic;
    variable FLAG_GE : std_logic;
  begin
    wait until rising_edge(CLK);
    case STATE_9 is
      when STALL =>
        PC_9 <= PC_9 + 1;
        STATE_9 <= EXECUTE;
      when EXECUTE =>
        PC_9 <= PC_9 + 1;

        --FETCH_OPERANDS
        case OPERATION_9 is
          when OP_MOVE_9 => 
            REGB := REGISTERS_9(to_integer(unsigned(SRCB_9)));
          when OP_MUL_9  => 
            REGA := REGISTERS_9(to_integer(unsigned(SRCA_9)));
            REGB := REGISTERS_9(to_integer(unsigned(SRCB_9)));
          when OP_ADD_9  => 
            REGA := REGISTERS_9(to_integer(unsigned(SRCA_9)));
            REGB := REGISTERS_9(to_integer(unsigned(SRCB_9)));
          when OP_SUB_9  => 
            REGA := REGISTERS_9(to_integer(unsigned(SRCA_9)));
            REGB := REGISTERS_9(to_integer(unsigned(SRCB_9)));
          when OP_BAND_9 => 
            REGA := REGISTERS_9(to_integer(unsigned(SRCA_9)));
            REGB := REGISTERS_9(to_integer(unsigned(SRCB_9)));
          when OP_BOR_9  => 
            REGA := REGISTERS_9(to_integer(unsigned(SRCA_9)));
            REGB := REGISTERS_9(to_integer(unsigned(SRCB_9)));
          when OP_BXOR_9 => 
            REGA := REGISTERS_9(to_integer(unsigned(SRCA_9)));
            REGB := REGISTERS_9(to_integer(unsigned(SRCB_9)));
          when OP_SL_9   => 
            REGA := REGISTERS_9(to_integer(unsigned(SRCA_9)));
            REGB := REGISTERS_9(to_integer(unsigned(SRCB_9)));
          when OP_SR_9   => 
            REGA := REGISTERS_9(to_integer(unsigned(SRCA_9)));
            REGB := REGISTERS_9(to_integer(unsigned(SRCB_9)));
          when OP_EQ_9   => 
            REGA := REGISTERS_9(to_integer(unsigned(SRCA_9)));
            REGB := REGISTERS_9(to_integer(unsigned(SRCB_9)));
          when OP_NE_9   => 
            REGA := REGISTERS_9(to_integer(unsigned(SRCA_9)));
            REGB := REGISTERS_9(to_integer(unsigned(SRCB_9)));
          when OP_GT_9   => 
            REGA := REGISTERS_9(to_integer(unsigned(SRCA_9)));
            REGB := REGISTERS_9(to_integer(unsigned(SRCB_9)));
          when OP_GE_9   => 
            REGA := REGISTERS_9(to_integer(unsigned(SRCA_9)));
            REGB := REGISTERS_9(to_integer(unsigned(SRCB_9)));
          when OP_IMM_9  => 
            REGA := REGISTERS_9(to_integer(unsigned(SRCA_9)));
          when OP_DIV_9 =>
            REGA := REGISTERS_9(to_integer(unsigned(SRCA_9)));
            REGB := REGISTERS_9(to_integer(unsigned(SRCB_9)));
          when OP_MOD_9 =>
            REGA := REGISTERS_9(to_integer(unsigned(SRCA_9)));
            REGB := REGISTERS_9(to_integer(unsigned(SRCB_9)));
          when OP_WRITE_0_9 =>
            REGA := REGISTERS_9(to_integer(unsigned(SRCA_9)));
          when OP_WRITE_2_9 =>
            REGA := REGISTERS_9(to_integer(unsigned(SRCA_9)));
          when OP_WRITE_8_9 =>
            REGA := REGISTERS_9(to_integer(unsigned(SRCA_9)));
          when others => null;
        end case;

        --share comparator logic
        if REGA = REGB then
          FLAG_EQ := '1';
        else
          FLAG_EQ := '0';
        end if;

        if signed(REGA) > signed(REGB) then
          FLAG_GT := '1';
        else
          FLAG_GT := '0';
        end if;

        FLAG_NE := not FLAG_EQ;
        FLAG_GE := FLAG_GT or FLAG_EQ;

        --execute instructions
        case OPERATION_9 is
          when OP_MOVE_9 => 
            RESULT := REGB;
            REGISTERS_9(to_integer(unsigned(SRCA_9))) <= RESULT;
          when OP_MUL_9  => 
            RESULT := STD_RESIZE( MUL(REGA, REGB), 20);
            REGISTERS_9(to_integer(unsigned(SRCA_9))) <= RESULT;
          when OP_ADD_9  => 
            RESULT := STD_RESIZE( ADD(REGA, REGB), 20);
            REGISTERS_9(to_integer(unsigned(SRCA_9))) <= RESULT;
          when OP_SUB_9  => 
            RESULT := STD_RESIZE( SUB(REGA, REGB), 20);
            REGISTERS_9(to_integer(unsigned(SRCA_9))) <= RESULT;
          when OP_BAND_9 => 
            RESULT := STD_RESIZE(BAND(REGA, REGB), 20);
            REGISTERS_9(to_integer(unsigned(SRCA_9))) <= RESULT;
          when OP_BOR_9  => 
            RESULT := STD_RESIZE( BOR(REGA, REGB), 20);
            REGISTERS_9(to_integer(unsigned(SRCA_9))) <= RESULT;
          when OP_BXOR_9 => 
            RESULT := STD_RESIZE(BXOR(REGA, REGB), 20);
            REGISTERS_9(to_integer(unsigned(SRCA_9))) <= RESULT;
          when OP_SL_9   => 
            RESULT := STD_RESIZE(  SL(REGA, REGB), 20);
            REGISTERS_9(to_integer(unsigned(SRCA_9))) <= RESULT;
          when OP_SR_9   => 
            RESULT := STD_RESIZE(  SR(REGA, REGB), 20);
            REGISTERS_9(to_integer(unsigned(SRCA_9))) <= RESULT;
          when OP_EQ_9   => 
            RESULT := (others => FLAG_EQ);
            REGISTERS_9(to_integer(unsigned(SRCA_9))) <= RESULT;
          when OP_NE_9   => 
            RESULT := (others => FLAG_NE);
            REGISTERS_9(to_integer(unsigned(SRCA_9))) <= RESULT;
          when OP_GT_9   => 
            RESULT := (others => FLAG_GT);
            REGISTERS_9(to_integer(unsigned(SRCA_9))) <= RESULT;
          when OP_GE_9   => 
            RESULT := (others => FLAG_GE);
            REGISTERS_9(to_integer(unsigned(SRCA_9))) <= RESULT;
          when OP_IMM_9  => 
            RESULT := IMMEDIATE_9;
            REGISTERS_9(to_integer(unsigned(SRCA_9))) <= RESULT;
          when OP_DIV_9 =>
            MOD_DIV_9 <= '1';
            A_9 <= std_logic_vector(abs(signed(REGA)));
            B_9 <= std_logic_vector(abs(signed(REGB)));
            SIGN_9 <= REGA(19) xor REGB(19);
            DEST := to_integer(unsigned(SRCA_9));
            STATE_9 <= DIVIDE_0;
            PC_9 <= PC_9;
          when OP_MOD_9 =>
            MOD_DIV_9 <= '0';
            A_9 <= std_logic_vector(abs(signed(REGA)));
            B_9 <= std_logic_vector(abs(signed(REGB)));
            SIGN_9 <= REGA(19);
            DEST := to_integer(unsigned(SRCA_9));
            STATE_9 <= DIVIDE_0;
            PC_9 <= PC_9;
          when OP_JMP_9 =>
            STATE_9 <= STALL;
            PC_9 <= resize(unsigned(IMMEDIATE_9), 8);
          when OP_JMPF_9 =>
            if ZERO_9 = '1' then
              STATE_9 <= STALL;
              PC_9 <= resize(unsigned(IMMEDIATE_9), 8);
            end if;
          when OP_WRITE_0_9 =>
            STATE_9 <= WRITE_STREAM_0;
            PC_9 <= PC_9;
          when OP_WRITE_2_9 =>
            STATE_9 <= WRITE_STREAM_2;
            PC_9 <= PC_9;
          when OP_WRITE_8_9 =>
            STATE_9 <= WRITE_STREAM_8;
            PC_9 <= PC_9;
          when OP_READ_5_9 =>
            STATE_9 <= READ_STREAM_5;
            PC_9 <= PC_9;
            DEST := to_integer(unsigned(SRCA_9));
          when OP_READ_7_9 =>
            STATE_9 <= READ_STREAM_7;
            PC_9 <= PC_9;
            DEST := to_integer(unsigned(SRCA_9));
          when OP_READ_1_9 =>
            STATE_9 <= READ_STREAM_1;
            PC_9 <= PC_9;
            DEST := to_integer(unsigned(SRCA_9));
          when OP_READ_3_9 =>
            STATE_9 <= READ_STREAM_3;
            PC_9 <= PC_9;
            DEST := to_integer(unsigned(SRCA_9));

          when others => null;
        end case;

        --write back results
        if RESULT = "00000000000000000000" then
          ZERO_9 <= '1';
        else
          ZERO_9 <= '0';
        end if;
      when READ_STREAM_5 =>
        if STREAM_5_STB = '1' then
          STREAM_5_ACK <= '1';
          REGISTERS_9(DEST) <= STD_RESIZE(STREAM_5, 20);
          STATE_9 <= ACK_STREAM_5;
        end if;
      when ACK_STREAM_5 =>
        STREAM_5_ACK <= '0';
        STATE_9 <= EXECUTE;
        PC_9 <= PC_9 + 1;
      when READ_STREAM_7 =>
        if STREAM_7_STB = '1' then
          STREAM_7_ACK <= '1';
          REGISTERS_9(DEST) <= STD_RESIZE(STREAM_7, 20);
          STATE_9 <= ACK_STREAM_7;
        end if;
      when ACK_STREAM_7 =>
        STREAM_7_ACK <= '0';
        STATE_9 <= EXECUTE;
        PC_9 <= PC_9 + 1;
      when READ_STREAM_1 =>
        if STREAM_1_STB = '1' then
          STREAM_1_ACK <= '1';
          REGISTERS_9(DEST) <= STD_RESIZE(STREAM_1, 20);
          STATE_9 <= ACK_STREAM_1;
        end if;
      when ACK_STREAM_1 =>
        STREAM_1_ACK <= '0';
        STATE_9 <= EXECUTE;
        PC_9 <= PC_9 + 1;
      when READ_STREAM_3 =>
        if STREAM_3_STB = '1' then
          STREAM_3_ACK <= '1';
          REGISTERS_9(DEST) <= STD_RESIZE(STREAM_3, 20);
          STATE_9 <= ACK_STREAM_3;
        end if;
      when ACK_STREAM_3 =>
        STREAM_3_ACK <= '0';
        STATE_9 <= EXECUTE;
        PC_9 <= PC_9 + 1;
      when WRITE_STREAM_0 =>
        STREAM_0_STB <= '1';
        STREAM_0 <= STD_RESIZE(REGA, 20);
        if STREAM_0_ACK = '1' then
          STREAM_0_STB <= '0';
          STATE_9 <= EXECUTE;
          PC_9 <= PC_9 + 1;
        end if;
      when WRITE_STREAM_2 =>
        STREAM_2_STB <= '1';
        STREAM_2 <= STD_RESIZE(REGA, 20);
        if STREAM_2_ACK = '1' then
          STREAM_2_STB <= '0';
          STATE_9 <= EXECUTE;
          PC_9 <= PC_9 + 1;
        end if;
      when WRITE_STREAM_8 =>
        STREAM_8_STB <= '1';
        STREAM_8 <= STD_RESIZE(REGA, 20);
        if STREAM_8_ACK = '1' then
          STREAM_8_STB <= '0';
          STATE_9 <= EXECUTE;
          PC_9 <= PC_9 + 1;
        end if;

      when DIVIDE_0 =>
        QUOTIENT_9 <= (others => '0');
        SHIFTER_9 <= (others => '0');
        SHIFTER_9(0) <= A_9(19);
        A_9 <= A_9(18 downto 0) & '0';
        COUNT_9 <= 19;
        STATE_9 <= DIVIDE_1;

      when DIVIDE_1 => --subtract
       --if SHIFTER - B is positive or zero
       if REMAINDER_9(19) = '0' then
         SHIFTER_9(19 downto 1) <= REMAINDER_9(18 downto 0);
       else
         SHIFTER_9(19 downto 1) <= SHIFTER_9(18 downto 0);
       end if;
       SHIFTER_9(0) <= A_9(19);
       A_9 <= A_9(18 downto 0) & '0';
       QUOTIENT_9 <= QUOTIENT_9(18 downto 0) & not(REMAINDER_9(19));
       if COUNT_9 = 0 then
         STATE_9 <= DIVIDE_2;
       else
         COUNT_9 <= COUNT_9 - 1;
       end if;

     when DIVIDE_2 =>
      if MOD_DIV_9 = '1' then --if division
        if SIGN_9 = '1' then --if negative
          REGISTERS_9(DEST) <= std_logic_vector(-signed(QUOTIENT_9));
        else
          REGISTERS_9(DEST) <= QUOTIENT_9;
        end if;
      else
        MODULO := unsigned(SHIFTER_9)/2;
        if SIGN_9 = '1' then --if negative
          REGISTERS_9(DEST) <= std_logic_vector(0-MODULO);
        else
          REGISTERS_9(DEST) <= std_logic_vector(  MODULO);
        end if;
      end if;
      STATE_9 <= EXECUTE;
      PC_9 <= PC_9 + 1;
    end case;

    if RST = '1' then
      STATE_9 <= STALL;
      PC_9 <= "00000000";
      STREAM_5_ACK <= '0';
      STREAM_7_ACK <= '0';
      STREAM_1_ACK <= '0';
      STREAM_3_ACK <= '0';
      STREAM_0_STB <= '0';
      STREAM_2_STB <= '0';
      STREAM_8_STB <= '0';
    end if;
  end process;

  --subtractor
  REMAINDER_9 <= std_logic_vector(unsigned(SHIFTER_9) - resize(unsigned(B_9), 20));

  --file: /home/jon/streams/streams/__init__.py, line: 51
  --STREAM 4 Counter(0, 1, 1, 2)
  process
  begin
    wait until rising_edge(CLK);
    STREAM_4_STB <= '1';
    if STREAM_4_ACK = '1' then
      STREAM_4_STB <= '0';
      STREAM_4 <= STD_RESIZE(ADD(STREAM_4, "01"), 2);
      if STREAM_4 = "01" then
        STREAM_4 <= "00";
      end if;
    end if;
    if RST = '1' then
      STREAM_4_STB <= '0';
      STREAM_4 <= "00";
    end if;
  end process;

  --file: /home/jon/streams/streams/__init__.py, line: 51
  --STREAM 5 Lookup()
  process
  begin
    wait until rising_edge(CLK);
    case STATE_5 is
      when UNARY_INPUT =>
        if STREAM_4_STB = '1' then
          STREAM_4_ACK <= '1';
          STREAM_5_STB <= '1';
          STREAM_5 <= LOOKUP_5(to_integer(unsigned(STREAM_4)));
          STATE_5 <= UNARY_OUTPUT;
        end if;
      when UNARY_OUTPUT =>
        STREAM_4_ACK <= '0';
        if STREAM_5_ACK = '1' then
           STREAM_5_STB <= '0';
           STATE_5 <= UNARY_INPUT;
        end if;
     end case;
     if RST = '1' then
       STREAM_5_STB <= '0';
       STREAM_4_ACK <= '0';
       STATE_5 <= UNARY_INPUT;
     end if;
  end process;

  --file: /home/jon/streams/streams/__init__.py, line: 51
  --STREAM 6 Counter(0, 1, 1, 2)
  process
  begin
    wait until rising_edge(CLK);
    STREAM_6_STB <= '1';
    if STREAM_6_ACK = '1' then
      STREAM_6_STB <= '0';
      STREAM_6 <= STD_RESIZE(ADD(STREAM_6, "01"), 2);
      if STREAM_6 = "01" then
        STREAM_6 <= "00";
      end if;
    end if;
    if RST = '1' then
      STREAM_6_STB <= '0';
      STREAM_6 <= "00";
    end if;
  end process;

  --file: /home/jon/streams/streams/__init__.py, line: 51
  --STREAM 7 Lookup()
  process
  begin
    wait until rising_edge(CLK);
    case STATE_7 is
      when UNARY_INPUT =>
        if STREAM_6_STB = '1' then
          STREAM_6_ACK <= '1';
          STREAM_7_STB <= '1';
          STREAM_7 <= LOOKUP_7(to_integer(unsigned(STREAM_6)));
          STATE_7 <= UNARY_OUTPUT;
        end if;
      when UNARY_OUTPUT =>
        STREAM_6_ACK <= '0';
        if STREAM_7_ACK = '1' then
           STREAM_7_STB <= '0';
           STATE_7 <= UNARY_INPUT;
        end if;
     end case;
     if RST = '1' then
       STREAM_7_STB <= '0';
       STREAM_6_ACK <= '0';
       STATE_7 <= UNARY_INPUT;
     end if;
  end process;

  --file: ./example_5.py, line: 31
  --STREAM 1 Lookup()
  process
  begin
    wait until rising_edge(CLK);
    case STATE_1 is
      when UNARY_INPUT =>
        if STREAM_0_STB = '1' then
          STREAM_0_ACK <= '1';
          STREAM_1_STB <= '1';
          STREAM_1 <= LOOKUP_1(to_integer(unsigned(STREAM_0)));
          STATE_1 <= UNARY_OUTPUT;
        end if;
      when UNARY_OUTPUT =>
        STREAM_0_ACK <= '0';
        if STREAM_1_ACK = '1' then
           STREAM_1_STB <= '0';
           STATE_1 <= UNARY_INPUT;
        end if;
     end case;
     if RST = '1' then
       STREAM_1_STB <= '0';
       STREAM_0_ACK <= '0';
       STATE_1 <= UNARY_INPUT;
     end if;
  end process;

  --file: ./example_5.py, line: 35
  --STREAM 3 Lookup()
  process
  begin
    wait until rising_edge(CLK);
    case STATE_3 is
      when UNARY_INPUT =>
        if STREAM_2_STB = '1' then
          STREAM_2_ACK <= '1';
          STREAM_3_STB <= '1';
          STREAM_3 <= LOOKUP_3(to_integer(unsigned(STREAM_2)));
          STATE_3 <= UNARY_OUTPUT;
        end if;
      when UNARY_OUTPUT =>
        STREAM_2_ACK <= '0';
        if STREAM_3_ACK = '1' then
           STREAM_3_STB <= '0';
           STATE_3 <= UNARY_INPUT;
        end if;
     end case;
     if RST = '1' then
       STREAM_3_STB <= '0';
       STREAM_2_ACK <= '0';
       STATE_3 <= UNARY_INPUT;
     end if;
  end process;

  --file: ./example_5.py, line: 163
  --Printer(8)
  process
  begin
    wait until rising_edge(CLK);
    STREAM_8_ACK <= '0';
    if STREAM_8_STB = '1' and STREAM_8_ACK = '0' then
      PRINT(STREAM_8);
      STREAM_8_ACK <= '1';
    end if;
  end process;


end architecture RTL;