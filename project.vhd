--+============================================================================+
--|   **THIS FILE WAS AUTOMATICALLY GENERATED BY THE PYTHON STREAMS LIBRARY**  |
--+ ============================================================================+
--|                    _       ________________                                |
--|                   (_)---->/                /     _                         |
--|                    _     / PYTHON STREAMS /---->(_)                        |
--|                   (_)-->/________________/                                 |
--|                                                                            |
--+============================================================================+

-- generated by python streams library
-- date generated  : UTC 2011-02-19 20:13:14
-- platform        : linux2
-- python version  : 2.6.6 (r266:84292, Sep 15 2010, 16:22:56) 
--                   [GCC 4.4.5]
-- streams version : 0.1

--+============================================================================+
--|                             **END OF HEADER**                              |
--+============================================================================+

--                                   ***                                       

--+============================================================================+
--|                    **START OF EXTERNAL DEPENDENCIES**                      |
--+============================================================================+



--+============================================================================+
--|                     **END OF EXTERNAL DEPENDENCIES**                       |
--+============================================================================+

--                                   ***                                       

--+============================================================================+
--|                     **START OF AUTO GENERATED CODE**                       |
--+============================================================================+

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity STREAMS_VHDL_MODEL is

end entity STREAMS_VHDL_MODEL;

architecture RTL of STREAMS_VHDL_MODEL is


  --returns the greater of the two parameters
  function MAX(
    A : integer;
    B : integer) return integer is
  begin
    if A > B then
      return A;
    else
      return B;
    end if;
  end MAX;

  --returns a std_logic_vector sum of the two parameters
  function ADD(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'length, B'length) + 1) + 
      resize(signed(B), MAX(A'length, B'length) + 1));
    end ADD;

  --returns a std_logic_vector product of the two parameters
  function MUL(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      signed(A) *
      signed(B));
    end MUL;

  --returns a std_logic_vector difference of the two parameters
  function SUB(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'length, B'length) + 1) - 
      resize(signed(B), MAX(A'length, B'length) + 1));
  end SUB;

  --returns A shifted right (arithmetic) by A
  function SR(
    A  : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(shift_right(signed(A), to_integer(signed(B))));
  end SR;

  --returns A shifted left by B
  function SL(
    A  : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(shift_left(signed(A), to_integer(signed(B))));
  end SL;

  --returns bitwise and of A and B
  --(A and B are resized to the length of the larger first)
  function BAND(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) and
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BAND;

  --returns bitwise or of A and B
  --(A and B are resized to the length of the larger first)
  function BOR(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) or
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BOR;

  --returns bitwise xor of A and B
  --(A and B are resized to the length of the larger first)
  function BXOR(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) xor
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BXOR;

  --equality comparison of A and B
  --(A and B are resized to the length of the larger first)
  function EQ(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) =
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end EQ;

  --inequality comparison of A and B
  --(A and B are resized to the length of the larger first)
  function NE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
    resize(signed(A), MAX(A'LENGTH, B'LENGTH)) /=
    resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end NE;

  --greater than comparison of A and B
  --(A and B are resized to the length of the larger first)
  function GT(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) >
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end GT;

  --greater than or equal comparison of A and B
  --(A and B are resized to the length of the larger first)
  function GE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) >=
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end GE;

  --less than comparison of A and B
  --(A and B are resized to the length of the larger first)
  function LT(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) <
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end LT;

  --less than or equal comparison of A and B
  --(A and B are resized to the length of the larger first)
  function LE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) <=
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end LE;

  --resize A to B bits
  function STD_RESIZE(
    A : std_logic_vector; 
    B : integer) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), B));
  end STD_RESIZE;

  type BINARY_STATE_TYPE is (BINARY_INPUT, BINARY_OUTPUT);
  type UNARY_STATE_TYPE is (UNARY_INPUT, UNARY_OUTPUT);
  type TEE_STATE_TYPE is (TEE_INPUT_A, TEE_WAIT_YZ, TEE_WAIT_Y, TEE_WAIT_Z);
  type DIVIDER_STATE_TYPE is (READ_A_B, DIVIDE_1, DIVIDE_2, WRITE_Z);
  type SERIAL_IN_STATE_TYPE is (IDLE, START, RX0, RX1, RX2, RX3, RX4, RX5, RX6, RX7, STOP, OUTPUT_DATA);
  type SERIAL_OUT_STATE_TYPE is (IDLE, START, WAIT_EN, TX0, TX1, TX2, TX3, TX4, TX5, TX6, TX7, STOP);
  type PRINTER_STATE_TYPE is (INPUT_A, SHIFT, OUTPUT_SIGN, OUTPUT_Z, OUTPUT_NL);
  type HEX_PRINTER_STATE_TYPE is (INPUT_A, OUTPUT_SIGN, OUTPUT_DIGITS);

  constant TIMER_1us_MAX : integer := 49;
  signal TIMER_1us_COUNT : integer range 0 to TIMER_1us_MAX;
  signal TIMER_1us : std_logic;
  constant TIMER_10us_MAX : integer := 49;
  signal TIMER_10us_COUNT : integer range 0 to TIMER_1us_MAX;
  signal TIMER_10us : std_logic;
  constant TIMER_100us_MAX : integer := 49;
  signal TIMER_100us_COUNT : integer range 0 to TIMER_1us_MAX;
  signal TIMER_100us : std_logic;
  constant TIMER_1ms_MAX : integer := 49;
  signal TIMER_1ms_COUNT : integer range 0 to TIMER_1us_MAX;
  signal TIMER_1ms : std_logic;

  signal CLK : std_logic;
  signal RST : std_logic;
  signal STATE_20      : BINARY_STATE_TYPE;
  signal STREAM_20     : std_logic_vector(0 downto 0);
  signal STREAM_20_STB : std_logic;
  signal STREAM_20_ACK : std_logic;

  signal STREAM_19     : std_logic_vector(0 downto 0);
  signal STREAM_19_STB : std_logic;
  signal STREAM_19_ACK : std_logic;

  signal STREAM_17       : std_logic_vector(7 downto 0);
  signal STREAM_17_STB   : std_logic;
  signal STREAM_17_ACK   : std_logic;
  constant OP_IMM_18 : std_logic_vector(2 downto 0) := "000";
  constant OP_MOVE_18 : std_logic_vector(2 downto 0) := "001";
  constant OP_ADD_18 : std_logic_vector(2 downto 0) := "010";
  constant OP_JMP_18 : std_logic_vector(2 downto 0) := "011";
  constant OP_WRITE_17_18 : std_logic_vector(2 downto 0) := "100";
  type PROCESS_18_STATE_TYPE is (STALL, EXECUTE, WRITE_STREAM_17);
  type INSTRUCTIONS_TYPE_18  is array (0 to 7) of std_logic_vector(13 downto 0);
  type REGISTERS_TYPE_18     is array (0 to 7) of std_logic_vector(7 downto 0);
  signal STATE_18        : PROCESS_18_STATE_TYPE;
  signal REGISTERS_18    : REGISTERS_TYPE_18;
  signal PC_18           : unsigned(2 downto 0);
  signal OPERATION_18    : std_logic_vector(2 downto 0);
  signal SRCA_18         : std_logic_vector(2 downto 0);
  signal SRCB_18         : std_logic_vector(2 downto 0);
  signal IMMEDIATE_18    : std_logic_vector(7 downto 0);
  signal ZERO_18         : std_logic;
  signal A_18            : std_logic_vector(7 downto 0);
  signal B_18            : std_logic_vector(7 downto 0);
  signal QUOTIENT_18     : std_logic_vector(7 downto 0);
  signal SHIFTER_18      : std_logic_vector(7 downto 0);
  signal REMAINDER_18    : std_logic_vector(7 downto 0);
  signal COUNT_18        : integer range 0 to 8;
  signal SIGN_18         : std_logic;
  signal INSTRUCTIONS_18 : INSTRUCTIONS_TYPE_18 := (
0 => OP_IMM_18 & "001" & "01111111", -- file: test_suite/test_streams_VHDL.py line: 81
1 => OP_IMM_18 & "010" & "00000001", -- file: test_suite/test_streams_VHDL.py line: 82
2 => OP_MOVE_18 & "011" & "00000001", -- file: test_suite/test_streams_VHDL.py line: 81
3 => OP_MOVE_18 & "100" & "00000010", -- file: test_suite/test_streams_VHDL.py line: 82
4 => OP_ADD_18 & "011" & "00000100", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 124
5 => OP_WRITE_17_18 & "011" & "00000000", -- file: /usr/local/lib/python2.6/dist-packages/streams/streams.py line: 371
6 => OP_JMP_18 & "000" & "00000110", -- file: None line: None
7 => OP_JMP_18 & "000" & "00000000"); -- file: None line: None
  signal MOD_DIV_18      : std_logic;

begin

  process
  begin
    wait until rising_edge(CLK);
    TIMER_1us <= '0';
    TIMER_10us <= '0';
    TIMER_100us <= '0';
    TIMER_1ms <= '0';
    if TIMER_1us_COUNT = 0 then
       TIMER_1us_COUNT <= TIMER_1us_MAX;
       TIMER_1us <= '1';
       if TIMER_10us_COUNT = 0 then
         TIMER_10us_COUNT <= TIMER_10us_MAX;
         TIMER_10us <= '1';
         if TIMER_100us_COUNT = 0 then
           TIMER_100us_COUNT <= TIMER_100us_MAX;
           TIMER_100us <= '1';
           if TIMER_1ms_COUNT = 0 then
             TIMER_1ms_COUNT <= TIMER_1ms_MAX;
             TIMER_1ms <= '1';
           else
             TIMER_1ms_COUNT <= TIMER_1ms_COUNT - 1;
           end if;
         else
           TIMER_100us_COUNT <= TIMER_100us_COUNT - 1;
         end if;
       else
         TIMER_10us_COUNT <= TIMER_10us_COUNT - 1;
       end if;
    else
       TIMER_1us_COUNT <= TIMER_1us_COUNT - 1;
    end if;
    if RST = '1' then
       TIMER_1us_COUNT <= TIMER_1us_MAX;
       TIMER_1us <= '0';
       TIMER_10us_COUNT <= TIMER_10us_MAX;
       TIMER_10us <= '0';
       TIMER_100us_COUNT <= TIMER_100us_MAX;
       TIMER_100us <= '0';
       TIMER_1ms_COUNT <= TIMER_1ms_MAX;
       TIMER_1ms <= '0';
    end if;
  end process;

  --internal clock generator
  process
  begin
    while True loop
      CLK <= '0';
      wait for 5 ns;
      CLK <= '1';
      wait for 5 ns;
    end loop;
    wait;
  end process;

  --internal reset generator
  process
  begin
    RST <= '1';
    wait for 20 ns;
    RST <= '0';
    wait;
  end process;

  --file: test_suite/test_streams_VHDL.py, line: 86
  --Asserter(20)
  process
  begin
    wait until rising_edge(CLK);
    STREAM_20_ACK <= '0';
    if STREAM_20_STB = '1' and STREAM_20_ACK = '0' then
      assert(STREAM_20 /= "0") severity failure;
      STREAM_20_ACK <= '1';
    end if;
  end process;

  --file: /usr/local/lib/python2.6/dist-packages/streams/streams.py, line: 125
  --STREAM 20 Binary(17, 19, 'eq')
  process
  begin
    wait until rising_edge(CLK);
    case STATE_20 is
      when BINARY_INPUT =>
        if STREAM_17_STB = '1' and STREAM_19_STB = '1' then
          STREAM_17_ACK <= '1'; STREAM_19_ACK <= '1';
          STREAM_20 <= EQ(  STREAM_17, STREAM_19);
          STREAM_20_STB <= '1';
          STATE_20 <= BINARY_OUTPUT;
        end if;
      when BINARY_OUTPUT =>
        STREAM_17_ACK <= '0'; STREAM_19_ACK <= '0';
        if STREAM_20_ACK = '1' then
           STREAM_20_STB <= '0';
           STATE_20 <= BINARY_INPUT;
        end if;
     end case;
     if RST = '1' then
       STREAM_20_STB <= '0';
       STREAM_17_ACK <= '0';
       STREAM_19_ACK <= '0';
       STATE_20 <= BINARY_INPUT;
     end if;
  end process;

  --file: /usr/local/lib/python2.6/dist-packages/streams/streams.py, line: 714
  --STREAM 19 Repeater(0, 1)
  STREAM_19 <= "0";
  process
  begin
    wait until rising_edge(CLK);
    STREAM_19_STB <= not STREAM_19_ACK;
  end process;

  -- process
  process
    variable INSTRUCTION : std_logic_vector(13 downto 0);
  begin
    wait until rising_edge(CLK);
    INSTRUCTION := INSTRUCTIONS_18(to_integer(PC_18));
    OPERATION_18 <= INSTRUCTION(13 downto 11);
    SRCA_18      <= INSTRUCTION(10 downto 8);
    SRCB_18      <= INSTRUCTION(2 downto 0);
    IMMEDIATE_18 <= INSTRUCTION(7 downto 0);
  end process;

  process
    variable REGA         : std_logic_vector(7 downto 0);
    variable REGB         : std_logic_vector(7 downto 0);
    variable DEST         : std_logic_vector(2 downto 0);
    variable RESULT       : std_logic_vector(7 downto 0);
    variable RESULT_DEL   : std_logic_vector(7 downto 0);
    variable REGISTERS_EN : std_logic;
    variable MODULO       : unsigned(7 downto 0);
  begin
    wait until rising_edge(CLK);
    REGISTERS_EN := '0';
    case STATE_18 is
      when STALL =>
        PC_18 <= PC_18 + 1;
        STATE_18 <= EXECUTE;
      when EXECUTE =>
        REGA := REGISTERS_18(to_integer(unsigned(SRCA_18)));
        REGB := REGISTERS_18(to_integer(unsigned(SRCB_18)));
        DEST := SRCA_18;
        RESULT := REGA;
        PC_18 <= PC_18 + 1;

        --execute instructions
        case OPERATION_18 is
          when OP_MOVE_18 => 
            RESULT := REGB;
            REGISTERS_EN := '1';
          when OP_ADD_18  => 
            RESULT := STD_RESIZE( ADD(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_IMM_18  => 
            RESULT := IMMEDIATE_18;
            REGISTERS_EN := '1';
          when OP_JMP_18 =>
            STATE_18 <= STALL;
            PC_18 <= resize(unsigned(IMMEDIATE_18), 3);

          when OP_WRITE_17_18 =>
            STATE_18 <= WRITE_STREAM_17;
            DEST := SRCA_18;
            PC_18 <= PC_18;

          when others => null;
        end case;

        --write back results
        RESULT_DEL := RESULT;


      when WRITE_STREAM_17 =>
        STREAM_17_STB <= '1';
        STREAM_17 <= STD_RESIZE(REGA, 8);
        if STREAM_17_ACK = '1' then
          STREAM_17_STB <= '0';
          STATE_18 <= EXECUTE;
          PC_18 <= PC_18 + 1;
        end if;
    end case;

    if RST = '1' then
      STATE_18 <= STALL;
      PC_18 <= "000";
      STREAM_17_STB <= '0';
    end if;
    if REGISTERS_EN = '1' then
      REGISTERS_18(to_integer(unsigned(DEST))) <= RESULT;
    end if;
  end process;



end architecture RTL;

--+============================================================================+
--|                       **END OF AUTO GENERATED CODE**                       |
--+============================================================================+