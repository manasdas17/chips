-- generated by python streams library
-- date generated  : UTC 2010-11-04 21:20:04
-- platform        : linux2
-- python version  : 2.6.6 (r266:84292, Sep 15 2010, 16:22:56) 
--                   [GCC 4.4.5]
-- streams version : 0.1

--  ****************************************************************************
--  Filename         :svga_core.vhd
--  Project          :Wishbone VGA Core 
--  Version          :0.1
--  Author           :Jonathan P Dawson
--  Created Date     :2005-12-18
--  ****************************************************************************
--  Description      :A wishbone compatible VGA core. The core is implemented 
--                    using BLOCK RAMs to create character maped graphics. An 
--                    SVGA (800x600 75hz) display is generated consisting of 
--                    100x75 characters of 8x8 pixels each. Each caracter is set
--                    to an 8-bit value. At present ASCII glyphs have been 
--                    generated.
--  ****************************************************************************
--  Dependencies     :Standard Libraries
--  ****************************************************************************
--  Revision History :
--  
--  Date :2005-12-18
--  Author :Jonathan P Dawson
--  Modification: Created File
--  
--  ****************************************************************************
--  Copyright (C) Jonathan P Dawson 2005
--  ****************************************************************************

library IEEE;
use Ieee.std_logic_1164.all;
use Ieee.numeric_std.all;

entity VIDEO_TIME_GEN is
  port ( 
  CLK                    : in  Std_logic;
  RST                    : in  Std_logic;
  CHARADDR               : out Std_logic_vector(12 downto 0);
  PIXROW                 : out Std_logic_vector(2 downto 0);
  PIXCOL                 : out Std_logic_vector(2 downto 0);
  HSYNCH                 : out Std_logic;
  VSYNCH                 : out Std_logic;
  BLANK                  : out Std_logic);
end VIDEO_TIME_GEN;

architecture RTL of VIDEO_TIME_GEN is
  
  signal PIX_ROW_ADDRESS : Unsigned(2 downto 0);
  signal PIX_COL_ADDRESS : Unsigned(2 downto 0);
  signal ROW_ADDRESS     : Unsigned(12 downto 0);
  signal COL_ADDRESS     : Unsigned(6 downto 0);
  
  signal VTIMER          : Unsigned(9 downto 0);
  signal HTIMER          : Unsigned(10 downto 0);
  signal VTIMER_EN       : Std_logic;
  signal VBLANK          : Std_logic;
  signal HBLANK          : Std_logic;
  signal INTVSYNCH       : Std_logic;
  signal INTHSYNCH       : Std_logic;
  
  constant HSYNCHTIME    : Integer := 120;
  constant HACTIVETIME   : Integer := 800;
  constant FPORCHTIME    : Integer := 64;
  constant BPORCHTIME    : Integer := 56;
  
  constant VSYNCHTIME    : Integer := 6;
  constant VACTIVETIME   : Integer := 600;
  constant VFPORCHTIME   : Integer := 35;
  constant VBPORCHTIME   : Integer := 21;
  
begin
  
  process(CLK, RST)
  begin
    if RST = '1' then
      PIX_COL_ADDRESS <= (others => '0');
      PIX_ROW_ADDRESS <= (others => '0');
      COL_ADDRESS     <= (others => '0');
      ROW_ADDRESS     <= (others => '0');
    elsif Rising_edge(CLK) then
      if VBLANK = '0' and HBLANK = '0' then
        if PIX_COL_ADDRESS = To_unsigned(7, 3) then
          PIX_COL_ADDRESS <= (others => '0');
          if COL_ADDRESS = To_unsigned(99, 7) then
            COL_ADDRESS <= (others => '0');
            if PIX_ROW_ADDRESS = To_unsigned(7, 3) then
              PIX_ROW_ADDRESS <= (others => '0');
              if ROW_ADDRESS = To_unsigned(7400, 13) then
                ROW_ADDRESS <= (others => '0');
              else
                ROW_ADDRESS <= ROW_ADDRESS + 100;
              end if;
            else
              PIX_ROW_ADDRESS <= PIX_ROW_ADDRESS + 1;
            end if;
          else
            COL_ADDRESS <= COL_ADDRESS + 1;
          end if;
        else
          PIX_COL_ADDRESS <= PIX_COL_ADDRESS +1;
        end if;
      end if;
    end if;
  end process;
  
  process(CLK, RST)
  begin
    if RST = '1' then
      VTIMER <= (others => '0');
      INTVSYNCH <= '0';
      VBLANK <= '1';
    elsif Rising_edge(CLK) then
      if VTIMER_EN = '1' then
        VTIMER <= VTIMER + 1;
        
        if VTIMER = To_unsigned(VSYNCHTIME, 10) then
          INTVSYNCH <= '1';
        end if;
        
        if VTIMER = To_unsigned(VSYNCHTIME 
          + VFPORCHTIME, 10) then
          VBLANK   <= '0';
        end if;
        
        if VTIMER = To_unsigned(VSYNCHTIME 
          + VFPORCHTIME 
          + VACTIVETIME, 10) then
          VBLANK   <= '1';
        end if;
        
        if VTIMER = To_unsigned(VSYNCHTIME 
          + VFPORCHTIME 
          + VACTIVETIME 
          + VBPORCHTIME, 10) then          
          INTVSYNCH <= '0';
          VTIMER <= (others => '0');
        end if;
      end if;
    end if;
  end process;
  
  process(CLK, RST)
  begin         
    if RST = '1' then
      HTIMER     <= (others => '0');
      INTHSYNCH   <= '0';
      HBLANK   <= '1';
      VTIMER_EN  <= '1';
    elsif Rising_edge(CLK) then
      HTIMER <= HTIMER + 1;
      VTIMER_EN <= '0';
      
      if HTIMER = To_unsigned(HSYNCHTIME, 11) then      
        INTHSYNCH <= '1';
      end if;
      
      if HTIMER = To_unsigned(HSYNCHTIME 
        + FPORCHTIME, 11) then
        HBLANK <= '0';
      end if;
      
      if HTIMER = To_unsigned(HSYNCHTIME 
        + FPORCHTIME 
        + HACTIVETIME, 11) then
        HBLANK <= '1';
      end if;
      
      if HTIMER = To_unsigned(HSYNCHTIME 
        + FPORCHTIME 
        + HACTIVETIME 
        + BPORCHTIME, 11) then          
        INTHSYNCH <= '0';
        VTIMER_EN <= '1';
        HTIMER <= (others => '0');          
      end if;
    end if;              
  end process;
  
  HSYNCH <= INTHSYNCH;
  VSYNCH <= INTVSYNCH;
  BLANK <= HBLANK or VBLANK;
  
  CHARADDR <= Std_logic_vector(ROW_ADDRESS + COL_ADDRESS);
  PIXCOL   <= Std_logic_vector(PIX_COL_ADDRESS);
  PIXROW   <= Std_logic_vector(PIX_ROW_ADDRESS);
  
  
end RTL;

library IEEE;
use Ieee.std_logic_1164.all;
use Ieee.numeric_std.all;

entity CHARSVGA is
  port ( 
  --Wishbone interface
  STB_I      : in  Std_logic;
  ACK_O      : out Std_logic;
  DATA_I     : in  Std_logic_vector(7 downto 0);
  
  --VGA interface
  CLK        : in  Std_logic;
  RST        : in  Std_logic;
  R          : out Std_logic;
  G          : out Std_logic;
  B          : out Std_logic;
  HSYNCH     : out Std_logic;
  VSYNCH     : out Std_logic
  );
end CHARSVGA;

architecture RTL of CHARSVGA is

  type PIX_ARRAY_TYPE  is array (0 to 2047) of Std_logic_vector(7 downto 0);  
  
  constant PIXARRAY : PIX_ARRAY_TYPE := (
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --0d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --1d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --2d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --3d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --4d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --5d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --6d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --7d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --8d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --9d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --10d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --11d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --12d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --13d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --14d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --15d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --16d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --17d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --18d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --19d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --20d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --21d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --22d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --23d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --24d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --25d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --26d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --27d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --28d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --29d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --30d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --31d
  
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --space
  "00001000","00001000","00001000","00001000","00000000","00001000","00000000","00000000", --!
  "00010100","00010100","00000000","00000000","00000000","00000000","00000000","00000000", --"
  "00000000","00010100","00111110","00010100","00111110","00010100","00000000","00000000", --#
  "00001000","00111100","00001010","00011100","00101000","00011110","00001000","00000000", --$
  "10001110","01001010","00101110","00010000","11101000","10100100","11100010","00000000", --%
  "00001100","00010010","00010010","00001100","00110010","00010010","01101100","00000000", ----'
  "00001000","00001000","00000000","00000000","00000000","00000000","00000000","00000000", --(
  "00001000","00000100","00000010","00000010","00000010","00000100","00001000","00000000", --)
  "00001000","00010000","00100000","00100000","00100000","00010000","00001000","00000000", --*
  "00001000","00111110","00010100","00100010","00000000","00000000","00000000","00000000", --+
  "00010000","00010000","00010000","11111110","00010000","00010000","00010000","00000000", --,
  "00000000","00000000","00000000","00000000","00000000","00001000","00001000","00000000", ---
  "00000000","00000000","00000000","00111110","00000000","00000000","00000000","00000000", --.
  "00000000","00000000","00000000","00000000","00000000","00001000","00000000","00000000", --/
  "01000000","00100000","00010000","00001000","00000100","00000010","00000000","00000000", --0
  
  "00011100","00110010","00101010","00101010","00100110","00011100","00000000","00000000", --1
  "00001000","00001100","00001000","00001000","00001000","00111110","00000000","00000000", --2
  "00011100","00100010","00010000","00001000","00000100","00111110","00000000","00000000", --3
  "00011100","00100010","00010000","00100000","00100010","00011100","00000000","00000000", --4  
  "00011000","00010100","00010010","00111110","00010000","00111100","00000000","00000000", --5
  "00111110","00000010","00111110","00100000","00100010","00011100","00000000","00000000", --6
  "00011100","00100010","00000010","00011110","00100010","00011100","00000000","00000000", --7
  "00111110","00100010","00100000","00010000","00001000","00001000","00000000","00000000", --8
  "00011100","00100010","00011100","00100010","00100010","00011100","00000000","00000000", --9
  "00011100","00100010","00111100","00100000","00100010","00011100","00000000","00000000", --:
  
  "00000000","00001000","00000000","00000000","00000000","00001000","00000000","00000000", --;
  "00000000","00001000","00000000","00000000","00000000","00001000","00001000","00000000", --<
  "00010000","00001000","00000100","00000010","00000100","00001000","00010000","00000000", --=
  "00000000","00000000","00111110","00000000","00000000","00111110","00000000","00000000", -->
  "00000010","00000100","00001000","00010000","00001000","00000100","00000010","00000000", --?
  "00011100","00100010","00011000","00001000","00000000","00001000","00000000","00000000", --@
  "01111100","10000010","10111010","10101010","10111010","10100010","01101100","00000000", --A
  
  "00011100","00100010","00111110","00100010","00100010","00100010","00000000","00000000", --B
  "00011110","00100010","00011110","00100010","00100010","00011110","00000000","00000000", --C
  "00011100","00100010","00000010","00000010","00100010","00011100","00000000","00000000", --D
  "00011110","00100010","00100010","00100010","00100010","00011110","00000000","00000000", --E
  "00111110","00000010","00011110","00000010","00000010","00111110","00000000","00000000", --F
  "00111110","00000010","00011110","00000010","00000010","00000010","00000000","00000000", --G
  "00011100","00100010","00000010","00111010","00100010","00011100","00000000","00000000", --H
  "00100010","00100010","00111110","00100010","00100010","00100010","00000000","00000000", --I
  "00111110","00001000","00001000","00001000","00001000","00111110","00000000","00000000", --J
  "00111000","00010000","00010000","00010000","00010010","00001100","00000000","00000000", --K
  "00010010","00001010","00000110","00001010","00010010","00100010","00000000","00000000", --L
  "00000010","00000010","00000010","00000010","00000010","00111110","00000000","00000000", --M
  "00100010","00110110","00101010","00101010","00100010","00100010","00000000","00000000", --N
  "00100010","00100010","00100110","00101010","00110010","00100010","00000000","00000000", --O
  "00011100","00100010","00100010","00100010","00100010","00011100","00000000","00000000", --P
  "00011110","00100010","00100010","00011110","00000010","00000010","00000000","00000000", --Q
  "00011100","00100010","00100010","00100010","00100010","00011100","01101000","00000000", --R
  "00011110","00100010","00011110","00001010","00010010","00100010","00000000","00000000", --S
  "00111100","00000010","00011100","00100000","00100000","00011110","00000000","00000000", --T
  "00111110","00001000","00001000","00001000","00001000","00001000","00000000","00000000", --U
  "00100010","00100010","00100010","00100010","00100010","00011100","00000000","00000000", --V
  "00100010","00100010","00100010","00010100","00010100","00001000","00000000","00000000", --W
  "00100010","00100010","00100010","00101010","00101010","00010100","00000000","00000000", --X
  "00100010","00010100","00001000","00001000","00010100","00100010","00000000","00000000", --Y
  "00100010","00100010","00011100","00001000","00001000","00001000","00000000","00000000", --Z
  "00111110","00010000","00001000","00000100","00000010","00111110","00000000","00000000", --[
  
  "00011000","00001000","00001000","00001000","00001000","00001000","00011000","00000000", --\
  "00000010","00000100","00001000","00010000","00100000","01000000","00000000","00000000", --]
  "00011000","00010000","00010000","00010000","00010000","00010000","00011000","00000000", --^
  "00001000","00010100","00100010","00000000","00000000","00000000","00000000","00000000", --_
  "00000000","00000000","00000000","00000000","00000000","00000000","11111111","00000000", --`
  "00001000","00010000","00000000","00000000","00000000","00000000","00000000","00000000", --a
  
  "00000000","00011100","00100000","00111100","00100010","01011100","00000000","00000000", --b
  "00000010","00000010","00011010","00100110","00100010","00011110","00000000","00000000", --c
  "00000000","00011100","00000010","00000010","00100010","00011100","00000000","00000000", --d
  "00100000","00100000","00101100","00110010","00100010","00111100","00000000","00000000", --e
  "00000000","00011100","00100010","00111110","00000010","00011100","00000000","00000000", --f
  "00011100","00100010","00000010","00001110","00000010","00000010","00000000","00000000", --g
  "00000000","00111100","00100010","00100010","00111100","00100000","00011100","00000000", --h
  "00000010","00000010","00011010","00100110","00100010","00100010","00000000","00000000", --i
  "00001000","00000000","00001100","00001000","00001000","00011100","00000000","00000000", --j
  "00010000","00000000","00011000","00010000","00010000","00010010","00001100","00000000", --k
  "00000010","00010010","00001010","00001110","00010010","00100010","00000000","00000000", --l
  "00001100","00001000","00001000","00001000","00001000","00111110","00000000","00000000", --m
  "00000000","00010110","00101010","00101010","00101010","00101010","00000000","00000000", --n
  "00000000","00011010","00100100","00100100","00100100","00100100","00000000","00000000", --o
  "00000000","00011100","00100010","00100010","00100010","00011100","00000000","00000000", --p
  "00000000","00011110","00100010","00100010","00011110","00000010","00000010","00000000", --q
  "00000000","00101100","00110010","00100010","00111100","00100000","00100000","00000000", --r
  "00000000","00011010","00100100","00000100","00000100","00000100","00000000","00000000", --s
  "00000000","00111100","00000010","00011100","00100000","00011110","00000000","00000000", --t
  "00000010","00000010","00001110","00000010","00100010","00011100","00000000","00000000", --u
  "00000000","00010010","00010010","00010010","00010010","00101100","00000000","00000000", --v
  "00000000","00100010","00100010","00010100","00010100","00001000","00000000","00000000", --w
  "00000000","00100010","00100010","00101010","00101010","00010100","00000000","00000000", --x
  "00000000","00100010","00010100","00001000","00010100","00100010","00000000","00000000", --y
  "00000000","00100010","00100010","00100010","00111100","00100000","00011100","00000000", --z
  "00000000","00111110","00010000","00001000","00000100","00111110","00000000","00000000", --{
  
  "00010000","00001000","00001000","00000100","00001000","00001000","00010000","00000000", --|
  "00001000","00001000","00001000","00001000","00001000","00001000","00001000","00000000", --}
  "00000100","00001000","00001000","00010000","00001000","00001000","00000100","00000000", --~
  "00000000","00000000","00001100","10010010","01100000","00000000","00000000","00000000", --del
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --0d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --1d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --2d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --3d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --4d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --5d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --6d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --7d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --8d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --9d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --10d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --11d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --12d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --13d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --14d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --15d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --16d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --17d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --18d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --19d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --20d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --21d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --22d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --23d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --24d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --25d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --26d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --27d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --28d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --29d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --30d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --31d
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --space
  
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000", --!
  "00001000","00001000","00001000","00001000","00000000","00001000","00000000","00000000", --"
  "00010100","00010100","00000000","00000000","00000000","00000000","00000000","00000000", --#
  "00000000","00010100","00111110","00010100","00111110","00010100","00000000","00000000", --$
  "00001000","00111100","00001010","00011100","00101000","00011110","00001000","00000000", --%
  "10001110","01001010","00101110","00010000","11101000","10100100","11100010","00000000", ----'
  "00001100","00010010","00010010","00001100","00110010","00010010","01101100","00000000", --(
  "00001000","00001000","00000000","00000000","00000000","00000000","00000000","00000000", --)
  "00001000","00000100","00000010","00000010","00000010","00000100","00001000","00000000", --*
  "00001000","00010000","00100000","00100000","00100000","00010000","00001000","00000000", --+
  "00001000","00111110","00010100","00100010","00000000","00000000","00000000","00000000", --,
  "00010000","00010000","00010000","11111110","00010000","00010000","00010000","00000000", ---
  "00000000","00000000","00000000","00000000","00000000","00001000","00001000","00000000", --.
  "00000000","00000000","00000000","00111110","00000000","00000000","00000000","00000000", --/
  "00000000","00000000","00000000","00000000","00000000","00001000","00000000","00000000", --0
  "01000000","00100000","00010000","00001000","00000100","00000010","00000000","00000000", --1
  
  "00011100","00110010","00101010","00101010","00100110","00011100","00000000","00000000", --2
  "00001000","00001100","00001000","00001000","00001000","00111110","00000000","00000000", --3
  "00011100","00100010","00010000","00001000","00000100","00111110","00000000","00000000", --4
  "00011100","00100010","00010000","00100000","00100010","00011100","00000000","00000000", --5
  "00011000","00010100","00010010","00111110","00010000","00111100","00000000","00000000", --6
  "00111110","00000010","00111110","00100000","00100010","00011100","00000000","00000000", --7
  "00011100","00100010","00000010","00011110","00100010","00011100","00000000","00000000", --8
  "00111110","00100010","00100000","00010000","00001000","00001000","00000000","00000000", --9
  "00011100","00100010","00011100","00100010","00100010","00011100","00000000","00000000", --:
  "00011100","00100010","00111100","00100000","00100010","00011100","00000000","00000000", --;
  
  "00000000","00001000","00000000","00000000","00000000","00001000","00000000","00000000", --<
  "00000000","00001000","00000000","00000000","00000000","00001000","00001000","00000000", --=
  "00010000","00001000","00000100","00000010","00000100","00001000","00010000","00000000", -->
  "00000000","00000000","00111110","00000000","00000000","00111110","00000000","00000000", --?
  "00000010","00000100","00001000","00010000","00001000","00000100","00000010","00000000", --@
  "00011100","00100010","00011000","00001000","00000000","00001000","00000000","00000000", --A
  "01111100","10000010","10111010","10101010","10111010","10100010","01101100","00000000", --B
  
  "00011100","00100010","00111110","00100010","00100010","00100010","00000000","00000000", --C
  "00011110","00100010","00011110","00100010","00100010","00011110","00000000","00000000", --D
  "00011100","00100010","00000010","00000010","00100010","00011100","00000000","00000000", --E
  "00011110","00100010","00100010","00100010","00100010","00011110","00000000","00000000", --F
  "00111110","00000010","00011110","00000010","00000010","00111110","00000000","00000000", --G
  "00111110","00000010","00011110","00000010","00000010","00000010","00000000","00000000", --H
  "00011100","00100010","00000010","00111010","00100010","00011100","00000000","00000000", --I
  "00100010","00100010","00111110","00100010","00100010","00100010","00000000","00000000", --J
  "00111110","00001000","00001000","00001000","00001000","00111110","00000000","00000000", --K
  "00111000","00010000","00010000","00010000","00010010","00001100","00000000","00000000", --L
  "00010010","00001010","00000110","00001010","00010010","00100010","00000000","00000000", --M
  "00000010","00000010","00000010","00000010","00000010","00111110","00000000","00000000", --N
  "00100010","00110110","00101010","00101010","00100010","00100010","00000000","00000000", --O
  "00100010","00100010","00100110","00101010","00110010","00100010","00000000","00000000", --P
  "00011100","00100010","00100010","00100010","00100010","00011100","00000000","00000000", --Q
  "00011110","00100010","00100010","00011110","00000010","00000010","00000000","00000000", --R
  "00011100","00100010","00100010","00100010","00100010","00011100","01101000","00000000", --S
  "00011110","00100010","00011110","00001010","00010010","00100010","00000000","00000000", --T
  "00111100","00000010","00011100","00100000","00100000","00011110","00000000","00000000", --U
  "00111110","00001000","00001000","00001000","00001000","00001000","00000000","00000000", --V
  "00100010","00100010","00100010","00100010","00100010","00011100","00000000","00000000", --W
  "00100010","00100010","00100010","00010100","00010100","00001000","00000000","00000000", --X
  "00100010","00100010","00100010","00101010","00101010","00010100","00000000","00000000", --Y
  "00100010","00010100","00001000","00001000","00010100","00100010","00000000","00000000", --Z
  "00100010","00100010","00011100","00001000","00001000","00001000","00000000","00000000", --[
  "00111110","00010000","00001000","00000100","00000010","00111110","00000000","00000000", --\
  
  "00011000","00001000","00001000","00001000","00001000","00001000","00011000","00000000", --]
  "00000010","00000100","00001000","00010000","00100000","01000000","00000000","00000000", --^
  "00011000","00010000","00010000","00010000","00010000","00010000","00011000","00000000", --_
  "00001000","00010100","00100010","00000000","00000000","00000000","00000000","00000000", --`
  "00000000","00000000","00000000","00000000","00000000","00000000","11111111","00000000", --a
  "00001000","00010000","00000000","00000000","00000000","00000000","00000000","00000000", --b
  
  "00000000","00011100","00100000","00111100","00100010","01011100","00000000","00000000", --c
  "00000010","00000010","00011010","00100110","00100010","00011110","00000000","00000000", --d
  "00000000","00011100","00000010","00000010","00100010","00011100","00000000","00000000", --e
  "00100000","00100000","00101100","00110010","00100010","00111100","00000000","00000000", --f
  "00000000","00011100","00100010","00111110","00000010","00011100","00000000","00000000", --g
  "00011100","00100010","00000010","00001110","00000010","00000010","00000000","00000000", --h
  "00000000","00111100","00100010","00100010","00111100","00100000","00011100","00000000", --i
  "00000010","00000010","00011010","00100110","00100010","00100010","00000000","00000000", --j
  "00001000","00000000","00001100","00001000","00001000","00011100","00000000","00000000", --k
  "00010000","00000000","00011000","00010000","00010000","00010010","00001100","00000000", --l
  "00000010","00010010","00001010","00001110","00010010","00100010","00000000","00000000", --m
  "00001100","00001000","00001000","00001000","00001000","00111110","00000000","00000000", --n
  "00000000","00010110","00101010","00101010","00101010","00101010","00000000","00000000", --o
  "00000000","00011010","00100100","00100100","00100100","00100100","00000000","00000000", --p
  "00000000","00011100","00100010","00100010","00100010","00011100","00000000","00000000", --q
  "00000000","00011110","00100010","00100010","00011110","00000010","00000010","00000000", --r
  "00000000","00101100","00110010","00100010","00111100","00100000","00100000","00000000", --s
  "00000000","00011010","00100100","00000100","00000100","00000100","00000000","00000000", --t
  "00000000","00111100","00000010","00011100","00100000","00011110","00000000","00000000", --u
  "00000010","00000010","00001110","00000010","00100010","00011100","00000000","00000000", --v
  "00000000","00010010","00010010","00010010","00010010","00101100","00000000","00000000", --w
  "00000000","00100010","00100010","00010100","00010100","00001000","00000000","00000000", --x
  "00000000","00100010","00100010","00101010","00101010","00010100","00000000","00000000", --y
  "00000000","00100010","00010100","00001000","00010100","00100010","00000000","00000000", --z
  "00000000","00100010","00100010","00100010","00111100","00100000","00011100","00000000", --{
  "00000000","00111110","00010000","00001000","00000100","00111110","00000000","00000000", --|
  
  "00010000","00001000","00001000","00000100","00001000","00001000","00010000","00000000", --}
  "00001000","00001000","00001000","00001000","00001000","00001000","00001000","00000000", --~
  "00000100","00001000","00001000","00010000","00001000","00001000","00000100","00000000", --del
  "00000000","00000000","00001100","10010010","01100000","00000000","00000000","00000000", 
  "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000"); 

  component VIDEO_TIME_GEN is
    port ( 
    CLK      : in  Std_logic;
    RST      : in  Std_logic;
    CHARADDR : out Std_logic_vector(12 downto 0);
    PIXROW   : out Std_logic_vector(2 downto 0);
    PIXCOL   : out Std_logic_vector(2 downto 0);
    HSYNCH   : out Std_logic;
    VSYNCH   : out Std_logic;
    BLANK    : out Std_logic);
  end component;

  type CHAR_ARRAY_TYPE is array (0 to 7499)  of Std_logic_vector(7 downto 0);
  signal CHARARRAY : CHAR_ARRAY_TYPE;
  type STATE_TYPE is (GET_COL,ACK_COL,GET_ROW,ACK_ROW,GET_DATA,ACK_DATA);
  signal STATE : STATE_TYPE;

  signal INTHSYNCH, INTVSYNCH   : Std_logic;
  signal HSYNCH_DEL, VSYNCH_DEL : Std_logic;
  signal BLANK, BLANK_DEL, BLANK_DEL_DEL 
                                : Std_logic;
  signal PIX, DATA_WR           : Std_logic;
  signal PIXROW, PIXROW_DEL     : Std_logic_vector(2 downto 0);
  signal PIXCOL, PIXCOL_DEL, PIXCOL_DEL_DEL 
                                : Std_logic_vector(2 downto 0);
  signal CHARADDR               : Std_logic_vector(12 downto 0);
  signal CHAR, PIXELS           : Std_logic_vector(7 downto 0);
  signal ADDRESS                : integer range 0 to 7499;
  signal DATA                   : Std_logic_vector(7 downto 0);

begin

  TIMEING1: VIDEO_TIME_GEN port map( 
    CLK      => CLK,
    RST      => RST,
    CHARADDR => CHARADDR, 
    PIXROW   => PIXROW,
    PIXCOL   => PIXCOL,
    HSYNCH   => INTHSYNCH,
    VSYNCH   => INTVSYNCH,
    BLANK    => BLANK
  );

  process
    variable ROW     : integer range 0 to 74;
    variable COL     : integer range 0 to 99;
  begin
    wait until Rising_edge(CLK);
    DATA_WR <= '0';
    case STATE is
      when GET_COL =>
        if STB_I = '1' then
          COL := to_integer(unsigned(DATA_I));
          ACK_O <= '1';
          STATE <= ACK_COL;
        end if;
      when ACK_COL =>
        ACK_O <= '0';
        STATE <= GET_ROW;
      when GET_ROW =>
        if STB_I = '1' then
          ROW := to_integer(unsigned(DATA_I));
          ACK_O <= '1';
          STATE <= ACK_ROW;
        end if;
      when ACK_ROW =>
        ACK_O <= '0';
        STATE <= GET_DATA;
      when GET_DATA =>
        if STB_I = '1' then
          DATA <= DATA_I;
          ACK_O <= '1';
          STATE <= ACK_DATA;
        end if;
      when ACK_DATA =>
        ADDRESS <= (100*ROW)+COL;
        DATA_WR <= '1';
        ACK_O <= '0';
        STATE <= GET_COL;
      when others => null;
    end case;
    if RST = '1' then
      ACK_O <= '0';
      STATE <= GET_COL;
    end if;
  end process;

  process(CLK)
  begin
    if Rising_edge(CLK) then
      CHAR <= CHARARRAY(To_integer(Unsigned(CHARADDR)));
      if DATA_WR = '1' then
        CHARARRAY(ADDRESS) <= DATA;
      end if;
    end if; 
  end process;

  process(CLK)
    variable PIXADDRESS :Integer;
    variable PIXVECTOR  : Std_logic_vector(10 downto 0);
  begin
    if Rising_edge(CLK) then
      PIXVECTOR := CHAR & PIXROW_DEL;
      PIXADDRESS := To_integer(Unsigned(PIXVECTOR));
      PIXELS <= PIXARRAY(PIXADDRESS);
    end if;
  end process;

  process(CLK)
  begin
    
    if Rising_edge(CLK) then
      HSYNCH_DEL     <= INTHSYNCH;
      HSYNCH         <= HSYNCH_DEL;
      VSYNCH_DEL     <= INTVSYNCH;
      VSYNCH         <= VSYNCH_DEL;
      BLANK_DEL      <= BLANK;
      BLANK_DEL_DEL  <= BLANK_DEL;
      PIXROW_DEL     <= PIXROW;
      PIXCOL_DEL     <= PIXCOL;
      PIXCOL_DEL_DEL <= PIXCOL_DEL;
    end if;

  end process;

  PIX <= PIXELS(To_integer(Unsigned(PIXCOL_DEL_DEL)));
  
  R <= PIX and not(BLANK_DEL_DEL);
  G <= PIX and not(BLANK_DEL_DEL);
  B <= PIX and not(BLANK_DEL_DEL);
  
end RTL;
  
--  ****************************************************************************
--  END OF SVGA
--  ****************************************************************************
  
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity STREAMS_VHDL_MODEL is
  port(
    CLK           : in  std_logic;
    RST           : in  std_logic;
    R          : out Std_logic;
    G          : out Std_logic;
    B          : out Std_logic;
    HSYNCH     : out Std_logic;
    VSYNCH     : out Std_logic;
    IN_PB : in std_logic_vector(1 downto 0)
  );
end entity STREAMS_VHDL_MODEL;

architecture RTL of STREAMS_VHDL_MODEL is


  --returns the greater of the two parameters
  function MAX(
    A : integer;
    B : integer) return integer is
  begin
    if A > B then
      return A;
    else
      return B;
    end if;
  end MAX;

  --returns a std_logic_vector sum of the two parameters
  function ADD(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'length, B'length) + 1) + 
      resize(signed(B), MAX(A'length, B'length) + 1));
    end ADD;

  --returns a std_logic_vector product of the two parameters
  function MUL(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      signed(A) *
      signed(B));
    end MUL;

  --returns a std_logic_vector difference of the two parameters
  function SUB(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'length, B'length) + 1) - 
      resize(signed(B), MAX(A'length, B'length) + 1));
  end SUB;

  --returns A shifted right (arithmetic) by A
  function SR(
    A  : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(shift_right(signed(A), to_integer(signed(B))));
  end SR;

  --returns A shifted left by B
  function SL(
    A  : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(shift_left(signed(A), to_integer(signed(B))));
  end SL;

  --returns bitwise and of A and B
  --(A and B are resized to the length of the larger first)
  function BAND(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) and
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BAND;

  --returns bitwise or of A and B
  --(A and B are resized to the length of the larger first)
  function BOR(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) or
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BOR;

  --returns bitwise xor of A and B
  --(A and B are resized to the length of the larger first)
  function BXOR(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) xor
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BXOR;

  --equality comparison of A and B
  --(A and B are resized to the length of the larger first)
  function EQ(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) =
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end EQ;

  --inequality comparison of A and B
  --(A and B are resized to the length of the larger first)
  function NE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
    resize(signed(A), MAX(A'LENGTH, B'LENGTH)) /=
    resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end NE;

  --greater than comparison of A and B
  --(A and B are resized to the length of the larger first)
  function GT(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) >
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end GT;

  --greater than or equal comparison of A and B
  --(A and B are resized to the length of the larger first)
  function GE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) >=
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end GE;

  --less than comparison of A and B
  --(A and B are resized to the length of the larger first)
  function LT(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) <
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end LT;

  --less than or equal comparison of A and B
  --(A and B are resized to the length of the larger first)
  function LE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) <=
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end LE;

  --resize A to B bits
  function STD_RESIZE(
    A : std_logic_vector; 
    B : integer) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), B));
  end STD_RESIZE;

  type BINARY_STATE_TYPE is (BINARY_INPUT, BINARY_OUTPUT);
  type UNARY_STATE_TYPE is (UNARY_INPUT, UNARY_OUTPUT);
  type TEE_STATE_TYPE is (TEE_INPUT_A, TEE_WAIT_YZ, TEE_WAIT_Y, TEE_WAIT_Z);
  type DIVIDER_STATE_TYPE is (READ_A_B, DIVIDE_1, DIVIDE_2, WRITE_Z);
  type SERIAL_IN_STATE_TYPE is (IDLE, START, RX0, RX1, RX2, RX3, RX4, RX5, RX6, RX7, STOP, OUTPUT_DATA);
  type SERIAL_OUT_STATE_TYPE is (IDLE, START, WAIT_EN, TX0, TX1, TX2, TX3, TX4, TX5, TX6, TX7, STOP);
  type PRINTER_STATE_TYPE is (INPUT_A, SHIFT, OUTPUT_SIGN, OUTPUT_Z, OUTPUT_NL);
  type HEX_PRINTER_STATE_TYPE is (INPUT_A, OUTPUT_SIGN, OUTPUT_DIGITS);

  constant TIMER_1us_MAX : integer := 49;
  signal TIMER_1us_COUNT : integer range 0 to TIMER_1us_MAX;
  signal TIMER_1us : std_logic;



component CHARSVGA is
  port ( 
  DATA_I     : in  Std_logic_vector(7 downto 0);
  STB_I      : in  Std_logic;
  ACK_O      : out Std_logic;
  
  --VGA interface
  CLK        : in  Std_logic;
  RST        : in  Std_logic;
  R          : out Std_logic;
  G          : out Std_logic;
  B          : out Std_logic;
  HSYNCH     : out Std_logic;
  VSYNCH     : out Std_logic
  );
end component CHARSVGA;

  signal STREAM_1     : std_logic_vector(1 downto 0);
  signal STREAM_1_STB : std_logic;
  signal STREAM_1_ACK : std_logic;
  signal IN_PB_DEL     : std_logic_vector(1 downto 0);
  signal IN_PB_DEL_DEL : std_logic_vector(1 downto 0);

  signal STREAM_3       : std_logic_vector(7 downto 0);
  signal STREAM_3_STB   : std_logic;
  signal STREAM_3_ACK   : std_logic;
  constant OP_ADD_4 : std_logic_vector(4 downto 0) := "00000";
  constant OP_SUB_4 : std_logic_vector(4 downto 0) := "00001";
  constant OP_MUL_4 : std_logic_vector(4 downto 0) := "00010";
  constant OP_DIV_4 : std_logic_vector(4 downto 0) := "00011";
  constant OP_BAND_4 : std_logic_vector(4 downto 0) := "00100";
  constant OP_BOR_4 : std_logic_vector(4 downto 0) := "00101";
  constant OP_BXOR_4 : std_logic_vector(4 downto 0) := "00110";
  constant OP_SL_4 : std_logic_vector(4 downto 0) := "00111";
  constant OP_SR_4 : std_logic_vector(4 downto 0) := "01000";
  constant OP_EQ_4 : std_logic_vector(4 downto 0) := "01001";
  constant OP_NE_4 : std_logic_vector(4 downto 0) := "01010";
  constant OP_GT_4 : std_logic_vector(4 downto 0) := "01011";
  constant OP_GE_4 : std_logic_vector(4 downto 0) := "01100";
  constant OP_JMP_4 : std_logic_vector(4 downto 0) := "01101";
  constant OP_JMPF_4 : std_logic_vector(4 downto 0) := "01110";
  constant OP_IMM_4 : std_logic_vector(4 downto 0) := "01111";
  constant OP_MOVE_4 : std_logic_vector(4 downto 0) := "10000";
  constant OP_WAIT_US_4 : std_logic_vector(4 downto 0) := "10001";
  constant OP_MOD_4 : std_logic_vector(4 downto 0) := "10010";
  constant OP_READ_0_4 : std_logic_vector(4 downto 0) := "10011";
  constant OP_WRITE_3_4 : std_logic_vector(4 downto 0) := "10100";
  type PROCESS_4_STATE_TYPE is (STALL, EXECUTE, WAIT_US, READ_STREAM_0, ACK_STREAM_0, WRITE_STREAM_3);
  type INSTRUCTIONS_TYPE_4  is array (0 to 68) of std_logic_vector(15 downto 0);
  type REGISTERS_TYPE_4     is array (0 to 7) of std_logic_vector(7 downto 0);
  signal STATE_4        : PROCESS_4_STATE_TYPE;
  signal REGISTERS_4    : REGISTERS_TYPE_4;
  signal PC_4           : unsigned(6 downto 0);
  signal OPERATION_4    : std_logic_vector(4 downto 0);
  signal SRCA_4         : std_logic_vector(2 downto 0);
  signal SRCB_4         : std_logic_vector(2 downto 0);
  signal IMMEDIATE_4    : std_logic_vector(7 downto 0);
  signal ZERO_4         : std_logic;
  signal A_4            : std_logic_vector(7 downto 0);
  signal B_4            : std_logic_vector(7 downto 0);
  signal QUOTIENT_4     : std_logic_vector(7 downto 0);
  signal SHIFTER_4      : std_logic_vector(7 downto 0);
  signal REMAINDER_4    : std_logic_vector(7 downto 0);
  signal COUNT_4        : integer range 0 to 8;
  signal SIGN_4         : std_logic;
  signal INSTRUCTIONS_4 : INSTRUCTIONS_TYPE_4 := (
0 => OP_IMM_4 & "001" & "00000000", -- file: ./example_4_svga_clock.py line: 65
1 => OP_IMM_4 & "010" & "00000000", -- file: ./example_4_svga_clock.py line: 64
2 => OP_IMM_4 & "011" & "00000000", -- file: ./example_4_svga_clock.py line: 63
3 => OP_IMM_4 & "100" & "01001011", -- file: /home/jon/streams/streams/instruction.py line: 109
4 => OP_MOVE_4 & "101" & "00000001", -- file: ./example_4_svga_clock.py line: 65
5 => OP_GT_4 & "100" & "00000101", -- file: /home/jon/streams/streams/instruction.py line: 128
6 => OP_IMM_4 & "101" & "00000000", -- file: /home/jon/streams/streams/instruction.py line: 109
7 => OP_EQ_4 & "100" & "00000101", -- file: /home/jon/streams/streams/instruction.py line: 124
8 => OP_JMPF_4 & "100" & "00001011", -- file: None line: None
9 => OP_JMP_4 & "000" & "01000000", -- file: /home/jon/streams/streams/__init__.py line: 58
10 => OP_JMP_4 & "000" & "00001011", -- file: None line: None
11 => OP_IMM_4 & "100" & "01100100", -- file: /home/jon/streams/streams/instruction.py line: 109
12 => OP_MOVE_4 & "101" & "00000010", -- file: ./example_4_svga_clock.py line: 64
13 => OP_GT_4 & "100" & "00000101", -- file: /home/jon/streams/streams/instruction.py line: 128
14 => OP_IMM_4 & "101" & "00000000", -- file: /home/jon/streams/streams/instruction.py line: 109
15 => OP_EQ_4 & "100" & "00000101", -- file: /home/jon/streams/streams/instruction.py line: 124
16 => OP_JMPF_4 & "100" & "00010011", -- file: None line: None
17 => OP_JMP_4 & "000" & "00111001", -- file: /home/jon/streams/streams/__init__.py line: 58
18 => OP_JMP_4 & "000" & "00010011", -- file: None line: None
19 => OP_READ_0_4 & "011" & "00000000", -- file: /home/jon/streams/streams/streams.py line: 148
20 => OP_MOVE_4 & "100" & "00000011", -- file: ./example_4_svga_clock.py line: 63
21 => OP_IMM_4 & "101" & "00001101", -- file: /home/jon/streams/streams/instruction.py line: 109
22 => OP_EQ_4 & "100" & "00000101", -- file: /home/jon/streams/streams/instruction.py line: 124
23 => OP_JMPF_4 & "100" & "00011011", -- file: None line: None
24 => OP_IMM_4 & "100" & "00000000", -- file: /home/jon/streams/streams/instruction.py line: 109
25 => OP_MOVE_4 & "010" & "00000100", -- file: /home/jon/streams/streams/instruction.py line: 264
26 => OP_JMP_4 & "000" & "00111000", -- file: None line: None
27 => OP_MOVE_4 & "100" & "00000011", -- file: ./example_4_svga_clock.py line: 63
28 => OP_IMM_4 & "101" & "00001010", -- file: /home/jon/streams/streams/instruction.py line: 109
29 => OP_EQ_4 & "100" & "00000101", -- file: /home/jon/streams/streams/instruction.py line: 124
30 => OP_JMPF_4 & "100" & "00101011", -- file: None line: None
31 => OP_MOVE_4 & "100" & "00000001", -- file: ./example_4_svga_clock.py line: 65
32 => OP_IMM_4 & "101" & "00000001", -- file: /home/jon/streams/streams/instruction.py line: 109
33 => OP_ADD_4 & "100" & "00000101", -- file: /home/jon/streams/streams/instruction.py line: 114
34 => OP_MOVE_4 & "001" & "00000100", -- file: /home/jon/streams/streams/instruction.py line: 264
35 => OP_MOVE_4 & "100" & "00000001", -- file: ./example_4_svga_clock.py line: 65
36 => OP_IMM_4 & "101" & "01001011", -- file: /home/jon/streams/streams/instruction.py line: 109
37 => OP_EQ_4 & "100" & "00000101", -- file: /home/jon/streams/streams/instruction.py line: 124
38 => OP_JMPF_4 & "100" & "00101010", -- file: None line: None
39 => OP_IMM_4 & "100" & "00000000", -- file: /home/jon/streams/streams/instruction.py line: 109
40 => OP_MOVE_4 & "001" & "00000100", -- file: /home/jon/streams/streams/instruction.py line: 264
41 => OP_JMP_4 & "000" & "00101010", -- file: None line: None
42 => OP_JMP_4 & "000" & "00111000", -- file: None line: None
43 => OP_IMM_4 & "100" & "00000001", -- file: /home/jon/streams/streams/instruction.py line: 109
44 => OP_JMPF_4 & "100" & "00111000", -- file: None line: None
45 => OP_MOVE_4 & "100" & "00000010", -- file: ./example_4_svga_clock.py line: 64
46 => OP_WRITE_3_4 & "100" & "00000000", -- file: /home/jon/streams/streams/streams.py line: 371
47 => OP_MOVE_4 & "100" & "00000001", -- file: ./example_4_svga_clock.py line: 65
48 => OP_WRITE_3_4 & "100" & "00000000", -- file: /home/jon/streams/streams/streams.py line: 371
49 => OP_MOVE_4 & "100" & "00000011", -- file: ./example_4_svga_clock.py line: 63
50 => OP_WRITE_3_4 & "100" & "00000000", -- file: /home/jon/streams/streams/streams.py line: 371
51 => OP_MOVE_4 & "100" & "00000010", -- file: ./example_4_svga_clock.py line: 64
52 => OP_IMM_4 & "101" & "00000001", -- file: /home/jon/streams/streams/instruction.py line: 109
53 => OP_ADD_4 & "100" & "00000101", -- file: /home/jon/streams/streams/instruction.py line: 114
54 => OP_MOVE_4 & "010" & "00000100", -- file: /home/jon/streams/streams/instruction.py line: 264
55 => OP_JMP_4 & "000" & "00111000", -- file: None line: None
56 => OP_JMP_4 & "000" & "00001011", -- file: /home/jon/streams/streams/__init__.py line: 59
57 => OP_IMM_4 & "100" & "00000000", -- file: /home/jon/streams/streams/instruction.py line: 109
58 => OP_MOVE_4 & "010" & "00000100", -- file: /home/jon/streams/streams/instruction.py line: 264
59 => OP_MOVE_4 & "100" & "00000001", -- file: ./example_4_svga_clock.py line: 65
60 => OP_IMM_4 & "101" & "00000001", -- file: /home/jon/streams/streams/instruction.py line: 109
61 => OP_ADD_4 & "100" & "00000101", -- file: /home/jon/streams/streams/instruction.py line: 114
62 => OP_MOVE_4 & "001" & "00000100", -- file: /home/jon/streams/streams/instruction.py line: 264
63 => OP_JMP_4 & "000" & "00000011", -- file: /home/jon/streams/streams/__init__.py line: 59
64 => OP_IMM_4 & "100" & "00000000", -- file: /home/jon/streams/streams/instruction.py line: 109
65 => OP_MOVE_4 & "001" & "00000100", -- file: /home/jon/streams/streams/instruction.py line: 264
66 => OP_JMP_4 & "000" & "00000011", -- file: ./example_4_svga_clock.py line: 86
67 => OP_JMP_4 & "000" & "01000011", -- file: None line: None
68 => OP_JMP_4 & "000" & "00000000"); -- file: None line: None
  signal MOD_DIV_4      : std_logic;
  signal STREAM_0       : std_logic_vector(15 downto 0);
  signal STREAM_0_STB   : std_logic;
  signal STREAM_0_ACK   : std_logic;
  constant OP_ADD_2 : std_logic_vector(4 downto 0) := "00000";
  constant OP_SUB_2 : std_logic_vector(4 downto 0) := "00001";
  constant OP_MUL_2 : std_logic_vector(4 downto 0) := "00010";
  constant OP_DIV_2 : std_logic_vector(4 downto 0) := "00011";
  constant OP_BAND_2 : std_logic_vector(4 downto 0) := "00100";
  constant OP_BOR_2 : std_logic_vector(4 downto 0) := "00101";
  constant OP_BXOR_2 : std_logic_vector(4 downto 0) := "00110";
  constant OP_SL_2 : std_logic_vector(4 downto 0) := "00111";
  constant OP_SR_2 : std_logic_vector(4 downto 0) := "01000";
  constant OP_EQ_2 : std_logic_vector(4 downto 0) := "01001";
  constant OP_NE_2 : std_logic_vector(4 downto 0) := "01010";
  constant OP_GT_2 : std_logic_vector(4 downto 0) := "01011";
  constant OP_GE_2 : std_logic_vector(4 downto 0) := "01100";
  constant OP_JMP_2 : std_logic_vector(4 downto 0) := "01101";
  constant OP_JMPF_2 : std_logic_vector(4 downto 0) := "01110";
  constant OP_IMM_2 : std_logic_vector(4 downto 0) := "01111";
  constant OP_MOVE_2 : std_logic_vector(4 downto 0) := "10000";
  constant OP_WAIT_US_2 : std_logic_vector(4 downto 0) := "10001";
  constant OP_MOD_2 : std_logic_vector(4 downto 0) := "10010";
  constant OP_READ_1_2 : std_logic_vector(4 downto 0) := "10011";
  constant OP_WRITE_0_2 : std_logic_vector(4 downto 0) := "10100";
  type PROCESS_2_STATE_TYPE is (STALL, EXECUTE, DIVIDE_0, DIVIDE_1, DIVIDE_2, WAIT_US, READ_STREAM_1, ACK_STREAM_1, WRITE_STREAM_0);
  type INSTRUCTIONS_TYPE_2  is array (0 to 281) of std_logic_vector(24 downto 0);
  type REGISTERS_TYPE_2     is array (0 to 15) of std_logic_vector(15 downto 0);
  signal STATE_2        : PROCESS_2_STATE_TYPE;
  signal REGISTERS_2    : REGISTERS_TYPE_2;
  signal PC_2           : unsigned(8 downto 0);
  signal OPERATION_2    : std_logic_vector(4 downto 0);
  signal SRCA_2         : std_logic_vector(3 downto 0);
  signal SRCB_2         : std_logic_vector(3 downto 0);
  signal IMMEDIATE_2    : std_logic_vector(15 downto 0);
  signal ZERO_2         : std_logic;
  signal A_2            : std_logic_vector(15 downto 0);
  signal B_2            : std_logic_vector(15 downto 0);
  signal QUOTIENT_2     : std_logic_vector(15 downto 0);
  signal SHIFTER_2      : std_logic_vector(15 downto 0);
  signal REMAINDER_2    : std_logic_vector(15 downto 0);
  signal COUNT_2        : integer range 0 to 16;
  signal SIGN_2         : std_logic;
  signal INSTRUCTIONS_2 : INSTRUCTIONS_TYPE_2 := (
0 => OP_IMM_2 & "0001" & "0000000000000000", -- file: ./example_4_svga_clock.py line: 18
1 => OP_IMM_2 & "0010" & "0000000000000000", -- file: ./example_4_svga_clock.py line: 19
2 => OP_IMM_2 & "0011" & "0000000000000000", -- file: ./example_4_svga_clock.py line: 20
3 => OP_IMM_2 & "0100" & "0000000000000000", -- file: /home/jon/streams/streams/__init__.py line: 91
4 => OP_IMM_2 & "0101" & "0000000000000000", -- file: /home/jon/streams/streams/__init__.py line: 89
5 => OP_IMM_2 & "0110" & "0000000000000000", -- file: /home/jon/streams/streams/__init__.py line: 92
6 => OP_IMM_2 & "0111" & "0000000000000000", -- file: /home/jon/streams/streams/__init__.py line: 90
7 => OP_IMM_2 & "1000" & "0000000000000000", -- file: ./example_4_svga_clock.py line: 17
8 => OP_IMM_2 & "1001" & "0000000000000000", -- file: ./example_4_svga_clock.py line: 21
9 => OP_IMM_2 & "1010" & "0000000000000000", -- file: ./example_4_svga_clock.py line: 22
10 => OP_IMM_2 & "1011" & "0000000000011000", -- file: /home/jon/streams/streams/instruction.py line: 109
11 => OP_MOVE_2 & "1100" & "0000000000000001", -- file: ./example_4_svga_clock.py line: 18
12 => OP_GT_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 128
13 => OP_IMM_2 & "1100" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
14 => OP_EQ_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 124
15 => OP_JMPF_2 & "1011" & "0000000000010010", -- file: None line: None
16 => OP_JMP_2 & "0000" & "0000000100010101", -- file: /home/jon/streams/streams/__init__.py line: 58
17 => OP_JMP_2 & "0000" & "0000000000010010", -- file: None line: None
18 => OP_IMM_2 & "1011" & "0000000000111100", -- file: /home/jon/streams/streams/instruction.py line: 109
19 => OP_MOVE_2 & "1100" & "0000000000000010", -- file: ./example_4_svga_clock.py line: 19
20 => OP_GT_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 128
21 => OP_IMM_2 & "1100" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
22 => OP_EQ_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 124
23 => OP_JMPF_2 & "1011" & "0000000000011010", -- file: None line: None
24 => OP_JMP_2 & "0000" & "0000000100001110", -- file: /home/jon/streams/streams/__init__.py line: 58
25 => OP_JMP_2 & "0000" & "0000000000011010", -- file: None line: None
26 => OP_IMM_2 & "1011" & "0000000000111100", -- file: /home/jon/streams/streams/instruction.py line: 109
27 => OP_MOVE_2 & "1100" & "0000000000000011", -- file: ./example_4_svga_clock.py line: 20
28 => OP_GT_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 128
29 => OP_IMM_2 & "1100" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
30 => OP_EQ_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 124
31 => OP_JMPF_2 & "1011" & "0000000000100010", -- file: None line: None
32 => OP_JMP_2 & "0000" & "0000000100000111", -- file: /home/jon/streams/streams/__init__.py line: 58
33 => OP_JMP_2 & "0000" & "0000000000100010", -- file: None line: None
34 => OP_MOVE_2 & "1011" & "0000000000000001", -- file: ./example_4_svga_clock.py line: 18
35 => OP_MOVE_2 & "0100" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
36 => OP_IMM_2 & "1011" & "0010011100010000", -- file: /home/jon/streams/streams/instruction.py line: 109
37 => OP_MOVE_2 & "0101" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
38 => OP_IMM_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
39 => OP_MOVE_2 & "0110" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
40 => OP_MOVE_2 & "1011" & "0000000000000101", -- file: /home/jon/streams/streams/__init__.py line: 89
41 => OP_IMM_2 & "1100" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
42 => OP_GT_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 126
43 => OP_IMM_2 & "1100" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
44 => OP_EQ_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 124
45 => OP_JMPF_2 & "1011" & "0000000000110000", -- file: None line: None
46 => OP_JMP_2 & "0000" & "0000000001011000", -- file: /home/jon/streams/streams/__init__.py line: 58
47 => OP_JMP_2 & "0000" & "0000000000110000", -- file: None line: None
48 => OP_IMM_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
49 => OP_MOVE_2 & "0111" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
50 => OP_MOVE_2 & "1011" & "0000000000000100", -- file: /home/jon/streams/streams/__init__.py line: 91
51 => OP_MOVE_2 & "1100" & "0000000000000101", -- file: /home/jon/streams/streams/__init__.py line: 89
52 => OP_GE_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 127
53 => OP_IMM_2 & "1100" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
54 => OP_EQ_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 124
55 => OP_JMPF_2 & "1011" & "0000000000111010", -- file: None line: None
56 => OP_JMP_2 & "0000" & "0000000001000011", -- file: /home/jon/streams/streams/__init__.py line: 58
57 => OP_JMP_2 & "0000" & "0000000000111010", -- file: None line: None
58 => OP_MOVE_2 & "1011" & "0000000000000100", -- file: /home/jon/streams/streams/__init__.py line: 91
59 => OP_MOVE_2 & "1100" & "0000000000000101", -- file: /home/jon/streams/streams/__init__.py line: 89
60 => OP_SUB_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 115
61 => OP_MOVE_2 & "0100" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
62 => OP_MOVE_2 & "1011" & "0000000000000111", -- file: /home/jon/streams/streams/__init__.py line: 90
63 => OP_IMM_2 & "1100" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
64 => OP_ADD_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 114
65 => OP_MOVE_2 & "0111" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
66 => OP_JMP_2 & "0000" & "0000000000110010", -- file: /home/jon/streams/streams/__init__.py line: 59
67 => OP_IMM_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
68 => OP_MOVE_2 & "1100" & "0000000000000101", -- file: /home/jon/streams/streams/__init__.py line: 89
69 => OP_BOR_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 136
70 => OP_IMM_2 & "1100" & "0000000000001010", -- file: /home/jon/streams/streams/instruction.py line: 109
71 => OP_EQ_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 124
72 => OP_JMPF_2 & "1011" & "0000000001001100", -- file: None line: None
73 => OP_IMM_2 & "1011" & "1111111111111111", -- file: /home/jon/streams/streams/instruction.py line: 109
74 => OP_MOVE_2 & "0110" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
75 => OP_JMP_2 & "0000" & "0000000001001100", -- file: None line: None
76 => OP_MOVE_2 & "1011" & "0000000000000110", -- file: /home/jon/streams/streams/__init__.py line: 92
77 => OP_JMPF_2 & "1011" & "0000000001010011", -- file: None line: None
78 => OP_IMM_2 & "1011" & "0000000000110000", -- file: /home/jon/streams/streams/instruction.py line: 109
79 => OP_MOVE_2 & "1100" & "0000000000000111", -- file: /home/jon/streams/streams/__init__.py line: 90
80 => OP_BOR_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 136
81 => OP_WRITE_0_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
82 => OP_JMP_2 & "0000" & "0000000001010011", -- file: None line: None
83 => OP_MOVE_2 & "1011" & "0000000000000101", -- file: /home/jon/streams/streams/__init__.py line: 89
84 => OP_IMM_2 & "1100" & "0000000000001010", -- file: /home/jon/streams/streams/instruction.py line: 109
85 => OP_DIV_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 118
86 => OP_MOVE_2 & "0101" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
87 => OP_JMP_2 & "0000" & "0000000000101000", -- file: /home/jon/streams/streams/__init__.py line: 59
88 => OP_IMM_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
89 => OP_WRITE_0_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
90 => OP_IMM_2 & "1011" & "0000000000111010", -- file: /home/jon/streams/streams/instruction.py line: 109
91 => OP_WRITE_0_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
92 => OP_MOVE_2 & "1011" & "0000000000000010", -- file: ./example_4_svga_clock.py line: 19
93 => OP_MOVE_2 & "0100" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
94 => OP_IMM_2 & "1011" & "0010011100010000", -- file: /home/jon/streams/streams/instruction.py line: 109
95 => OP_MOVE_2 & "0101" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
96 => OP_IMM_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
97 => OP_MOVE_2 & "0110" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
98 => OP_MOVE_2 & "1011" & "0000000000000101", -- file: /home/jon/streams/streams/__init__.py line: 89
99 => OP_IMM_2 & "1100" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
100 => OP_GT_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 126
101 => OP_IMM_2 & "1100" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
102 => OP_EQ_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 124
103 => OP_JMPF_2 & "1011" & "0000000001101010", -- file: None line: None
104 => OP_JMP_2 & "0000" & "0000000010010010", -- file: /home/jon/streams/streams/__init__.py line: 58
105 => OP_JMP_2 & "0000" & "0000000001101010", -- file: None line: None
106 => OP_IMM_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
107 => OP_MOVE_2 & "0111" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
108 => OP_MOVE_2 & "1011" & "0000000000000100", -- file: /home/jon/streams/streams/__init__.py line: 91
109 => OP_MOVE_2 & "1100" & "0000000000000101", -- file: /home/jon/streams/streams/__init__.py line: 89
110 => OP_GE_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 127
111 => OP_IMM_2 & "1100" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
112 => OP_EQ_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 124
113 => OP_JMPF_2 & "1011" & "0000000001110100", -- file: None line: None
114 => OP_JMP_2 & "0000" & "0000000001111101", -- file: /home/jon/streams/streams/__init__.py line: 58
115 => OP_JMP_2 & "0000" & "0000000001110100", -- file: None line: None
116 => OP_MOVE_2 & "1011" & "0000000000000100", -- file: /home/jon/streams/streams/__init__.py line: 91
117 => OP_MOVE_2 & "1100" & "0000000000000101", -- file: /home/jon/streams/streams/__init__.py line: 89
118 => OP_SUB_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 115
119 => OP_MOVE_2 & "0100" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
120 => OP_MOVE_2 & "1011" & "0000000000000111", -- file: /home/jon/streams/streams/__init__.py line: 90
121 => OP_IMM_2 & "1100" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
122 => OP_ADD_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 114
123 => OP_MOVE_2 & "0111" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
124 => OP_JMP_2 & "0000" & "0000000001101100", -- file: /home/jon/streams/streams/__init__.py line: 59
125 => OP_IMM_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
126 => OP_MOVE_2 & "1100" & "0000000000000101", -- file: /home/jon/streams/streams/__init__.py line: 89
127 => OP_BOR_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 136
128 => OP_IMM_2 & "1100" & "0000000000001010", -- file: /home/jon/streams/streams/instruction.py line: 109
129 => OP_EQ_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 124
130 => OP_JMPF_2 & "1011" & "0000000010000110", -- file: None line: None
131 => OP_IMM_2 & "1011" & "1111111111111111", -- file: /home/jon/streams/streams/instruction.py line: 109
132 => OP_MOVE_2 & "0110" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
133 => OP_JMP_2 & "0000" & "0000000010000110", -- file: None line: None
134 => OP_MOVE_2 & "1011" & "0000000000000110", -- file: /home/jon/streams/streams/__init__.py line: 92
135 => OP_JMPF_2 & "1011" & "0000000010001101", -- file: None line: None
136 => OP_IMM_2 & "1011" & "0000000000110000", -- file: /home/jon/streams/streams/instruction.py line: 109
137 => OP_MOVE_2 & "1100" & "0000000000000111", -- file: /home/jon/streams/streams/__init__.py line: 90
138 => OP_BOR_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 136
139 => OP_WRITE_0_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
140 => OP_JMP_2 & "0000" & "0000000010001101", -- file: None line: None
141 => OP_MOVE_2 & "1011" & "0000000000000101", -- file: /home/jon/streams/streams/__init__.py line: 89
142 => OP_IMM_2 & "1100" & "0000000000001010", -- file: /home/jon/streams/streams/instruction.py line: 109
143 => OP_DIV_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 118
144 => OP_MOVE_2 & "0101" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
145 => OP_JMP_2 & "0000" & "0000000001100010", -- file: /home/jon/streams/streams/__init__.py line: 59
146 => OP_IMM_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
147 => OP_WRITE_0_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
148 => OP_IMM_2 & "1011" & "0000000000111010", -- file: /home/jon/streams/streams/instruction.py line: 109
149 => OP_WRITE_0_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
150 => OP_MOVE_2 & "1011" & "0000000000000011", -- file: ./example_4_svga_clock.py line: 20
151 => OP_MOVE_2 & "0100" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
152 => OP_IMM_2 & "1011" & "0010011100010000", -- file: /home/jon/streams/streams/instruction.py line: 109
153 => OP_MOVE_2 & "0101" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
154 => OP_IMM_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
155 => OP_MOVE_2 & "0110" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
156 => OP_MOVE_2 & "1011" & "0000000000000101", -- file: /home/jon/streams/streams/__init__.py line: 89
157 => OP_IMM_2 & "1100" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
158 => OP_GT_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 126
159 => OP_IMM_2 & "1100" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
160 => OP_EQ_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 124
161 => OP_JMPF_2 & "1011" & "0000000010100100", -- file: None line: None
162 => OP_JMP_2 & "0000" & "0000000011001100", -- file: /home/jon/streams/streams/__init__.py line: 58
163 => OP_JMP_2 & "0000" & "0000000010100100", -- file: None line: None
164 => OP_IMM_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
165 => OP_MOVE_2 & "0111" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
166 => OP_MOVE_2 & "1011" & "0000000000000100", -- file: /home/jon/streams/streams/__init__.py line: 91
167 => OP_MOVE_2 & "1100" & "0000000000000101", -- file: /home/jon/streams/streams/__init__.py line: 89
168 => OP_GE_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 127
169 => OP_IMM_2 & "1100" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
170 => OP_EQ_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 124
171 => OP_JMPF_2 & "1011" & "0000000010101110", -- file: None line: None
172 => OP_JMP_2 & "0000" & "0000000010110111", -- file: /home/jon/streams/streams/__init__.py line: 58
173 => OP_JMP_2 & "0000" & "0000000010101110", -- file: None line: None
174 => OP_MOVE_2 & "1011" & "0000000000000100", -- file: /home/jon/streams/streams/__init__.py line: 91
175 => OP_MOVE_2 & "1100" & "0000000000000101", -- file: /home/jon/streams/streams/__init__.py line: 89
176 => OP_SUB_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 115
177 => OP_MOVE_2 & "0100" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
178 => OP_MOVE_2 & "1011" & "0000000000000111", -- file: /home/jon/streams/streams/__init__.py line: 90
179 => OP_IMM_2 & "1100" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
180 => OP_ADD_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 114
181 => OP_MOVE_2 & "0111" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
182 => OP_JMP_2 & "0000" & "0000000010100110", -- file: /home/jon/streams/streams/__init__.py line: 59
183 => OP_IMM_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
184 => OP_MOVE_2 & "1100" & "0000000000000101", -- file: /home/jon/streams/streams/__init__.py line: 89
185 => OP_BOR_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 136
186 => OP_IMM_2 & "1100" & "0000000000001010", -- file: /home/jon/streams/streams/instruction.py line: 109
187 => OP_EQ_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 124
188 => OP_JMPF_2 & "1011" & "0000000011000000", -- file: None line: None
189 => OP_IMM_2 & "1011" & "1111111111111111", -- file: /home/jon/streams/streams/instruction.py line: 109
190 => OP_MOVE_2 & "0110" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
191 => OP_JMP_2 & "0000" & "0000000011000000", -- file: None line: None
192 => OP_MOVE_2 & "1011" & "0000000000000110", -- file: /home/jon/streams/streams/__init__.py line: 92
193 => OP_JMPF_2 & "1011" & "0000000011000111", -- file: None line: None
194 => OP_IMM_2 & "1011" & "0000000000110000", -- file: /home/jon/streams/streams/instruction.py line: 109
195 => OP_MOVE_2 & "1100" & "0000000000000111", -- file: /home/jon/streams/streams/__init__.py line: 90
196 => OP_BOR_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 136
197 => OP_WRITE_0_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
198 => OP_JMP_2 & "0000" & "0000000011000111", -- file: None line: None
199 => OP_MOVE_2 & "1011" & "0000000000000101", -- file: /home/jon/streams/streams/__init__.py line: 89
200 => OP_IMM_2 & "1100" & "0000000000001010", -- file: /home/jon/streams/streams/instruction.py line: 109
201 => OP_DIV_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 118
202 => OP_MOVE_2 & "0101" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
203 => OP_JMP_2 & "0000" & "0000000010011100", -- file: /home/jon/streams/streams/__init__.py line: 59
204 => OP_IMM_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
205 => OP_WRITE_0_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
206 => OP_IMM_2 & "1011" & "0000000000001101", -- file: /home/jon/streams/streams/instruction.py line: 109
207 => OP_WRITE_0_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 371
208 => OP_READ_1_2 & "1000" & "0000000000000000", -- file: /home/jon/streams/streams/streams.py line: 148
209 => OP_MOVE_2 & "1011" & "0000000000001000", -- file: ./example_4_svga_clock.py line: 17
210 => OP_IMM_2 & "1100" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
211 => OP_BAND_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 119
212 => OP_JMPF_2 & "1011" & "0000000011011010", -- file: None line: None
213 => OP_MOVE_2 & "1011" & "0000000000000010", -- file: ./example_4_svga_clock.py line: 19
214 => OP_IMM_2 & "1100" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
215 => OP_ADD_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 114
216 => OP_MOVE_2 & "0010" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
217 => OP_JMP_2 & "0000" & "0000000011011010", -- file: None line: None
218 => OP_MOVE_2 & "1011" & "0000000000001000", -- file: ./example_4_svga_clock.py line: 17
219 => OP_IMM_2 & "1100" & "0000000000000010", -- file: /home/jon/streams/streams/instruction.py line: 109
220 => OP_BAND_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 119
221 => OP_JMPF_2 & "1011" & "0000000011100011", -- file: None line: None
222 => OP_MOVE_2 & "1011" & "0000000000000001", -- file: ./example_4_svga_clock.py line: 18
223 => OP_IMM_2 & "1100" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
224 => OP_ADD_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 114
225 => OP_MOVE_2 & "0001" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
226 => OP_JMP_2 & "0000" & "0000000011100011", -- file: None line: None
227 => OP_IMM_2 & "1011" & "0000001111101000", -- file: /home/jon/streams/streams/instruction.py line: 109
228 => OP_MOVE_2 & "1100" & "0000000000001001", -- file: ./example_4_svga_clock.py line: 21
229 => OP_GT_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 128
230 => OP_IMM_2 & "1100" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
231 => OP_EQ_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 124
232 => OP_JMPF_2 & "1011" & "0000000011101011", -- file: None line: None
233 => OP_JMP_2 & "0000" & "0000000100000000", -- file: /home/jon/streams/streams/__init__.py line: 58
234 => OP_JMP_2 & "0000" & "0000000011101011", -- file: None line: None
235 => OP_IMM_2 & "1011" & "0000001111101000", -- file: /home/jon/streams/streams/instruction.py line: 109
236 => OP_MOVE_2 & "1100" & "0000000000001010", -- file: ./example_4_svga_clock.py line: 22
237 => OP_GT_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 128
238 => OP_IMM_2 & "1100" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
239 => OP_EQ_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 124
240 => OP_JMPF_2 & "1011" & "0000000011110011", -- file: None line: None
241 => OP_JMP_2 & "0000" & "0000000011111001", -- file: /home/jon/streams/streams/__init__.py line: 58
242 => OP_JMP_2 & "0000" & "0000000011110011", -- file: None line: None
243 => OP_WAIT_US_2 & "0000" & "0000000000000000", -- file: ./example_4_svga_clock.py line: 42
244 => OP_MOVE_2 & "1011" & "0000000000001010", -- file: ./example_4_svga_clock.py line: 22
245 => OP_IMM_2 & "1100" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
246 => OP_ADD_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 114
247 => OP_MOVE_2 & "1010" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
248 => OP_JMP_2 & "0000" & "0000000011101011", -- file: /home/jon/streams/streams/__init__.py line: 59
249 => OP_IMM_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
250 => OP_MOVE_2 & "1010" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
251 => OP_MOVE_2 & "1011" & "0000000000001001", -- file: ./example_4_svga_clock.py line: 21
252 => OP_IMM_2 & "1100" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
253 => OP_ADD_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 114
254 => OP_MOVE_2 & "1001" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
255 => OP_JMP_2 & "0000" & "0000000011100011", -- file: /home/jon/streams/streams/__init__.py line: 59
256 => OP_IMM_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
257 => OP_MOVE_2 & "1001" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
258 => OP_MOVE_2 & "1011" & "0000000000000011", -- file: ./example_4_svga_clock.py line: 20
259 => OP_IMM_2 & "1100" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
260 => OP_ADD_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 114
261 => OP_MOVE_2 & "0011" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
262 => OP_JMP_2 & "0000" & "0000000000011010", -- file: /home/jon/streams/streams/__init__.py line: 59
263 => OP_IMM_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
264 => OP_MOVE_2 & "0011" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
265 => OP_MOVE_2 & "1011" & "0000000000000010", -- file: ./example_4_svga_clock.py line: 19
266 => OP_IMM_2 & "1100" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
267 => OP_ADD_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 114
268 => OP_MOVE_2 & "0010" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
269 => OP_JMP_2 & "0000" & "0000000000010010", -- file: /home/jon/streams/streams/__init__.py line: 59
270 => OP_IMM_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
271 => OP_MOVE_2 & "0010" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
272 => OP_MOVE_2 & "1011" & "0000000000000001", -- file: ./example_4_svga_clock.py line: 18
273 => OP_IMM_2 & "1100" & "0000000000000001", -- file: /home/jon/streams/streams/instruction.py line: 109
274 => OP_ADD_2 & "1011" & "0000000000001100", -- file: /home/jon/streams/streams/instruction.py line: 114
275 => OP_MOVE_2 & "0001" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
276 => OP_JMP_2 & "0000" & "0000000000001010", -- file: /home/jon/streams/streams/__init__.py line: 59
277 => OP_IMM_2 & "1011" & "0000000000000000", -- file: /home/jon/streams/streams/instruction.py line: 109
278 => OP_MOVE_2 & "0001" & "0000000000001011", -- file: /home/jon/streams/streams/instruction.py line: 264
279 => OP_JMP_2 & "0000" & "0000000000001010", -- file: ./example_4_svga_clock.py line: 57
280 => OP_JMP_2 & "0000" & "0000000100011000", -- file: None line: None
281 => OP_JMP_2 & "0000" & "0000000000000000"); -- file: None line: None
  signal MOD_DIV_2      : std_logic;

begin

  process
  begin
    wait until rising_edge(CLK);
    TIMER_1us <= '0';
    if TIMER_1us_COUNT = 0 then
       TIMER_1us_COUNT <= TIMER_1us_MAX;
       TIMER_1us <= '1';
    else
       TIMER_1us_COUNT <= TIMER_1us_COUNT - 1;
    end if;
    if RST = '1' then
       TIMER_1us_COUNT <= TIMER_1us_MAX;
       TIMER_1us <= '0';
    end if;
  end process;



  --file: ./example_4_svga_clock.py, line: 91
  --svga video generator
  CHARSVGA_1 : CHARSVGA port map( 
    DATA_I     => STREAM_3,
    STB_I      => STREAM_3_STB,
    ACK_O      => STREAM_3_ACK,
  
    --VGA interface
    CLK        => CLK,
    RST        => RST,
    R          => R,
    G          => G,
    B          => B,
    HSYNCH     => HSYNCH,
    VSYNCH     => VSYNCH
  );
  --file: ./example_4_svga_clock.py, line: 16
  --STREAM 1 InPort(PB, 2)
  process
  begin
    wait until rising_edge(CLK);
    IN_PB_DEL <= IN_PB;
    IN_PB_DEL_DEL <= IN_PB_DEL;
    STREAM_1 <= IN_PB_DEL_DEL;
  end process;
  STREAM_1_STB <= '1';

  -- process
  process
    variable INSTRUCTION : std_logic_vector(15 downto 0);
  begin
    wait until rising_edge(CLK);
    INSTRUCTION := INSTRUCTIONS_4(to_integer(PC_4));
    OPERATION_4 <= INSTRUCTION(15 downto 11);
    SRCA_4      <= INSTRUCTION(10 downto 8);
    SRCB_4      <= INSTRUCTION(2 downto 0);
    IMMEDIATE_4 <= INSTRUCTION(7 downto 0);
  end process;

  process
    variable REGA    : std_logic_vector(7 downto 0);
    variable REGB    : std_logic_vector(7 downto 0);
    variable DEST    : std_logic_vector(2 downto 0);
    variable RESULT  : std_logic_vector(7 downto 0);
    variable REGISTERS_EN  : std_logic;
    variable MODULO  : unsigned(7 downto 0);
    variable FLAG_EQ : std_logic;
    variable FLAG_NE : std_logic;
    variable FLAG_GT : std_logic;
    variable FLAG_GE : std_logic;
  begin
    wait until rising_edge(CLK);
    REGISTERS_EN := '0';
    case STATE_4 is
      when STALL =>
        PC_4 <= PC_4 + 1;
        STATE_4 <= EXECUTE;
      when EXECUTE =>
        REGA := REGISTERS_4(to_integer(unsigned(SRCA_4)));
        REGB := REGISTERS_4(to_integer(unsigned(SRCB_4)));
        DEST := SRCA_4;
        RESULT := REGA;
        PC_4 <= PC_4 + 1;

        --share comparator logic
        if REGA = REGB then
          FLAG_EQ := '1';
        else
          FLAG_EQ := '0';
        end if;

        if signed(REGA) > signed(REGB) then
          FLAG_GT := '1';
        else
          FLAG_GT := '0';
        end if;

        FLAG_NE := not FLAG_EQ;
        FLAG_GE := FLAG_GT or FLAG_EQ;

        --execute instructions
        case OPERATION_4 is
          when OP_MOVE_4 => 
            RESULT := REGB;
            REGISTERS_EN := '1';
          when OP_MUL_4  => 
            RESULT := STD_RESIZE( MUL(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_ADD_4  => 
            RESULT := STD_RESIZE( ADD(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_SUB_4  => 
            RESULT := STD_RESIZE( SUB(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_BAND_4 => 
            RESULT := STD_RESIZE(BAND(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_BOR_4  => 
            RESULT := STD_RESIZE( BOR(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_BXOR_4 => 
            RESULT := STD_RESIZE(BXOR(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_SL_4   => 
            RESULT := STD_RESIZE(  SL(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_SR_4   => 
            RESULT := STD_RESIZE(  SR(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_EQ_4   => 
            RESULT := (others => FLAG_EQ);
            REGISTERS_EN := '1';
          when OP_NE_4   => 
            RESULT := (others => FLAG_NE);
            REGISTERS_EN := '1';
          when OP_GT_4   => 
            RESULT := (others => FLAG_GT);
            REGISTERS_EN := '1';
          when OP_GE_4   => 
            RESULT := (others => FLAG_GE);
            REGISTERS_EN := '1';
          when OP_IMM_4  => 
            RESULT := IMMEDIATE_4;
            REGISTERS_EN := '1';
          when OP_JMP_4 =>
            STATE_4 <= STALL;
            PC_4 <= resize(unsigned(IMMEDIATE_4), 7);
          when OP_JMPF_4 =>
            if ZERO_4 = '1' then
              STATE_4 <= STALL;
              PC_4 <= resize(unsigned(IMMEDIATE_4), 7);
            end if;
          when OP_WAIT_US_4 =>
            STATE_4 <= WAIT_US;
            PC_4 <= PC_4;

          when OP_WRITE_3_4 =>
            STATE_4 <= WRITE_STREAM_3;
            DEST := SRCA_4;
            PC_4 <= PC_4;
          when OP_READ_0_4 =>
            STATE_4 <= READ_STREAM_0;
            PC_4 <= PC_4;
          when others => null;
        end case;

        --write back results
        if RESULT = "00000000" then
          ZERO_4 <= '1';
        else
          ZERO_4 <= '0';
        end if;

      when READ_STREAM_0 =>
        if STREAM_0_STB = '1' then
          STREAM_0_ACK <= '1';
          REGISTERS_EN := '1';
          RESULT := STD_RESIZE(STREAM_0, 8);
          STATE_4 <= ACK_STREAM_0;
        end if;
      when ACK_STREAM_0 =>
        STREAM_0_ACK <= '0';
        STATE_4 <= EXECUTE;
        PC_4 <= PC_4 + 1;
      when WRITE_STREAM_3 =>
        STREAM_3_STB <= '1';
        STREAM_3 <= STD_RESIZE(REGA, 8);
        if STREAM_3_ACK = '1' then
          STREAM_3_STB <= '0';
          STATE_4 <= EXECUTE;
          PC_4 <= PC_4 + 1;
        end if;
      when WAIT_US =>
        if TIMER_1uS = '1'then
          PC_4 <= PC_4 + 1;
          STATE_4 <= EXECUTE;
        end if;
    end case;

    if RST = '1' then
      STATE_4 <= STALL;
      PC_4 <= "0000000";
      STREAM_0_ACK <= '0';
      STREAM_3_STB <= '0';
    end if;
    if REGISTERS_EN = '1' then
      REGISTERS_4(to_integer(unsigned(DEST))) <= RESULT;
    end if;
  end process;


  -- process
  process
    variable INSTRUCTION : std_logic_vector(24 downto 0);
  begin
    wait until rising_edge(CLK);
    INSTRUCTION := INSTRUCTIONS_2(to_integer(PC_2));
    OPERATION_2 <= INSTRUCTION(24 downto 20);
    SRCA_2      <= INSTRUCTION(19 downto 16);
    SRCB_2      <= INSTRUCTION(3 downto 0);
    IMMEDIATE_2 <= INSTRUCTION(15 downto 0);
  end process;

  process
    variable REGA    : std_logic_vector(15 downto 0);
    variable REGB    : std_logic_vector(15 downto 0);
    variable DEST    : std_logic_vector(3 downto 0);
    variable RESULT  : std_logic_vector(15 downto 0);
    variable REGISTERS_EN  : std_logic;
    variable MODULO  : unsigned(15 downto 0);
    variable FLAG_EQ : std_logic;
    variable FLAG_NE : std_logic;
    variable FLAG_GT : std_logic;
    variable FLAG_GE : std_logic;
  begin
    wait until rising_edge(CLK);
    REGISTERS_EN := '0';
    case STATE_2 is
      when STALL =>
        PC_2 <= PC_2 + 1;
        STATE_2 <= EXECUTE;
      when EXECUTE =>
        REGA := REGISTERS_2(to_integer(unsigned(SRCA_2)));
        REGB := REGISTERS_2(to_integer(unsigned(SRCB_2)));
        DEST := SRCA_2;
        RESULT := REGA;
        PC_2 <= PC_2 + 1;

        --share comparator logic
        if REGA = REGB then
          FLAG_EQ := '1';
        else
          FLAG_EQ := '0';
        end if;

        if signed(REGA) > signed(REGB) then
          FLAG_GT := '1';
        else
          FLAG_GT := '0';
        end if;

        FLAG_NE := not FLAG_EQ;
        FLAG_GE := FLAG_GT or FLAG_EQ;

        --execute instructions
        case OPERATION_2 is
          when OP_MOVE_2 => 
            RESULT := REGB;
            REGISTERS_EN := '1';
          when OP_MUL_2  => 
            RESULT := STD_RESIZE( MUL(REGA, REGB), 16);
            REGISTERS_EN := '1';
          when OP_ADD_2  => 
            RESULT := STD_RESIZE( ADD(REGA, REGB), 16);
            REGISTERS_EN := '1';
          when OP_SUB_2  => 
            RESULT := STD_RESIZE( SUB(REGA, REGB), 16);
            REGISTERS_EN := '1';
          when OP_BAND_2 => 
            RESULT := STD_RESIZE(BAND(REGA, REGB), 16);
            REGISTERS_EN := '1';
          when OP_BOR_2  => 
            RESULT := STD_RESIZE( BOR(REGA, REGB), 16);
            REGISTERS_EN := '1';
          when OP_BXOR_2 => 
            RESULT := STD_RESIZE(BXOR(REGA, REGB), 16);
            REGISTERS_EN := '1';
          when OP_SL_2   => 
            RESULT := STD_RESIZE(  SL(REGA, REGB), 16);
            REGISTERS_EN := '1';
          when OP_SR_2   => 
            RESULT := STD_RESIZE(  SR(REGA, REGB), 16);
            REGISTERS_EN := '1';
          when OP_EQ_2   => 
            RESULT := (others => FLAG_EQ);
            REGISTERS_EN := '1';
          when OP_NE_2   => 
            RESULT := (others => FLAG_NE);
            REGISTERS_EN := '1';
          when OP_GT_2   => 
            RESULT := (others => FLAG_GT);
            REGISTERS_EN := '1';
          when OP_GE_2   => 
            RESULT := (others => FLAG_GE);
            REGISTERS_EN := '1';
          when OP_IMM_2  => 
            RESULT := IMMEDIATE_2;
            REGISTERS_EN := '1';
          when OP_JMP_2 =>
            STATE_2 <= STALL;
            PC_2 <= resize(unsigned(IMMEDIATE_2), 9);
          when OP_JMPF_2 =>
            if ZERO_2 = '1' then
              STATE_2 <= STALL;
              PC_2 <= resize(unsigned(IMMEDIATE_2), 9);
            end if;
          when OP_WAIT_US_2 =>
            STATE_2 <= WAIT_US;
            PC_2 <= PC_2;
          when OP_DIV_2 =>
            MOD_DIV_2 <= '1';
            A_2 <= std_logic_vector(abs(signed(REGA)));
            B_2 <= std_logic_vector(abs(signed(REGB)));
            SIGN_2 <= REGA(15) xor REGB(15);
            STATE_2 <= DIVIDE_0;
            PC_2 <= PC_2;
          when OP_MOD_2 =>
            MOD_DIV_2 <= '0';
            A_2 <= std_logic_vector(abs(signed(REGA)));
            B_2 <= std_logic_vector(abs(signed(REGB)));
            SIGN_2 <= REGA(15);
            STATE_2 <= DIVIDE_0;
            PC_2 <= PC_2;
          when OP_WRITE_0_2 =>
            STATE_2 <= WRITE_STREAM_0;
            DEST := SRCA_2;
            PC_2 <= PC_2;
          when OP_READ_1_2 =>
            STATE_2 <= READ_STREAM_1;
            PC_2 <= PC_2;
          when others => null;
        end case;

        --write back results
        if RESULT = "0000000000000000" then
          ZERO_2 <= '1';
        else
          ZERO_2 <= '0';
        end if;

      when DIVIDE_0 =>
        QUOTIENT_2 <= (others => '0');
        SHIFTER_2 <= (others => '0');
        SHIFTER_2(0) <= A_2(15);
        A_2 <= A_2(14 downto 0) & '0';
        COUNT_2 <= 15;
        STATE_2 <= DIVIDE_1;

      when DIVIDE_1 => --subtract
       --if SHIFTER - B is positive or zero
       if REMAINDER_2(15) = '0' then
         SHIFTER_2(15 downto 1) <= REMAINDER_2(14 downto 0);
       else
         SHIFTER_2(15 downto 1) <= SHIFTER_2(14 downto 0);
       end if;
       SHIFTER_2(0) <= A_2(15);
       A_2 <= A_2(14 downto 0) & '0';
       QUOTIENT_2 <= QUOTIENT_2(14 downto 0) & not(REMAINDER_2(15));
       if COUNT_2 = 0 then
         STATE_2 <= DIVIDE_2;
       else
         COUNT_2 <= COUNT_2 - 1;
       end if;

     when DIVIDE_2 =>
      REGISTERS_EN := '1';
      if MOD_DIV_2 = '1' then --if division
        if SIGN_2 = '1' then --if negative
          RESULT := std_logic_vector(-signed(QUOTIENT_2));
        else
          RESULT := QUOTIENT_2;
        end if;
      else
        MODULO := unsigned(SHIFTER_2)/2;
        if SIGN_2 = '1' then --if negative
          RESULT := std_logic_vector(0-MODULO);
        else
          RESULT := std_logic_vector(  MODULO);
        end if;
      end if;
      STATE_2 <= EXECUTE;
      PC_2 <= PC_2 + 1;
      when READ_STREAM_1 =>
        if STREAM_1_STB = '1' then
          STREAM_1_ACK <= '1';
          REGISTERS_EN := '1';
          RESULT := STD_RESIZE(STREAM_1, 16);
          STATE_2 <= ACK_STREAM_1;
        end if;
      when ACK_STREAM_1 =>
        STREAM_1_ACK <= '0';
        STATE_2 <= EXECUTE;
        PC_2 <= PC_2 + 1;
      when WRITE_STREAM_0 =>
        STREAM_0_STB <= '1';
        STREAM_0 <= STD_RESIZE(REGA, 16);
        if STREAM_0_ACK = '1' then
          STREAM_0_STB <= '0';
          STATE_2 <= EXECUTE;
          PC_2 <= PC_2 + 1;
        end if;
      when WAIT_US =>
        if TIMER_1uS = '1'then
          PC_2 <= PC_2 + 1;
          STATE_2 <= EXECUTE;
        end if;
    end case;

    if RST = '1' then
      STATE_2 <= STALL;
      PC_2 <= "000000000";
      STREAM_1_ACK <= '0';
      STREAM_0_STB <= '0';
    end if;
    if REGISTERS_EN = '1' then
      REGISTERS_2(to_integer(unsigned(DEST))) <= RESULT;
    end if;
  end process;


  --subtractor
  REMAINDER_2 <= std_logic_vector(unsigned(SHIFTER_2) - resize(unsigned(B_2), 16));

end architecture RTL;