--+============================================================================+
--|   **THIS FILE WAS AUTOMATICALLY GENERATED BY THE PYTHON STREAMS LIBRARY**  |
--+ ============================================================================+
--|                    _       ________________                                |
--|                   (_)---->/                /     _                         |
--|                    _     / PYTHON STREAMS /---->(_)                        |
--|                   (_)-->/________________/                                 |
--|                                                                            |
--+============================================================================+

-- generated by python streams library
-- date generated  : UTC 2011-04-09 17:30:26
-- platform        : linux2
-- python version  : 2.6.6 (r266:84292, Sep 15 2010, 16:22:56) [GCC 4.4.5]
-- streams version : 0.1

--+============================================================================+
--|                             **END OF HEADER**                              |
--+============================================================================+

--                                   ***                                       

--+============================================================================+
--|                    **START OF EXTERNAL DEPENDENCIES**                      |
--+============================================================================+



--+============================================================================+
--|                     **END OF EXTERNAL DEPENDENCIES**                       |
--+============================================================================+

--                                   ***                                       

--+============================================================================+
--|                     **START OF AUTO GENERATED CODE**                       |
--+============================================================================+

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity STREAMS_VHDL_MODEL is

end entity STREAMS_VHDL_MODEL;

architecture RTL of STREAMS_VHDL_MODEL is


  --returns the greater of the two parameters
  function MAX(
    A : integer;
    B : integer) return integer is
  begin
    if A > B then
      return A;
    else
      return B;
    end if;
  end MAX;

  --returns a std_logic_vector sum of the two parameters
  function ADD(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'length, B'length) + 1) + 
      resize(signed(B), MAX(A'length, B'length) + 1));
    end ADD;

  --returns a std_logic_vector product of the two parameters
  function MUL(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      signed(A) *
      signed(B));
    end MUL;

  --returns a std_logic_vector difference of the two parameters
  function SUB(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'length, B'length) + 1) - 
      resize(signed(B), MAX(A'length, B'length) + 1));
  end SUB;

  --returns A shifted right (arithmetic) by A
  function SR(
    A  : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(shift_right(signed(A), to_integer(signed(B))));
  end SR;

  --returns A shifted left by B
  function SL(
    A  : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(shift_left(signed(A), to_integer(signed(B))));
  end SL;

  --returns bitwise and of A and B
  --(A and B are resized to the length of the larger first)
  function BAND(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) and
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BAND;

  --returns bitwise or of A and B
  --(A and B are resized to the length of the larger first)
  function BOR(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) or
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BOR;

  --returns bitwise xor of A and B
  --(A and B are resized to the length of the larger first)
  function BXOR(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) xor
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BXOR;

  --equality comparison of A and B
  --(A and B are resized to the length of the larger first)
  function EQ(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) =
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end EQ;

  --inequality comparison of A and B
  --(A and B are resized to the length of the larger first)
  function NE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
    resize(signed(A), MAX(A'LENGTH, B'LENGTH)) /=
    resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end NE;

  --greater than comparison of A and B
  --(A and B are resized to the length of the larger first)
  function GT(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) >
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end GT;

  --greater than or equal comparison of A and B
  --(A and B are resized to the length of the larger first)
  function GE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) >=
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end GE;

  --less than comparison of A and B
  --(A and B are resized to the length of the larger first)
  function LT(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) <
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end LT;

  --less than or equal comparison of A and B
  --(A and B are resized to the length of the larger first)
  function LE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) <=
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end LE;

  --resize A to B bits
  function STD_RESIZE(
    A : std_logic_vector; 
    B : integer) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), B));
  end STD_RESIZE;

  type BINARY_STATE_TYPE is (BINARY_INPUT, BINARY_OUTPUT);
  type UNARY_STATE_TYPE is (UNARY_INPUT, UNARY_OUTPUT);
  type TEE_STATE_TYPE is (TEE_INPUT_A, TEE_WAIT_YZ, TEE_WAIT_Y, TEE_WAIT_Z);
  type DIVIDER_STATE_TYPE is (READ_A_B, DIVIDE_1, DIVIDE_2, WRITE_Z);
  type SERIAL_IN_STATE_TYPE is (IDLE, START, RX0, RX1, RX2, RX3, RX4, RX5, RX6, RX7, STOP, OUTPUT_DATA);
  type SERIAL_OUT_STATE_TYPE is (IDLE, START, WAIT_EN, TX0, TX1, TX2, TX3, TX4, TX5, TX6, TX7, STOP);
  type PRINTER_STATE_TYPE is (INPUT_A, SHIFT, OUTPUT_SIGN, OUTPUT_Z, OUTPUT_NL);
  type HEX_PRINTER_STATE_TYPE is (INPUT_A, OUTPUT_SIGN, OUTPUT_DIGITS);

  constant TIMER_1us_MAX : integer := 49;
  signal TIMER_1us_COUNT : integer range 0 to TIMER_1us_MAX;
  signal TIMER_1us : std_logic;
  constant TIMER_10us_MAX : integer := 49;
  signal TIMER_10us_COUNT : integer range 0 to TIMER_1us_MAX;
  signal TIMER_10us : std_logic;
  constant TIMER_100us_MAX : integer := 49;
  signal TIMER_100us_COUNT : integer range 0 to TIMER_1us_MAX;
  signal TIMER_100us : std_logic;
  constant TIMER_1ms_MAX : integer := 49;
  signal TIMER_1ms_COUNT : integer range 0 to TIMER_1us_MAX;
  signal TIMER_1ms : std_logic;

  signal CLK : std_logic;
  signal RST : std_logic;
  signal STATE_368      : BINARY_STATE_TYPE;
  signal STREAM_368     : std_logic_vector(0 downto 0);
  signal STREAM_368_STB : std_logic;
  signal STREAM_368_ACK : std_logic;

  signal STREAM_364     : std_logic_vector(6 downto 0);
  signal STREAM_364_STB : std_logic;
  signal STREAM_364_ACK : std_logic;
  signal STATE_364 : UNARY_STATE_TYPE;
  type LOOKUP_364_TYPE is array (0 to 2) of std_logic_vector(6 downto 0);
  signal LOOKUP_364 : LOOKUP_364_TYPE := (
0 => "0110001",
1 => "0110000",
2 => "0001010"
  );

  signal STREAM_363     : std_logic_vector(2 downto 0);
  signal STREAM_363_STB : std_logic;
  signal STREAM_363_ACK : std_logic;

  signal STREAM_367     : std_logic_vector(4 downto 0);
  signal STREAM_367_STB : std_logic;
  signal STREAM_367_ACK : std_logic;

  signal STREAM_365       : std_logic_vector(7 downto 0);
  signal STREAM_365_STB   : std_logic;
  signal STREAM_365_ACK   : std_logic;
  constant OP_IMM_366 : std_logic_vector(3 downto 0) := "0000";
  constant OP_MOVE_366 : std_logic_vector(3 downto 0) := "0001";
  constant OP_GT_366 : std_logic_vector(3 downto 0) := "0010";
  constant OP_BOR_366 : std_logic_vector(3 downto 0) := "0011";
  constant OP_EQ_366 : std_logic_vector(3 downto 0) := "0100";
  constant OP_JMPF_366 : std_logic_vector(3 downto 0) := "0101";
  constant OP_JMP_366 : std_logic_vector(3 downto 0) := "0110";
  constant OP_BAND_366 : std_logic_vector(3 downto 0) := "0111";
  constant OP_GE_366 : std_logic_vector(3 downto 0) := "1000";
  constant OP_MUL_366 : std_logic_vector(3 downto 0) := "1001";
  constant OP_ADD_366 : std_logic_vector(3 downto 0) := "1010";
  constant OP_READ_364_366 : std_logic_vector(3 downto 0) := "1011";
  constant OP_WRITE_365_366 : std_logic_vector(3 downto 0) := "1100";
  type PROCESS_366_STATE_TYPE is (STALL, EXECUTE, READ_STREAM_364, ACK_STREAM_364, WRITE_STREAM_365);
  type INSTRUCTIONS_TYPE_366  is array (0 to 53) of std_logic_vector(14 downto 0);
  type REGISTERS_TYPE_366     is array (0 to 7) of std_logic_vector(7 downto 0);
  signal STATE_366        : PROCESS_366_STATE_TYPE;
  signal REGISTERS_366    : REGISTERS_TYPE_366;
  signal PC_366           : unsigned(5 downto 0);
  signal OPERATION_366    : std_logic_vector(3 downto 0);
  signal SRCA_366         : std_logic_vector(2 downto 0);
  signal SRCB_366         : std_logic_vector(2 downto 0);
  signal IMMEDIATE_366    : std_logic_vector(7 downto 0);
  signal ZERO_366         : std_logic;
  signal A_366            : std_logic_vector(7 downto 0);
  signal B_366            : std_logic_vector(7 downto 0);
  signal QUOTIENT_366     : std_logic_vector(7 downto 0);
  signal SHIFTER_366      : std_logic_vector(7 downto 0);
  signal REMAINDER_366    : std_logic_vector(7 downto 0);
  signal COUNT_366        : integer range 0 to 8;
  signal SIGN_366         : std_logic;
  signal INSTRUCTIONS_366 : INSTRUCTIONS_TYPE_366 := (
0 => OP_IMM_366 & "001" & "00000000", -- file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py line: 148
1 => OP_IMM_366 & "010" & "00000000", -- file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py line: 149
2 => OP_IMM_366 & "011" & "00000000", -- file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py line: 173
3 => OP_READ_364_366 & "001" & "00000000", -- file: /usr/local/lib/python2.6/dist-packages/chips/streams.py line: 283
4 => OP_IMM_366 & "100" & "00110000", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 118
5 => OP_MOVE_366 & "101" & "00000001", -- file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py line: 148
6 => OP_GT_366 & "100" & "00000101", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 137
7 => OP_MOVE_366 & "101" & "00000001", -- file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py line: 148
8 => OP_IMM_366 & "110" & "00111001", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 118
9 => OP_GT_366 & "101" & "00000110", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 135
10 => OP_BOR_366 & "100" & "00000101", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 129
11 => OP_IMM_366 & "101" & "00000000", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 118
12 => OP_EQ_366 & "100" & "00000101", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 133
13 => OP_JMPF_366 & "100" & "00010000", -- file: None line: None
14 => OP_JMP_366 & "000" & "00010010", -- file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py line: 63
15 => OP_JMP_366 & "000" & "00010000", -- file: None line: None
16 => OP_READ_364_366 & "001" & "00000000", -- file: /usr/local/lib/python2.6/dist-packages/chips/streams.py line: 283
17 => OP_JMP_366 & "000" & "00000100", -- file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py line: 64
18 => OP_MOVE_366 & "100" & "00000001", -- file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py line: 148
19 => OP_IMM_366 & "101" & "00001111", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 118
20 => OP_BAND_366 & "100" & "00000101", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 128
21 => OP_MOVE_366 & "010" & "00000100", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 273
22 => OP_READ_364_366 & "001" & "00000000", -- file: /usr/local/lib/python2.6/dist-packages/chips/streams.py line: 283
23 => OP_MOVE_366 & "100" & "00000001", -- file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py line: 148
24 => OP_IMM_366 & "101" & "00110000", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 118
25 => OP_GE_366 & "100" & "00000101", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 136
26 => OP_IMM_366 & "101" & "00111001", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 118
27 => OP_MOVE_366 & "110" & "00000001", -- file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py line: 148
28 => OP_GE_366 & "101" & "00000110", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 138
29 => OP_BAND_366 & "100" & "00000101", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 128
30 => OP_JMPF_366 & "100" & "00101010", -- file: None line: None
31 => OP_MOVE_366 & "100" & "00000010", -- file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py line: 149
32 => OP_IMM_366 & "101" & "00001010", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 118
33 => OP_MUL_366 & "100" & "00000101", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 125
34 => OP_MOVE_366 & "010" & "00000100", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 273
35 => OP_MOVE_366 & "100" & "00000010", -- file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py line: 149
36 => OP_MOVE_366 & "101" & "00000001", -- file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py line: 148
37 => OP_IMM_366 & "110" & "00001111", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 118
38 => OP_BAND_366 & "101" & "00000110", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 128
39 => OP_ADD_366 & "100" & "00000101", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 123
40 => OP_MOVE_366 & "010" & "00000100", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 273
41 => OP_JMP_366 & "000" & "00101110", -- file: None line: None
42 => OP_IMM_366 & "100" & "00000001", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 118
43 => OP_JMPF_366 & "100" & "00101110", -- file: None line: None
44 => OP_JMP_366 & "000" & "00101111", -- file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py line: 166
45 => OP_JMP_366 & "000" & "00101110", -- file: None line: None
46 => OP_JMP_366 & "000" & "00010110", -- file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py line: 166
47 => OP_MOVE_366 & "100" & "00000010", -- file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py line: 149
48 => OP_MOVE_366 & "011" & "00000100", -- file: /usr/local/lib/python2.6/dist-packages/chips/instruction.py line: 273
49 => OP_MOVE_366 & "100" & "00000011", -- file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py line: 173
50 => OP_WRITE_365_366 & "100" & "00000000", -- file: /usr/local/lib/python2.6/dist-packages/chips/streams.py line: 592
51 => OP_JMP_366 & "000" & "00000011", -- file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py line: 178
52 => OP_JMP_366 & "000" & "00110100", -- file: None line: None
53 => OP_JMP_366 & "000" & "00000000"); -- file: None line: None
  signal MOD_DIV_366      : std_logic;

begin

  process
  begin
    wait until rising_edge(CLK);
    TIMER_1us <= '0';
    TIMER_10us <= '0';
    TIMER_100us <= '0';
    TIMER_1ms <= '0';
    if TIMER_1us_COUNT = 0 then
       TIMER_1us_COUNT <= TIMER_1us_MAX;
       TIMER_1us <= '1';
       if TIMER_10us_COUNT = 0 then
         TIMER_10us_COUNT <= TIMER_10us_MAX;
         TIMER_10us <= '1';
         if TIMER_100us_COUNT = 0 then
           TIMER_100us_COUNT <= TIMER_100us_MAX;
           TIMER_100us <= '1';
           if TIMER_1ms_COUNT = 0 then
             TIMER_1ms_COUNT <= TIMER_1ms_MAX;
             TIMER_1ms <= '1';
           else
             TIMER_1ms_COUNT <= TIMER_1ms_COUNT - 1;
           end if;
         else
           TIMER_100us_COUNT <= TIMER_100us_COUNT - 1;
         end if;
       else
         TIMER_10us_COUNT <= TIMER_10us_COUNT - 1;
       end if;
    else
       TIMER_1us_COUNT <= TIMER_1us_COUNT - 1;
    end if;
    if RST = '1' then
       TIMER_1us_COUNT <= TIMER_1us_MAX;
       TIMER_1us <= '0';
       TIMER_10us_COUNT <= TIMER_10us_MAX;
       TIMER_10us <= '0';
       TIMER_100us_COUNT <= TIMER_100us_MAX;
       TIMER_100us <= '0';
       TIMER_1ms_COUNT <= TIMER_1ms_MAX;
       TIMER_1ms <= '0';
    end if;
  end process;

  --internal clock generator
  process
  begin
    while True loop
      CLK <= '0';
      wait for 5 ns;
      CLK <= '1';
      wait for 5 ns;
    end loop;
    wait;
  end process;

  --internal reset generator
  process
  begin
    RST <= '1';
    wait for 20 ns;
    RST <= '0';
    wait;
  end process;

  --file: /usr/local/bin/test_chips_VHDL.py, line: 942
  --Asserter(368)
  process
  begin
    wait until rising_edge(CLK);
    STREAM_368_ACK <= '0';
    if STREAM_368_STB = '1' and STREAM_368_ACK = '0' then
      assert(STREAM_368 /= "0") severity failure;
      STREAM_368_ACK <= '1';
    end if;
  end process;

  --file: /usr/local/lib/python2.6/dist-packages/chips/streams.py, line: 258
  --STREAM 368 Binary(365, 367, 'eq')
  process
  begin
    wait until rising_edge(CLK);
    case STATE_368 is
      when BINARY_INPUT =>
        if STREAM_365_STB = '1' and STREAM_367_STB = '1' then
          STREAM_365_ACK <= '1'; STREAM_367_ACK <= '1';
          STREAM_368 <= EQ(  STREAM_365, STREAM_367);
          STREAM_368_STB <= '1';
          STATE_368 <= BINARY_OUTPUT;
        end if;
      when BINARY_OUTPUT =>
        STREAM_365_ACK <= '0'; STREAM_367_ACK <= '0';
        if STREAM_368_ACK = '1' then
           STREAM_368_STB <= '0';
           STATE_368 <= BINARY_INPUT;
        end if;
     end case;
     if RST = '1' then
       STREAM_368_STB <= '0';
       STREAM_365_ACK <= '0';
       STREAM_367_ACK <= '0';
       STATE_368 <= BINARY_INPUT;
     end if;
  end process;

  --file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py, line: 59
  --STREAM 364 Lookup()
  process
  begin
    wait until rising_edge(CLK);
    case STATE_364 is
      when UNARY_INPUT =>
        if STREAM_363_STB = '1' then
          STREAM_363_ACK <= '1';
          STREAM_364_STB <= '1';
          STREAM_364 <= LOOKUP_364(to_integer(unsigned(STREAM_363)));
          STATE_364 <= UNARY_OUTPUT;
        end if;
      when UNARY_OUTPUT =>
        STREAM_363_ACK <= '0';
        if STREAM_364_ACK = '1' then
           STREAM_364_STB <= '0';
           STATE_364 <= UNARY_INPUT;
        end if;
     end case;
     if RST = '1' then
       STREAM_364_STB <= '0';
       STREAM_363_ACK <= '0';
       STATE_364 <= UNARY_INPUT;
     end if;
  end process;

  --file: /usr/local/lib/python2.6/dist-packages/chips/__init__.py, line: 59
  --STREAM 363 Counter(0, 2, 1, 3)
  process
  begin
    wait until rising_edge(CLK);
    STREAM_363_STB <= '1';
    if STREAM_363_ACK = '1' then
      STREAM_363_STB <= '0';
      STREAM_363 <= STD_RESIZE(ADD(STREAM_363, "001"), 3);
      if STREAM_363 = "010" then
        STREAM_363 <= "000";
      end if;
    end if;
    if RST = '1' then
      STREAM_363_STB <= '0';
      STREAM_363 <= "000";
    end if;
  end process;

  --file: /usr/local/bin/test_chips_VHDL.py, line: 942
  --STREAM 367 Repeater(10, 5)
  STREAM_367 <= "01010";
  process
  begin
    wait until rising_edge(CLK);
    STREAM_367_STB <= not STREAM_367_ACK;
  end process;

  -- process
  process
    variable INSTRUCTION : std_logic_vector(14 downto 0);
  begin
    wait until rising_edge(CLK);
    INSTRUCTION := INSTRUCTIONS_366(to_integer(PC_366));
    OPERATION_366 <= INSTRUCTION(14 downto 11);
    SRCA_366      <= INSTRUCTION(10 downto 8);
    SRCB_366      <= INSTRUCTION(2 downto 0);
    IMMEDIATE_366 <= INSTRUCTION(7 downto 0);
  end process;

  process
    variable REGA         : std_logic_vector(7 downto 0);
    variable REGB         : std_logic_vector(7 downto 0);
    variable DEST         : std_logic_vector(2 downto 0);
    variable RESULT       : std_logic_vector(7 downto 0);
    variable RESULT_DEL   : std_logic_vector(7 downto 0);
    variable REGISTERS_EN : std_logic;
    variable MODULO       : unsigned(7 downto 0);
    variable FLAG_EQ      : std_logic;
    variable FLAG_GT      : std_logic;
    variable FLAG_GE      : std_logic;
  begin
    wait until rising_edge(CLK);
    REGISTERS_EN := '0';
    case STATE_366 is
      when STALL =>
        PC_366 <= PC_366 + 1;
        STATE_366 <= EXECUTE;
      when EXECUTE =>
        REGA := REGISTERS_366(to_integer(unsigned(SRCA_366)));
        REGB := REGISTERS_366(to_integer(unsigned(SRCB_366)));
        DEST := SRCA_366;
        RESULT := REGA;
        PC_366 <= PC_366 + 1;

        --share comparator logic
        if REGA = REGB then
          FLAG_EQ := '1';
        else
          FLAG_EQ := '0';
        end if;

        if signed(REGA) > signed(REGB) then
          FLAG_GT := '1';
        else
          FLAG_GT := '0';
        end if;

        FLAG_GE := FLAG_GT or FLAG_EQ;

        --execute instructions
        case OPERATION_366 is
          when OP_MOVE_366 => 
            RESULT := REGB;
            REGISTERS_EN := '1';
          when OP_MUL_366  => 
            RESULT := STD_RESIZE( MUL(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_ADD_366  => 
            RESULT := STD_RESIZE( ADD(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_BAND_366 => 
            RESULT := STD_RESIZE(BAND(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_BOR_366  => 
            RESULT := STD_RESIZE( BOR(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_EQ_366   => 
            RESULT := (others => FLAG_EQ);
            REGISTERS_EN := '1';
          when OP_GT_366   => 
            RESULT := (others => FLAG_GT);
            REGISTERS_EN := '1';
          when OP_GE_366   => 
            RESULT := (others => FLAG_GE);
            REGISTERS_EN := '1';
          when OP_IMM_366  => 
            RESULT := IMMEDIATE_366;
            REGISTERS_EN := '1';
          when OP_JMP_366 =>
            STATE_366 <= STALL;
            PC_366 <= resize(unsigned(IMMEDIATE_366), 6);
          when OP_JMPF_366 =>
            if RESULT_DEL = "00000000" then
              STATE_366 <= STALL;
              PC_366 <= resize(unsigned(IMMEDIATE_366), 6);
            end if;

          when OP_WRITE_365_366 =>
            STATE_366 <= WRITE_STREAM_365;
            DEST := SRCA_366;
            PC_366 <= PC_366;
          when OP_READ_364_366 =>
            STATE_366 <= READ_STREAM_364;
            PC_366 <= PC_366;
          when others => null;
        end case;

        --write back results
        RESULT_DEL := RESULT;

      when READ_STREAM_364 =>
        if STREAM_364_STB = '1' then
          STREAM_364_ACK <= '1';
          REGISTERS_EN := '1';
          RESULT := STD_RESIZE(STREAM_364, 8);
          STATE_366 <= ACK_STREAM_364;
        end if;
      when ACK_STREAM_364 =>
        STREAM_364_ACK <= '0';
        STATE_366 <= EXECUTE;
        PC_366 <= PC_366 + 1;
      when WRITE_STREAM_365 =>
        STREAM_365_STB <= '1';
        STREAM_365 <= STD_RESIZE(REGA, 8);
        if STREAM_365_ACK = '1' then
          STREAM_365_STB <= '0';
          STATE_366 <= EXECUTE;
          PC_366 <= PC_366 + 1;
        end if;
    end case;

    if RST = '1' then
      STATE_366 <= STALL;
      PC_366 <= "000000";
      STREAM_364_ACK <= '0';
      STREAM_365_STB <= '0';
    end if;
    if REGISTERS_EN = '1' then
      REGISTERS_366(to_integer(unsigned(DEST))) <= RESULT;
    end if;
  end process;



end architecture RTL;

--+============================================================================+
--|                       **END OF AUTO GENERATED CODE**                       |
--+============================================================================+