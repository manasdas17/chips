--+============================================================================+
--|   **THIS FILE WAS AUTOMATICALLY GENERATED BY THE PYTHON STREAMS LIBRARY**  |
--+ ============================================================================+
--|                    _       ________________                                |
--|                   (_)---->/                /     _                         |
--|                    _     / PYTHON STREAMS /---->(_)                        |
--|                   (_)-->/________________/                                 |
--|                                                                            |
--+============================================================================+

-- generated by python streams library
-- date generated  : UTC 2010-12-21 16:02:10
-- platform        : linux2
-- python version  : 2.6.6 (r266:84292, Sep 15 2010, 16:22:56) 
--                   [GCC 4.4.5]
-- streams version : 0.1

--+============================================================================+
--|                             **END OF HEADER**                              |
--+============================================================================+

--                                   ***                                       

--+============================================================================+
--|                    **START OF EXTERNAL DEPENDENCIES**                      |
--+============================================================================+



--+============================================================================+
--|                     **END OF EXTERNAL DEPENDENCIES**                       |
--+============================================================================+

--                                   ***                                       

--+============================================================================+
--|                     **START OF AUTO GENERATED CODE**                       |
--+============================================================================+

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity STREAMS_VHDL_MODEL is

end entity STREAMS_VHDL_MODEL;

architecture RTL of STREAMS_VHDL_MODEL is


  --returns the greater of the two parameters
  function MAX(
    A : integer;
    B : integer) return integer is
  begin
    if A > B then
      return A;
    else
      return B;
    end if;
  end MAX;

  --returns a std_logic_vector sum of the two parameters
  function ADD(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'length, B'length) + 1) + 
      resize(signed(B), MAX(A'length, B'length) + 1));
    end ADD;

  --returns a std_logic_vector product of the two parameters
  function MUL(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      signed(A) *
      signed(B));
    end MUL;

  --returns a std_logic_vector difference of the two parameters
  function SUB(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'length, B'length) + 1) - 
      resize(signed(B), MAX(A'length, B'length) + 1));
  end SUB;

  --returns A shifted right (arithmetic) by A
  function SR(
    A  : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(shift_right(signed(A), to_integer(signed(B))));
  end SR;

  --returns A shifted left by B
  function SL(
    A  : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(shift_left(signed(A), to_integer(signed(B))));
  end SL;

  --returns bitwise and of A and B
  --(A and B are resized to the length of the larger first)
  function BAND(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) and
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BAND;

  --returns bitwise or of A and B
  --(A and B are resized to the length of the larger first)
  function BOR(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) or
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BOR;

  --returns bitwise xor of A and B
  --(A and B are resized to the length of the larger first)
  function BXOR(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) xor
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)));
  end BXOR;

  --equality comparison of A and B
  --(A and B are resized to the length of the larger first)
  function EQ(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) =
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end EQ;

  --inequality comparison of A and B
  --(A and B are resized to the length of the larger first)
  function NE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
    resize(signed(A), MAX(A'LENGTH, B'LENGTH)) /=
    resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end NE;

  --greater than comparison of A and B
  --(A and B are resized to the length of the larger first)
  function GT(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) >
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end GT;

  --greater than or equal comparison of A and B
  --(A and B are resized to the length of the larger first)
  function GE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) >=
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end GE;

  --less than comparison of A and B
  --(A and B are resized to the length of the larger first)
  function LT(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) <
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end LT;

  --less than or equal comparison of A and B
  --(A and B are resized to the length of the larger first)
  function LE(
    A : std_logic_vector; 
    B : std_logic_vector) return std_logic_vector is
  begin
    if 
      resize(signed(A), MAX(A'LENGTH, B'LENGTH)) <=
      resize(signed(B), MAX(A'LENGTH, B'LENGTH)) then
      return "1";
    else
      return "0";
    end if;
  end LE;

  --resize A to B bits
  function STD_RESIZE(
    A : std_logic_vector; 
    B : integer) return std_logic_vector is
  begin
    return std_logic_vector(
      resize(signed(A), B));
  end STD_RESIZE;

  type BINARY_STATE_TYPE is (BINARY_INPUT, BINARY_OUTPUT);
  type UNARY_STATE_TYPE is (UNARY_INPUT, UNARY_OUTPUT);
  type TEE_STATE_TYPE is (TEE_INPUT_A, TEE_WAIT_YZ, TEE_WAIT_Y, TEE_WAIT_Z);
  type DIVIDER_STATE_TYPE is (READ_A_B, DIVIDE_1, DIVIDE_2, WRITE_Z);
  type SERIAL_IN_STATE_TYPE is (IDLE, START, RX0, RX1, RX2, RX3, RX4, RX5, RX6, RX7, STOP, OUTPUT_DATA);
  type SERIAL_OUT_STATE_TYPE is (IDLE, START, WAIT_EN, TX0, TX1, TX2, TX3, TX4, TX5, TX6, TX7, STOP);
  type PRINTER_STATE_TYPE is (INPUT_A, SHIFT, OUTPUT_SIGN, OUTPUT_Z, OUTPUT_NL);
  type HEX_PRINTER_STATE_TYPE is (INPUT_A, OUTPUT_SIGN, OUTPUT_DIGITS);

  constant TIMER_1us_MAX : integer := 49;
  signal TIMER_1us_COUNT : integer range 0 to TIMER_1us_MAX;
  signal TIMER_1us : std_logic;
  constant TIMER_10us_MAX : integer := 49;
  signal TIMER_10us_COUNT : integer range 0 to TIMER_1us_MAX;
  signal TIMER_10us : std_logic;
  constant TIMER_100us_MAX : integer := 49;
  signal TIMER_100us_COUNT : integer range 0 to TIMER_1us_MAX;
  signal TIMER_100us : std_logic;
  constant TIMER_1ms_MAX : integer := 49;
  signal TIMER_1ms_COUNT : integer range 0 to TIMER_1us_MAX;
  signal TIMER_1ms : std_logic;

  signal CLK : std_logic;
  signal RST : std_logic;
  signal STATE_360      : BINARY_STATE_TYPE;
  signal STREAM_360     : std_logic_vector(0 downto 0);
  signal STREAM_360_STB : std_logic;
  signal STREAM_360_ACK : std_logic;

  signal STREAM_356     : std_logic_vector(6 downto 0);
  signal STREAM_356_STB : std_logic;
  signal STREAM_356_ACK : std_logic;
  signal STATE_356 : UNARY_STATE_TYPE;
  type LOOKUP_356_TYPE is array (0 to 2) of std_logic_vector(6 downto 0);
  signal LOOKUP_356 : LOOKUP_356_TYPE := (
0 => "0110001",
1 => "0110000",
2 => "0001010"
  );

  signal STREAM_355     : std_logic_vector(2 downto 0);
  signal STREAM_355_STB : std_logic;
  signal STREAM_355_ACK : std_logic;

  signal STREAM_359     : std_logic_vector(4 downto 0);
  signal STREAM_359_STB : std_logic;
  signal STREAM_359_ACK : std_logic;

  signal STREAM_357       : std_logic_vector(7 downto 0);
  signal STREAM_357_STB   : std_logic;
  signal STREAM_357_ACK   : std_logic;
  constant OP_ADD_358 : std_logic_vector(4 downto 0) := "00000";
  constant OP_SUB_358 : std_logic_vector(4 downto 0) := "00001";
  constant OP_MUL_358 : std_logic_vector(4 downto 0) := "00010";
  constant OP_DIV_358 : std_logic_vector(4 downto 0) := "00011";
  constant OP_BAND_358 : std_logic_vector(4 downto 0) := "00100";
  constant OP_BOR_358 : std_logic_vector(4 downto 0) := "00101";
  constant OP_BXOR_358 : std_logic_vector(4 downto 0) := "00110";
  constant OP_SL_358 : std_logic_vector(4 downto 0) := "00111";
  constant OP_SR_358 : std_logic_vector(4 downto 0) := "01000";
  constant OP_EQ_358 : std_logic_vector(4 downto 0) := "01001";
  constant OP_NE_358 : std_logic_vector(4 downto 0) := "01010";
  constant OP_GT_358 : std_logic_vector(4 downto 0) := "01011";
  constant OP_GE_358 : std_logic_vector(4 downto 0) := "01100";
  constant OP_JMP_358 : std_logic_vector(4 downto 0) := "01101";
  constant OP_JMPF_358 : std_logic_vector(4 downto 0) := "01110";
  constant OP_IMM_358 : std_logic_vector(4 downto 0) := "01111";
  constant OP_MOVE_358 : std_logic_vector(4 downto 0) := "10000";
  constant OP_WAIT_US_358 : std_logic_vector(4 downto 0) := "10001";
  constant OP_MOD_358 : std_logic_vector(4 downto 0) := "10010";
  constant OP_READ_356_358 : std_logic_vector(4 downto 0) := "10011";
  constant OP_WRITE_357_358 : std_logic_vector(4 downto 0) := "10100";
  type PROCESS_358_STATE_TYPE is (STALL, EXECUTE, WAIT_US, READ_STREAM_356, ACK_STREAM_356, WRITE_STREAM_357);
  type INSTRUCTIONS_TYPE_358  is array (0 to 53) of std_logic_vector(15 downto 0);
  type REGISTERS_TYPE_358     is array (0 to 7) of std_logic_vector(7 downto 0);
  signal STATE_358        : PROCESS_358_STATE_TYPE;
  signal REGISTERS_358    : REGISTERS_TYPE_358;
  signal PC_358           : unsigned(5 downto 0);
  signal OPERATION_358    : std_logic_vector(4 downto 0);
  signal SRCA_358         : std_logic_vector(2 downto 0);
  signal SRCB_358         : std_logic_vector(2 downto 0);
  signal IMMEDIATE_358    : std_logic_vector(7 downto 0);
  signal ZERO_358         : std_logic;
  signal A_358            : std_logic_vector(7 downto 0);
  signal B_358            : std_logic_vector(7 downto 0);
  signal QUOTIENT_358     : std_logic_vector(7 downto 0);
  signal SHIFTER_358      : std_logic_vector(7 downto 0);
  signal REMAINDER_358    : std_logic_vector(7 downto 0);
  signal COUNT_358        : integer range 0 to 8;
  signal SIGN_358         : std_logic;
  signal INSTRUCTIONS_358 : INSTRUCTIONS_TYPE_358 := (
0 => OP_IMM_358 & "001" & "00000000", -- file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py line: 147
1 => OP_IMM_358 & "010" & "00000000", -- file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py line: 148
2 => OP_IMM_358 & "011" & "00000000", -- file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py line: 172
3 => OP_READ_356_358 & "001" & "00000000", -- file: /usr/local/lib/python2.6/dist-packages/streams/streams.py line: 148
4 => OP_IMM_358 & "100" & "00110000", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 109
5 => OP_MOVE_358 & "101" & "00000001", -- file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py line: 147
6 => OP_GT_358 & "100" & "00000101", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 128
7 => OP_MOVE_358 & "101" & "00000001", -- file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py line: 147
8 => OP_IMM_358 & "110" & "00111001", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 109
9 => OP_GT_358 & "101" & "00000110", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 126
10 => OP_BOR_358 & "100" & "00000101", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 120
11 => OP_IMM_358 & "101" & "00000000", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 109
12 => OP_EQ_358 & "100" & "00000101", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 124
13 => OP_JMPF_358 & "100" & "00010000", -- file: None line: None
14 => OP_JMP_358 & "000" & "00010010", -- file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py line: 62
15 => OP_JMP_358 & "000" & "00010000", -- file: None line: None
16 => OP_READ_356_358 & "001" & "00000000", -- file: /usr/local/lib/python2.6/dist-packages/streams/streams.py line: 148
17 => OP_JMP_358 & "000" & "00000100", -- file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py line: 63
18 => OP_MOVE_358 & "100" & "00000001", -- file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py line: 147
19 => OP_IMM_358 & "101" & "00001111", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 109
20 => OP_BAND_358 & "100" & "00000101", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 119
21 => OP_MOVE_358 & "010" & "00000100", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 264
22 => OP_READ_356_358 & "001" & "00000000", -- file: /usr/local/lib/python2.6/dist-packages/streams/streams.py line: 148
23 => OP_MOVE_358 & "100" & "00000001", -- file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py line: 147
24 => OP_IMM_358 & "101" & "00110000", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 109
25 => OP_GE_358 & "100" & "00000101", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 127
26 => OP_IMM_358 & "101" & "00111001", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 109
27 => OP_MOVE_358 & "110" & "00000001", -- file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py line: 147
28 => OP_GE_358 & "101" & "00000110", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 129
29 => OP_BAND_358 & "100" & "00000101", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 119
30 => OP_JMPF_358 & "100" & "00101010", -- file: None line: None
31 => OP_MOVE_358 & "100" & "00000010", -- file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py line: 148
32 => OP_IMM_358 & "101" & "00001010", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 109
33 => OP_MUL_358 & "100" & "00000101", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 116
34 => OP_MOVE_358 & "010" & "00000100", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 264
35 => OP_MOVE_358 & "100" & "00000010", -- file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py line: 148
36 => OP_MOVE_358 & "101" & "00000001", -- file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py line: 147
37 => OP_IMM_358 & "110" & "00001111", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 109
38 => OP_BAND_358 & "101" & "00000110", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 119
39 => OP_ADD_358 & "100" & "00000101", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 114
40 => OP_MOVE_358 & "010" & "00000100", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 264
41 => OP_JMP_358 & "000" & "00101110", -- file: None line: None
42 => OP_IMM_358 & "100" & "00000001", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 109
43 => OP_JMPF_358 & "100" & "00101110", -- file: None line: None
44 => OP_JMP_358 & "000" & "00101111", -- file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py line: 165
45 => OP_JMP_358 & "000" & "00101110", -- file: None line: None
46 => OP_JMP_358 & "000" & "00010110", -- file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py line: 165
47 => OP_MOVE_358 & "100" & "00000010", -- file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py line: 148
48 => OP_MOVE_358 & "011" & "00000100", -- file: /usr/local/lib/python2.6/dist-packages/streams/instruction.py line: 264
49 => OP_MOVE_358 & "100" & "00000011", -- file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py line: 172
50 => OP_WRITE_357_358 & "100" & "00000000", -- file: /usr/local/lib/python2.6/dist-packages/streams/streams.py line: 371
51 => OP_JMP_358 & "000" & "00000011", -- file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py line: 177
52 => OP_JMP_358 & "000" & "00110100", -- file: None line: None
53 => OP_JMP_358 & "000" & "00000000"); -- file: None line: None
  signal MOD_DIV_358      : std_logic;

begin

  process
  begin
    wait until rising_edge(CLK);
    TIMER_1us <= '0';
    TIMER_10us <= '0';
    TIMER_100us <= '0';
    TIMER_1ms <= '0';
    if TIMER_1us_COUNT = 0 then
       TIMER_1us_COUNT <= TIMER_1us_MAX;
       TIMER_1us <= '1';
       if TIMER_10us_COUNT = 0 then
         TIMER_10us_COUNT <= TIMER_10us_MAX;
         TIMER_10us <= '1';
         if TIMER_100us_COUNT = 0 then
           TIMER_100us_COUNT <= TIMER_100us_MAX;
           TIMER_100us <= '1';
           if TIMER_1ms_COUNT = 0 then
             TIMER_1ms_COUNT <= TIMER_1ms_MAX;
             TIMER_1ms <= '1';
           else
             TIMER_1ms_COUNT <= TIMER_1ms_COUNT - 1;
           end if;
         else
           TIMER_100us_COUNT <= TIMER_100us_COUNT - 1;
         end if;
       else
         TIMER_10us_COUNT <= TIMER_10us_COUNT - 1;
       end if;
    else
       TIMER_1us_COUNT <= TIMER_1us_COUNT - 1;
    end if;
    if RST = '1' then
       TIMER_1us_COUNT <= TIMER_1us_MAX;
       TIMER_1us <= '0';
       TIMER_10us_COUNT <= TIMER_10us_MAX;
       TIMER_10us <= '0';
       TIMER_100us_COUNT <= TIMER_100us_MAX;
       TIMER_100us <= '0';
       TIMER_1ms_COUNT <= TIMER_1ms_MAX;
       TIMER_1ms <= '0';
    end if;
  end process;

  --internal clock generator
  process
  begin
    while True loop
      CLK <= '0';
      wait for 5 ns;
      CLK <= '1';
      wait for 5 ns;
    end loop;
    wait;
  end process;

  --internal reset generator
  process
  begin
    RST <= '1';
    wait for 20 ns;
    RST <= '0';
    wait;
  end process;

  --file: ./test_streams_VHDL.py, line: 906
  --Asserter(360)
  process
  begin
    wait until rising_edge(CLK);
    STREAM_360_ACK <= '0';
    if STREAM_360_STB = '1' and STREAM_360_ACK = '0' then
      assert(STREAM_360 /= "0") severity failure;
      STREAM_360_ACK <= '1';
    end if;
  end process;

  --file: /usr/local/lib/python2.6/dist-packages/streams/streams.py, line: 125
  --STREAM 360 Binary(357, 359, 'eq')
  process
  begin
    wait until rising_edge(CLK);
    case STATE_360 is
      when BINARY_INPUT =>
        if STREAM_357_STB = '1' and STREAM_359_STB = '1' then
          STREAM_357_ACK <= '1'; STREAM_359_ACK <= '1';
          STREAM_360 <= EQ(  STREAM_357, STREAM_359);
          STREAM_360_STB <= '1';
          STATE_360 <= BINARY_OUTPUT;
        end if;
      when BINARY_OUTPUT =>
        STREAM_357_ACK <= '0'; STREAM_359_ACK <= '0';
        if STREAM_360_ACK = '1' then
           STREAM_360_STB <= '0';
           STATE_360 <= BINARY_INPUT;
        end if;
     end case;
     if RST = '1' then
       STREAM_360_STB <= '0';
       STREAM_357_ACK <= '0';
       STREAM_359_ACK <= '0';
       STATE_360 <= BINARY_INPUT;
     end if;
  end process;

  --file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py, line: 58
  --STREAM 356 Lookup()
  process
  begin
    wait until rising_edge(CLK);
    case STATE_356 is
      when UNARY_INPUT =>
        if STREAM_355_STB = '1' then
          STREAM_355_ACK <= '1';
          STREAM_356_STB <= '1';
          STREAM_356 <= LOOKUP_356(to_integer(unsigned(STREAM_355)));
          STATE_356 <= UNARY_OUTPUT;
        end if;
      when UNARY_OUTPUT =>
        STREAM_355_ACK <= '0';
        if STREAM_356_ACK = '1' then
           STREAM_356_STB <= '0';
           STATE_356 <= UNARY_INPUT;
        end if;
     end case;
     if RST = '1' then
       STREAM_356_STB <= '0';
       STREAM_355_ACK <= '0';
       STATE_356 <= UNARY_INPUT;
     end if;
  end process;

  --file: /usr/local/lib/python2.6/dist-packages/streams/__init__.py, line: 58
  --STREAM 355 Counter(0, 2, 1, 3)
  process
  begin
    wait until rising_edge(CLK);
    STREAM_355_STB <= '1';
    if STREAM_355_ACK = '1' then
      STREAM_355_STB <= '0';
      STREAM_355 <= STD_RESIZE(ADD(STREAM_355, "001"), 3);
      if STREAM_355 = "010" then
        STREAM_355 <= "000";
      end if;
    end if;
    if RST = '1' then
      STREAM_355_STB <= '0';
      STREAM_355 <= "000";
    end if;
  end process;

  --file: ./test_streams_VHDL.py, line: 906
  --STREAM 359 Repeater(10, 5)
  STREAM_359 <= "01010";
  process
  begin
    wait until rising_edge(CLK);
    STREAM_359_STB <= not STREAM_359_ACK;
  end process;

  -- process
  process
    variable INSTRUCTION : std_logic_vector(15 downto 0);
  begin
    wait until rising_edge(CLK);
    INSTRUCTION := INSTRUCTIONS_358(to_integer(PC_358));
    OPERATION_358 <= INSTRUCTION(15 downto 11);
    SRCA_358      <= INSTRUCTION(10 downto 8);
    SRCB_358      <= INSTRUCTION(2 downto 0);
    IMMEDIATE_358 <= INSTRUCTION(7 downto 0);
  end process;

  process
    variable REGA    : std_logic_vector(7 downto 0);
    variable REGB    : std_logic_vector(7 downto 0);
    variable DEST    : std_logic_vector(2 downto 0);
    variable RESULT  : std_logic_vector(7 downto 0);
    variable REGISTERS_EN  : std_logic;
    variable MODULO  : unsigned(7 downto 0);
    variable FLAG_EQ : std_logic;
    variable FLAG_NE : std_logic;
    variable FLAG_GT : std_logic;
    variable FLAG_GE : std_logic;
  begin
    wait until rising_edge(CLK);
    REGISTERS_EN := '0';
    case STATE_358 is
      when STALL =>
        PC_358 <= PC_358 + 1;
        STATE_358 <= EXECUTE;
      when EXECUTE =>
        REGA := REGISTERS_358(to_integer(unsigned(SRCA_358)));
        REGB := REGISTERS_358(to_integer(unsigned(SRCB_358)));
        DEST := SRCA_358;
        RESULT := REGA;
        PC_358 <= PC_358 + 1;

        --share comparator logic
        if REGA = REGB then
          FLAG_EQ := '1';
        else
          FLAG_EQ := '0';
        end if;

        if signed(REGA) > signed(REGB) then
          FLAG_GT := '1';
        else
          FLAG_GT := '0';
        end if;

        FLAG_NE := not FLAG_EQ;
        FLAG_GE := FLAG_GT or FLAG_EQ;

        --execute instructions
        case OPERATION_358 is
          when OP_MOVE_358 => 
            RESULT := REGB;
            REGISTERS_EN := '1';
          when OP_MUL_358  => 
            RESULT := STD_RESIZE( MUL(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_ADD_358  => 
            RESULT := STD_RESIZE( ADD(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_SUB_358  => 
            RESULT := STD_RESIZE( SUB(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_BAND_358 => 
            RESULT := STD_RESIZE(BAND(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_BOR_358  => 
            RESULT := STD_RESIZE( BOR(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_BXOR_358 => 
            RESULT := STD_RESIZE(BXOR(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_SL_358   => 
            RESULT := STD_RESIZE(  SL(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_SR_358   => 
            RESULT := STD_RESIZE(  SR(REGA, REGB), 8);
            REGISTERS_EN := '1';
          when OP_EQ_358   => 
            RESULT := (others => FLAG_EQ);
            REGISTERS_EN := '1';
          when OP_NE_358   => 
            RESULT := (others => FLAG_NE);
            REGISTERS_EN := '1';
          when OP_GT_358   => 
            RESULT := (others => FLAG_GT);
            REGISTERS_EN := '1';
          when OP_GE_358   => 
            RESULT := (others => FLAG_GE);
            REGISTERS_EN := '1';
          when OP_IMM_358  => 
            RESULT := IMMEDIATE_358;
            REGISTERS_EN := '1';
          when OP_JMP_358 =>
            STATE_358 <= STALL;
            PC_358 <= resize(unsigned(IMMEDIATE_358), 6);
          when OP_JMPF_358 =>
            if ZERO_358 = '1' then
              STATE_358 <= STALL;
              PC_358 <= resize(unsigned(IMMEDIATE_358), 6);
            end if;
          when OP_WAIT_US_358 =>
            STATE_358 <= WAIT_US;
            PC_358 <= PC_358;

          when OP_WRITE_357_358 =>
            STATE_358 <= WRITE_STREAM_357;
            DEST := SRCA_358;
            PC_358 <= PC_358;
          when OP_READ_356_358 =>
            STATE_358 <= READ_STREAM_356;
            PC_358 <= PC_358;
          when others => null;
        end case;

        --write back results
        if RESULT = "00000000" then
          ZERO_358 <= '1';
        else
          ZERO_358 <= '0';
        end if;

      when READ_STREAM_356 =>
        if STREAM_356_STB = '1' then
          STREAM_356_ACK <= '1';
          REGISTERS_EN := '1';
          RESULT := STD_RESIZE(STREAM_356, 8);
          STATE_358 <= ACK_STREAM_356;
        end if;
      when ACK_STREAM_356 =>
        STREAM_356_ACK <= '0';
        STATE_358 <= EXECUTE;
        PC_358 <= PC_358 + 1;
      when WRITE_STREAM_357 =>
        STREAM_357_STB <= '1';
        STREAM_357 <= STD_RESIZE(REGA, 8);
        if STREAM_357_ACK = '1' then
          STREAM_357_STB <= '0';
          STATE_358 <= EXECUTE;
          PC_358 <= PC_358 + 1;
        end if;
      when WAIT_US =>
        if TIMER_1uS = '1'then
          PC_358 <= PC_358 + 1;
          STATE_358 <= EXECUTE;
        end if;
    end case;

    if RST = '1' then
      STATE_358 <= STALL;
      PC_358 <= "000000";
      STREAM_356_ACK <= '0';
      STREAM_357_STB <= '0';
    end if;
    if REGISTERS_EN = '1' then
      REGISTERS_358(to_integer(unsigned(DEST))) <= RESULT;
    end if;
  end process;



end architecture RTL;

--+============================================================================+
--|                       **END OF AUTO GENERATED CODE**                       |
--+============================================================================+